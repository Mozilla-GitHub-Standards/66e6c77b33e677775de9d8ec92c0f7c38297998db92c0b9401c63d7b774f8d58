[
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "devtools/shared/css/generated/properties-db.js",
        "binary": false,
        "count_add": 0,
        "count_del": 60,
        "lines": [
            [
                3128,
                3128,
                "      \"pointer-events\","
            ],
            [
                3129,
                3129,
                "      \"position\","
            ],
            [
                3130,
                3130,
                "      \"quotes\","
            ],
            [
                3131,
                3131,
                "      \"resize\","
            ],
            [
                3132,
                3132,
                "      \"right\","
            ],
            [
                3133,
                3133,
                "      \"ruby-align\","
            ],
            [
                3134,
                3134,
                "      \"ruby-position\","
            ],
            [
                3135,
                3135,
                "      \"scroll-behavior\","
            ],
            [
                3136,
                0,
                "      \"overscroll-behavior-x\","
            ],
            [
                3137,
                0,
                "      \"overscroll-behavior-y\","
            ],
            [
                3138,
                3136,
                "      \"scroll-snap-coordinate\","
            ],
            [
                3139,
                3137,
                "      \"scroll-snap-destination\","
            ],
            [
                3140,
                3138,
                "      \"scroll-snap-points-x\","
            ],
            [
                3141,
                3139,
                "      \"scroll-snap-points-y\","
            ],
            [
                3142,
                3140,
                "      \"scroll-snap-type-x\","
            ],
            [
                3143,
                3141,
                "      \"scroll-snap-type-y\","
            ],
            [
                3144,
                3142,
                "      \"shape-outside\","
            ],
            [
                3145,
                3143,
                "      \"shape-rendering\","
            ],
            [
                8310,
                8308,
                "      \"hidden\","
            ],
            [
                8311,
                8309,
                "      \"inherit\","
            ],
            [
                8312,
                8310,
                "      \"initial\","
            ],
            [
                8313,
                8311,
                "      \"scroll\","
            ],
            [
                8314,
                8312,
                "      \"unset\","
            ],
            [
                8315,
                8313,
                "      \"visible\""
            ],
            [
                8316,
                8314,
                "    ]"
            ],
            [
                8317,
                8315,
                "  },"
            ],
            [
                8318,
                0,
                "  \"overscroll-behavior\": {"
            ],
            [
                8319,
                0,
                "    \"isInherited\": false,"
            ],
            [
                8320,
                0,
                "    \"subproperties\": ["
            ],
            [
                8321,
                0,
                "      \"overscroll-behavior-x\","
            ],
            [
                8322,
                0,
                "      \"overscroll-behavior-y\""
            ],
            [
                8323,
                0,
                "    ],"
            ],
            [
                8324,
                0,
                "    \"supports\": [],"
            ],
            [
                8325,
                0,
                "    \"values\": ["
            ],
            [
                8326,
                0,
                "      \"auto\","
            ],
            [
                8327,
                0,
                "      \"contain\","
            ],
            [
                8328,
                0,
                "      \"inherit\","
            ],
            [
                8329,
                0,
                "      \"initial\","
            ],
            [
                8330,
                0,
                "      \"none\","
            ],
            [
                8331,
                0,
                "      \"unset\""
            ],
            [
                8332,
                0,
                "    ]"
            ],
            [
                8333,
                0,
                "  },"
            ],
            [
                8334,
                0,
                "  \"overscroll-behavior-x\": {"
            ],
            [
                8335,
                0,
                "    \"isInherited\": false,"
            ],
            [
                8336,
                0,
                "    \"subproperties\": ["
            ],
            [
                8337,
                0,
                "      \"overscroll-behavior-x\""
            ],
            [
                8338,
                0,
                "    ],"
            ],
            [
                8339,
                0,
                "    \"supports\": [],"
            ],
            [
                8340,
                0,
                "    \"values\": ["
            ],
            [
                8341,
                0,
                "      \"auto\","
            ],
            [
                8342,
                0,
                "      \"contain\","
            ],
            [
                8343,
                0,
                "      \"inherit\","
            ],
            [
                8344,
                0,
                "      \"initial\","
            ],
            [
                8345,
                0,
                "      \"none\","
            ],
            [
                8346,
                0,
                "      \"unset\""
            ],
            [
                8347,
                0,
                "    ]"
            ],
            [
                8348,
                0,
                "  },"
            ],
            [
                8349,
                0,
                "  \"overscroll-behavior-y\": {"
            ],
            [
                8350,
                0,
                "    \"isInherited\": false,"
            ],
            [
                8351,
                0,
                "    \"subproperties\": ["
            ],
            [
                8352,
                0,
                "      \"overscroll-behavior-y\""
            ],
            [
                8353,
                0,
                "    ],"
            ],
            [
                8354,
                0,
                "    \"supports\": [],"
            ],
            [
                8355,
                0,
                "    \"values\": ["
            ],
            [
                8356,
                0,
                "      \"auto\","
            ],
            [
                8357,
                0,
                "      \"contain\","
            ],
            [
                8358,
                0,
                "      \"inherit\","
            ],
            [
                8359,
                0,
                "      \"initial\","
            ],
            [
                8360,
                0,
                "      \"none\","
            ],
            [
                8361,
                0,
                "      \"unset\""
            ],
            [
                8362,
                0,
                "    ]"
            ],
            [
                8363,
                0,
                "  },"
            ],
            [
                8364,
                8316,
                "  \"padding\": {"
            ],
            [
                8365,
                8317,
                "    \"isInherited\": false,"
            ],
            [
                8366,
                8318,
                "    \"subproperties\": ["
            ],
            [
                8367,
                8319,
                "      \"padding-top\","
            ],
            [
                8368,
                8320,
                "      \"padding-right\","
            ],
            [
                8369,
                8321,
                "      \"padding-bottom\","
            ],
            [
                8370,
                8322,
                "      \"padding-left\""
            ],
            [
                8371,
                8323,
                "    ],"
            ],
            [
                10014,
                9966,
                "    \"paint-order\","
            ],
            [
                10015,
                9967,
                "    \"svg.paint-order.enabled\""
            ],
            [
                10016,
                9968,
                "  ],"
            ],
            [
                10017,
                9969,
                "  ["
            ],
            [
                10018,
                9970,
                "    \"scroll-behavior\","
            ],
            [
                10019,
                9971,
                "    \"layout.css.scroll-behavior.property-enabled\""
            ],
            [
                10020,
                9972,
                "  ],"
            ],
            [
                10021,
                9973,
                "  ["
            ],
            [
                10022,
                0,
                "    \"overscroll-behavior\","
            ],
            [
                10023,
                0,
                "    \"layout.css.overscroll-behavior.enabled\""
            ],
            [
                10024,
                0,
                "  ],"
            ],
            [
                10025,
                0,
                "  ["
            ],
            [
                10026,
                0,
                "    \"overscroll-behavior-x\","
            ],
            [
                10027,
                0,
                "    \"layout.css.overscroll-behavior.enabled\""
            ],
            [
                10028,
                0,
                "  ],"
            ],
            [
                10029,
                0,
                "  ["
            ],
            [
                10030,
                0,
                "    \"overscroll-behavior-y\","
            ],
            [
                10031,
                0,
                "    \"layout.css.overscroll-behavior.enabled\""
            ],
            [
                10032,
                0,
                "  ],"
            ],
            [
                10033,
                0,
                "  ["
            ],
            [
                10034,
                9974,
                "    \"scroll-snap-coordinate\","
            ],
            [
                10035,
                9975,
                "    \"layout.css.scroll-snap.enabled\""
            ],
            [
                10036,
                9976,
                "  ],"
            ],
            [
                10037,
                9977,
                "  ["
            ],
            [
                10038,
                9978,
                "    \"scroll-snap-destination\","
            ],
            [
                10039,
                9979,
                "    \"layout.css.scroll-snap.enabled\""
            ],
            [
                10040,
                9980,
                "  ],"
            ],
            [
                10041,
                9981,
                "  ["
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/FrameMetrics.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 26,
        "lines": [
            [
                1,
                1,
                "/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */"
            ],
            [
                2,
                2,
                "/* vim: set ts=8 sts=2 et sw=2 tw=80: */"
            ],
            [
                3,
                3,
                "/* This Source Code Form is subject to the terms of the Mozilla Public"
            ],
            [
                4,
                4,
                " * License, v. 2.0. If a copy of the MPL was not distributed with this"
            ],
            [
                5,
                5,
                " * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
            ],
            [
                6,
                6,
                ""
            ],
            [
                7,
                7,
                "#include \"FrameMetrics.h\""
            ],
            [
                8,
                8,
                "#include \"gfxPrefs.h\""
            ],
            [
                9,
                0,
                "#include \"nsStyleConsts.h\""
            ],
            [
                10,
                9,
                ""
            ],
            [
                11,
                10,
                "namespace mozilla {"
            ],
            [
                12,
                11,
                "namespace layers {"
            ],
            [
                13,
                12,
                ""
            ],
            [
                14,
                13,
                "const FrameMetrics::ViewID FrameMetrics::NULL_SCROLL_ID = 0;"
            ],
            [
                15,
                14,
                ""
            ],
            [
                16,
                15,
                "void"
            ],
            [
                17,
                16,
                "ScrollMetadata::SetUsesContainerScrolling(bool aValue) {"
            ],
            [
                18,
                17,
                "  MOZ_ASSERT_IF(aValue, gfxPrefs::LayoutUseContainersForRootFrames());"
            ],
            [
                19,
                18,
                "  mUsesContainerScrolling = aValue;"
            ],
            [
                20,
                19,
                "}"
            ],
            [
                21,
                20,
                ""
            ],
            [
                22,
                0,
                "static OverscrollBehavior"
            ],
            [
                23,
                0,
                "ToOverscrollBehavior(StyleOverscrollBehavior aBehavior)"
            ],
            [
                24,
                0,
                "{"
            ],
            [
                25,
                0,
                "  switch (aBehavior) {"
            ],
            [
                26,
                0,
                "  case StyleOverscrollBehavior::Auto:"
            ],
            [
                27,
                0,
                "    return OverscrollBehavior::Auto;"
            ],
            [
                28,
                0,
                "  case StyleOverscrollBehavior::Contain:"
            ],
            [
                29,
                0,
                "    return OverscrollBehavior::Contain;"
            ],
            [
                30,
                0,
                "  case StyleOverscrollBehavior::None:"
            ],
            [
                31,
                0,
                "    return OverscrollBehavior::None;"
            ],
            [
                32,
                0,
                "  }"
            ],
            [
                33,
                0,
                "  MOZ_ASSERT_UNREACHABLE(\"Invalid overscroll behavior\");"
            ],
            [
                34,
                0,
                "  return OverscrollBehavior::Auto;"
            ],
            [
                35,
                0,
                "}"
            ],
            [
                36,
                0,
                ""
            ],
            [
                37,
                0,
                "OverscrollBehaviorInfo"
            ],
            [
                38,
                0,
                "OverscrollBehaviorInfo::FromStyleConstants(StyleOverscrollBehavior aBehaviorX,"
            ],
            [
                39,
                0,
                "                                           StyleOverscrollBehavior aBehaviorY)"
            ],
            [
                40,
                0,
                "{"
            ],
            [
                41,
                0,
                "  OverscrollBehaviorInfo result;"
            ],
            [
                42,
                0,
                "  result.mBehaviorX = ToOverscrollBehavior(aBehaviorX);"
            ],
            [
                43,
                0,
                "  result.mBehaviorY = ToOverscrollBehavior(aBehaviorY);"
            ],
            [
                44,
                0,
                "  return result;"
            ],
            [
                45,
                0,
                "}"
            ],
            [
                46,
                0,
                ""
            ],
            [
                47,
                21,
                "StaticAutoPtr<const ScrollMetadata> ScrollMetadata::sNullMetadata;"
            ],
            [
                48,
                22,
                ""
            ],
            [
                49,
                23,
                "}"
            ],
            [
                50,
                24,
                "}"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/FrameMetrics.h",
        "binary": false,
        "count_add": 1,
        "count_del": 39,
        "lines": [
            [
                716,
                716,
                "  // shipping the raw nsStyleCoord::CalcValue over IPC)."
            ],
            [
                717,
                717,
                "  nsPoint mScrollSnapDestination;"
            ],
            [
                718,
                718,
                ""
            ],
            [
                719,
                719,
                "  // The scroll-snap-coordinates of any descendant frames of the scroll frame,"
            ],
            [
                720,
                720,
                "  // relative to the origin of the scrolled frame."
            ],
            [
                721,
                721,
                "  nsTArray<nsPoint> mScrollSnapCoordinates;"
            ],
            [
                722,
                722,
                "};"
            ],
            [
                723,
                723,
                ""
            ],
            [
                724,
                0,
                "MOZ_DEFINE_ENUM_CLASS_WITH_BASE("
            ],
            [
                725,
                0,
                "  OverscrollBehavior, uint8_t, ("
            ],
            [
                726,
                0,
                "    Auto,"
            ],
            [
                727,
                0,
                "    Contain,"
            ],
            [
                728,
                0,
                "    None"
            ],
            [
                729,
                0,
                "));"
            ],
            [
                730,
                0,
                ""
            ],
            [
                731,
                0,
                "struct OverscrollBehaviorInfo {"
            ],
            [
                732,
                0,
                "  OverscrollBehaviorInfo()"
            ],
            [
                733,
                0,
                "    : mBehaviorX(OverscrollBehavior::Auto)"
            ],
            [
                734,
                0,
                "    , mBehaviorY(OverscrollBehavior::Auto)"
            ],
            [
                735,
                0,
                "  {}"
            ],
            [
                736,
                0,
                ""
            ],
            [
                737,
                0,
                "  // Construct from StyleOverscrollBehavior values."
            ],
            [
                738,
                0,
                "  static OverscrollBehaviorInfo FromStyleConstants(StyleOverscrollBehavior aBehaviorX,"
            ],
            [
                739,
                0,
                "                                                   StyleOverscrollBehavior aBehaviorY);"
            ],
            [
                740,
                0,
                ""
            ],
            [
                741,
                0,
                "  bool operator==(const OverscrollBehaviorInfo& aOther) const {"
            ],
            [
                742,
                0,
                "    return mBehaviorX == aOther.mBehaviorX &&"
            ],
            [
                743,
                0,
                "           mBehaviorY == aOther.mBehaviorY;"
            ],
            [
                744,
                0,
                "  }"
            ],
            [
                745,
                0,
                ""
            ],
            [
                746,
                0,
                "  OverscrollBehavior mBehaviorX;"
            ],
            [
                747,
                0,
                "  OverscrollBehavior mBehaviorY;"
            ],
            [
                748,
                0,
                "};"
            ],
            [
                749,
                0,
                ""
            ],
            [
                750,
                724,
                "/**"
            ],
            [
                751,
                725,
                " * A clip that applies to a layer, that may be scrolled by some of the"
            ],
            [
                752,
                726,
                " * scroll frames associated with the layer."
            ],
            [
                753,
                727,
                " */"
            ],
            [
                754,
                728,
                "struct LayerClip {"
            ],
            [
                755,
                729,
                "  friend struct IPC::ParamTraits<mozilla::layers::LayerClip>;"
            ],
            [
                756,
                730,
                ""
            ],
            [
                757,
                731,
                "public:"
            ],
            [
                818,
                792,
                "    , mLineScrollAmount(0, 0)"
            ],
            [
                819,
                793,
                "    , mPageScrollAmount(0, 0)"
            ],
            [
                820,
                794,
                "    , mScrollClip()"
            ],
            [
                821,
                795,
                "    , mHasScrollgrab(false)"
            ],
            [
                822,
                796,
                "    , mAllowVerticalScrollWithWheel(false)"
            ],
            [
                823,
                797,
                "    , mIsLayersIdRoot(false)"
            ],
            [
                824,
                798,
                "    , mUsesContainerScrolling(false)"
            ],
            [
                825,
                799,
                "    , mForceDisableApz(false)"
            ],
            [
                826,
                0,
                "    , mOverscrollBehavior()"
            ],
            [
                827,
                800,
                "  {}"
            ],
            [
                828,
                801,
                ""
            ],
            [
                829,
                802,
                "  bool operator==(const ScrollMetadata& aOther) const"
            ],
            [
                830,
                803,
                "  {"
            ],
            [
                831,
                804,
                "    return mMetrics == aOther.mMetrics &&"
            ],
            [
                832,
                805,
                "           mSnapInfo == aOther.mSnapInfo &&"
            ],
            [
                833,
                806,
                "           mScrollParentId == aOther.mScrollParentId &&"
            ],
            [
                834,
                807,
                "           mBackgroundColor == aOther.mBackgroundColor &&"
            ],
            [
                835,
                808,
                "           // don't compare mContentDescription"
            ],
            [
                836,
                809,
                "           mLineScrollAmount == aOther.mLineScrollAmount &&"
            ],
            [
                837,
                810,
                "           mPageScrollAmount == aOther.mPageScrollAmount &&"
            ],
            [
                838,
                811,
                "           mScrollClip == aOther.mScrollClip &&"
            ],
            [
                839,
                812,
                "           mHasScrollgrab == aOther.mHasScrollgrab &&"
            ],
            [
                840,
                813,
                "           mAllowVerticalScrollWithWheel == aOther.mAllowVerticalScrollWithWheel &&"
            ],
            [
                841,
                814,
                "           mIsLayersIdRoot == aOther.mIsLayersIdRoot &&"
            ],
            [
                842,
                815,
                "           mUsesContainerScrolling == aOther.mUsesContainerScrolling &&"
            ],
            [
                843,
                0,
                "           mForceDisableApz == aOther.mForceDisableApz &&"
            ],
            [
                844,
                0,
                "           mOverscrollBehavior == aOther.mOverscrollBehavior;"
            ],
            [
                0,
                816,
                "           mForceDisableApz == aOther.mForceDisableApz;"
            ],
            [
                845,
                817,
                "  }"
            ],
            [
                846,
                818,
                ""
            ],
            [
                847,
                819,
                "  bool operator!=(const ScrollMetadata& aOther) const"
            ],
            [
                848,
                820,
                "  {"
            ],
            [
                849,
                821,
                "    return !operator==(aOther);"
            ],
            [
                850,
                822,
                "  }"
            ],
            [
                851,
                823,
                ""
            ],
            [
                852,
                824,
                "  bool IsDefault() const"
            ],
            [
                946,
                918,
                "  }"
            ],
            [
                947,
                919,
                "  void SetForceDisableApz(bool aForceDisable) {"
            ],
            [
                948,
                920,
                "    mForceDisableApz = aForceDisable;"
            ],
            [
                949,
                921,
                "  }"
            ],
            [
                950,
                922,
                "  bool IsApzForceDisabled() const {"
            ],
            [
                951,
                923,
                "    return mForceDisableApz;"
            ],
            [
                952,
                924,
                "  }"
            ],
            [
                953,
                925,
                ""
            ],
            [
                954,
                0,
                "  void SetOverscrollBehavior(const OverscrollBehaviorInfo& aOverscrollBehavior) {"
            ],
            [
                955,
                0,
                "    mOverscrollBehavior = aOverscrollBehavior;"
            ],
            [
                956,
                0,
                "  }"
            ],
            [
                957,
                0,
                "  const OverscrollBehaviorInfo& GetOverscrollBehavior() const {"
            ],
            [
                958,
                0,
                "    return mOverscrollBehavior;"
            ],
            [
                959,
                0,
                "  }"
            ],
            [
                960,
                0,
                ""
            ],
            [
                961,
                926,
                "private:"
            ],
            [
                962,
                927,
                "  FrameMetrics mMetrics;"
            ],
            [
                963,
                928,
                ""
            ],
            [
                964,
                929,
                "  // Information used to determine where to snap to for a given scroll."
            ],
            [
                965,
                930,
                "  ScrollSnapInfo mSnapInfo;"
            ],
            [
                966,
                931,
                ""
            ],
            [
                967,
                932,
                "  // The ViewID of the scrollable frame to which overscroll should be handed off."
            ],
            [
                968,
                933,
                "  ViewID mScrollParentId;"
            ],
            [
                1002,
                967,
                "  // True if scrolling using containers, false otherwise. This can be removed"
            ],
            [
                1003,
                968,
                "  // when containerful scrolling is eliminated."
            ],
            [
                1004,
                969,
                "  bool mUsesContainerScrolling:1;"
            ],
            [
                1005,
                970,
                ""
            ],
            [
                1006,
                971,
                "  // Whether or not the compositor should actually do APZ-scrolling on this"
            ],
            [
                1007,
                972,
                "  // scrollframe."
            ],
            [
                1008,
                973,
                "  bool mForceDisableApz:1;"
            ],
            [
                1009,
                974,
                ""
            ],
            [
                1010,
                0,
                "  // The overscroll behavior for this scroll frame."
            ],
            [
                1011,
                0,
                "  OverscrollBehaviorInfo mOverscrollBehavior;"
            ],
            [
                1012,
                0,
                ""
            ],
            [
                1013,
                975,
                "  // WARNING!!!!"
            ],
            [
                1014,
                976,
                "  //"
            ],
            [
                1015,
                977,
                "  // When adding new fields to ScrollMetadata, the following places should be"
            ],
            [
                1016,
                978,
                "  // updated to include them (as needed):"
            ],
            [
                1017,
                979,
                "  //    ScrollMetadata::operator =="
            ],
            [
                1018,
                980,
                "  //    AsyncPanZoomController::NotifyLayersUpdated"
            ],
            [
                1019,
                981,
                "  //    The ParamTraits specialization in GfxMessageUtils.h"
            ],
            [
                1020,
                982,
                "  //"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/LayersLogging.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 34,
        "lines": [
            [
                173,
                173,
                "  }"
            ],
            [
                174,
                174,
                "  if (!e.mVerticalPanRegion.IsEmpty()) {"
            ],
            [
                175,
                175,
                "    AppendToString(aStream, e.mVerticalPanRegion, \" VerticalPanRegion=\", \"\");"
            ],
            [
                176,
                176,
                "  }"
            ],
            [
                177,
                177,
                "  aStream << \"}\" << sfx;"
            ],
            [
                178,
                178,
                "}"
            ],
            [
                179,
                179,
                ""
            ],
            [
                180,
                180,
                "void"
            ],
            [
                181,
                0,
                "AppendToString(std::stringstream& aStream, OverscrollBehavior aBehavior,"
            ],
            [
                182,
                0,
                "               const char* pfx, const char* sfx)"
            ],
            [
                183,
                0,
                "{"
            ],
            [
                184,
                0,
                "  aStream << pfx;"
            ],
            [
                185,
                0,
                "  switch (aBehavior) {"
            ],
            [
                186,
                0,
                "  case OverscrollBehavior::Auto: {"
            ],
            [
                187,
                0,
                "    aStream << \"auto\";"
            ],
            [
                188,
                0,
                "    break;"
            ],
            [
                189,
                0,
                "  }"
            ],
            [
                190,
                0,
                "  case OverscrollBehavior::Contain: {"
            ],
            [
                191,
                0,
                "    aStream << \"contain\";"
            ],
            [
                192,
                0,
                "    break;"
            ],
            [
                193,
                0,
                "  }"
            ],
            [
                194,
                0,
                "  case OverscrollBehavior::None: {"
            ],
            [
                195,
                0,
                "    aStream << \"none\";"
            ],
            [
                196,
                0,
                "    break;"
            ],
            [
                197,
                0,
                "  }"
            ],
            [
                198,
                0,
                "  }"
            ],
            [
                199,
                0,
                "  aStream << sfx;"
            ],
            [
                200,
                0,
                "}"
            ],
            [
                201,
                0,
                ""
            ],
            [
                202,
                0,
                "void"
            ],
            [
                203,
                181,
                "AppendToString(std::stringstream& aStream, const ScrollMetadata& m,"
            ],
            [
                204,
                182,
                "               const char* pfx, const char* sfx)"
            ],
            [
                205,
                183,
                "{"
            ],
            [
                206,
                184,
                "  aStream << pfx;"
            ],
            [
                207,
                185,
                "  AppendToString(aStream, m.GetMetrics(), \"{ [metrics=\");"
            ],
            [
                208,
                186,
                "  AppendToString(aStream, m.GetBackgroundColor(), \"] [color=\");"
            ],
            [
                209,
                187,
                "  if (m.GetScrollParentId() != FrameMetrics::NULL_SCROLL_ID) {"
            ],
            [
                210,
                188,
                "    AppendToString(aStream, m.GetScrollParentId(), \"] [scrollParent=\");"
            ],
            [
                211,
                189,
                "  }"
            ],
            [
                212,
                190,
                "  if (m.HasScrollClip()) {"
            ],
            [
                213,
                191,
                "    AppendToString(aStream, m.ScrollClip().GetClipRect(), \"] [clip=\");"
            ],
            [
                214,
                192,
                "  }"
            ],
            [
                215,
                193,
                "  if (m.HasMaskLayer()) {"
            ],
            [
                216,
                194,
                "    AppendToString(aStream, m.ScrollClip().GetMaskLayerIndex().value(), \"] [mask=\");"
            ],
            [
                217,
                195,
                "  }"
            ],
            [
                218,
                0,
                "  OverscrollBehavior overscrollX = m.GetOverscrollBehavior().mBehaviorX;"
            ],
            [
                219,
                0,
                "  OverscrollBehavior overscrollY = m.GetOverscrollBehavior().mBehaviorY;"
            ],
            [
                220,
                0,
                "  if (overscrollX == overscrollY && overscrollX != OverscrollBehavior::Auto) {"
            ],
            [
                221,
                0,
                "    AppendToString(aStream, overscrollX, \"] [overscroll=\");"
            ],
            [
                222,
                0,
                "  } else {"
            ],
            [
                223,
                0,
                "    if (overscrollX != OverscrollBehavior::Auto) {"
            ],
            [
                224,
                0,
                "      AppendToString(aStream, overscrollX, \"] [overscroll-x=\");"
            ],
            [
                225,
                0,
                "    }"
            ],
            [
                226,
                0,
                "    if (overscrollY != OverscrollBehavior::Auto) {"
            ],
            [
                227,
                0,
                "      AppendToString(aStream, overscrollY, \"] [overscroll-y=\");"
            ],
            [
                228,
                0,
                "    }"
            ],
            [
                229,
                0,
                "  }"
            ],
            [
                230,
                196,
                "  aStream << \"] }\" << sfx;"
            ],
            [
                231,
                197,
                "}"
            ],
            [
                232,
                198,
                ""
            ],
            [
                233,
                199,
                "void"
            ],
            [
                234,
                200,
                "AppendToString(std::stringstream& aStream, const FrameMetrics& m,"
            ],
            [
                235,
                201,
                "               const char* pfx, const char* sfx, bool detailed)"
            ],
            [
                236,
                202,
                "{"
            ],
            [
                237,
                203,
                "  aStream << pfx;"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/LayersLogging.h",
        "binary": false,
        "count_add": 0,
        "count_del": 4,
        "lines": [
            [
                167,
                167,
                "  aStream << \", covers=\" << r.CoversBounds() << \")\" << sfx;"
            ],
            [
                168,
                168,
                "}"
            ],
            [
                169,
                169,
                ""
            ],
            [
                170,
                170,
                "void"
            ],
            [
                171,
                171,
                "AppendToString(std::stringstream& aStream, const EventRegions& e,"
            ],
            [
                172,
                172,
                "               const char* pfx=\"\", const char* sfx=\"\");"
            ],
            [
                173,
                173,
                ""
            ],
            [
                174,
                174,
                "void"
            ],
            [
                175,
                0,
                "AppendToString(std::stringstream& aStream, OverscrollBehavior aBehavior,"
            ],
            [
                176,
                0,
                "               const char* pfx=\"\", const char* sfx=\"\");"
            ],
            [
                177,
                0,
                ""
            ],
            [
                178,
                0,
                "void"
            ],
            [
                179,
                175,
                "AppendToString(std::stringstream& aStream, const ScrollMetadata& m,"
            ],
            [
                180,
                176,
                "               const char* pfx=\"\", const char* sfx=\"\");"
            ],
            [
                181,
                177,
                ""
            ],
            [
                182,
                178,
                "void"
            ],
            [
                183,
                179,
                "AppendToString(std::stringstream& aStream, const FrameMetrics& m,"
            ],
            [
                184,
                180,
                "               const char* pfx=\"\", const char* sfx=\"\", bool detailed = false);"
            ],
            [
                185,
                181,
                ""
            ],
            [
                186,
                182,
                "void"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/APZCTreeManager.cpp",
        "binary": false,
        "count_add": 39,
        "count_del": 53,
        "lines": [
            [
                1193,
                1193,
                "            apzc,"
            ],
            [
                1194,
                1194,
                "            /* aTargetConfirmed = */ hitResult != HitDispatchToContentRegion,"
            ],
            [
                1195,
                1195,
                "            panInput, aOutInputBlockId);"
            ],
            [
                1196,
                1196,
                ""
            ],
            [
                1197,
                1197,
                "        // Update the out-parameters so they are what the caller expects."
            ],
            [
                1198,
                1198,
                "        apzc->GetGuid(aOutTargetGuid);"
            ],
            [
                1199,
                1199,
                "        panInput.mPanStartPoint = *untransformedStartPoint;"
            ],
            [
                1200,
                1200,
                "        panInput.mPanDisplacement = *untransformedDisplacement;"
            ],
            [
                1201,
                0,
                ""
            ],
            [
                1202,
                0,
                "        panInput.mOverscrollBehaviorAllowsSwipe ="
            ],
            [
                1203,
                0,
                "            apzc->OverscrollBehaviorAllowsSwipe();"
            ],
            [
                1204,
                1201,
                "      }"
            ],
            [
                1205,
                1202,
                "      break;"
            ],
            [
                1206,
                1203,
                "    } case PINCHGESTURE_INPUT: {  // note: no one currently sends these"
            ],
            [
                1207,
                1204,
                "      PinchGestureInput& pinchInput = aEvent.AsPinchGestureInput();"
            ],
            [
                1208,
                1205,
                "      RefPtr<AsyncPanZoomController> apzc = GetTargetAPZC(pinchInput.mFocusPoint,"
            ],
            [
                1209,
                1206,
                "                                                            &hitResult);"
            ],
            [
                1210,
                1207,
                "      if (apzc) {"
            ],
            [
                1211,
                1208,
                "        MOZ_ASSERT(hitResult != HitNothing);"
            ],
            [
                2027,
                2024,
                "    // displacement in its own coordinate space, and make use of it"
            ],
            [
                2028,
                2025,
                "    // (e.g. by going into overscroll)."
            ],
            [
                2029,
                2026,
                "    if (!TransformDisplacement(this, next, aPrev, aStartPoint, aEndPoint)) {"
            ],
            [
                2030,
                2027,
                "      NS_WARNING(\"Failed to untransform scroll points during dispatch\");"
            ],
            [
                2031,
                2028,
                "    }"
            ],
            [
                2032,
                2029,
                "  }"
            ],
            [
                2033,
                2030,
                "}"
            ],
            [
                2034,
                2031,
                ""
            ],
            [
                2035,
                0,
                "ParentLayerPoint"
            ],
            [
                0,
                2032,
                "void"
            ],
            [
                2036,
                2033,
                "APZCTreeManager::DispatchFling(AsyncPanZoomController* aPrev,"
            ],
            [
                2037,
                0,
                "                               const FlingHandoffState& aHandoffState)"
            ],
            [
                0,
                2034,
                "                               FlingHandoffState& aHandoffState)"
            ],
            [
                2038,
                2035,
                "{"
            ],
            [
                2039,
                2036,
                "  // If immediate handoff is disallowed, do not allow handoff beyond the"
            ],
            [
                2040,
                2037,
                "  // single APZC that's scrolled by the input block that triggered this fling."
            ],
            [
                2041,
                2038,
                "  if (aHandoffState.mIsHandoff &&"
            ],
            [
                2042,
                2039,
                "      !gfxPrefs::APZAllowImmediateHandoff() &&"
            ],
            [
                2043,
                2040,
                "      aHandoffState.mScrolledApzc == aPrev) {"
            ],
            [
                2044,
                0,
                "    return aHandoffState.mVelocity;"
            ],
            [
                0,
                2041,
                "    return;"
            ],
            [
                2045,
                2042,
                "  }"
            ],
            [
                2046,
                2043,
                ""
            ],
            [
                2047,
                2044,
                "  const OverscrollHandoffChain* chain = aHandoffState.mChain;"
            ],
            [
                2048,
                2045,
                "  RefPtr<AsyncPanZoomController> current;"
            ],
            [
                2049,
                2046,
                "  uint32_t overscrollHandoffChainLength = chain->Length();"
            ],
            [
                2050,
                2047,
                "  uint32_t startIndex;"
            ],
            [
                2051,
                2048,
                ""
            ],
            [
                0,
                2049,
                "  // This will store any velocity left over after the entire handoff."
            ],
            [
                0,
                2050,
                "  ParentLayerPoint finalResidualVelocity = aHandoffState.mVelocity;"
            ],
            [
                0,
                2051,
                ""
            ],
            [
                2052,
                2052,
                "  // The fling's velocity needs to be transformed from the screen coordinates"
            ],
            [
                2053,
                2053,
                "  // of |aPrev| to the screen coordinates of |next|. To transform a velocity"
            ],
            [
                2054,
                2054,
                "  // correctly, we need to convert it to a displacement. For now, we do this"
            ],
            [
                2055,
                2055,
                "  // by anchoring it to a start point of (0, 0)."
            ],
            [
                2056,
                2056,
                "  // TODO: For this to be correct in the presence of 3D transforms, we should"
            ],
            [
                2057,
                2057,
                "  // use the end point of the touch that started the fling as the start point"
            ],
            [
                2058,
                2058,
                "  // rather than (0, 0)."
            ],
            [
                2059,
                2059,
                "  ParentLayerPoint startPoint;  // (0, 0)"
            ],
            [
                2060,
                2060,
                "  ParentLayerPoint endPoint;"
            ],
            [
                2061,
                2061,
                ""
            ],
            [
                2062,
                2062,
                "  if (aHandoffState.mIsHandoff) {"
            ],
            [
                2063,
                2063,
                "    startIndex = chain->IndexOf(aPrev) + 1;"
            ],
            [
                2064,
                2064,
                ""
            ],
            [
                2065,
                2065,
                "    // IndexOf will return aOverscrollHandoffChain->Length() if"
            ],
            [
                2066,
                2066,
                "    // |aPrev| is not found."
            ],
            [
                2067,
                2067,
                "    if (startIndex >= overscrollHandoffChainLength) {"
            ],
            [
                2068,
                0,
                "      return aHandoffState.mVelocity;"
            ],
            [
                0,
                2068,
                "      return;"
            ],
            [
                2069,
                2069,
                "    }"
            ],
            [
                2070,
                2070,
                "  } else {"
            ],
            [
                2071,
                2071,
                "    startIndex = 0;"
            ],
            [
                2072,
                2072,
                "  }"
            ],
            [
                2073,
                2073,
                ""
            ],
            [
                2074,
                0,
                "  // This will store any velocity left over after the entire handoff."
            ],
            [
                2075,
                0,
                "  ParentLayerPoint finalResidualVelocity = aHandoffState.mVelocity;"
            ],
            [
                2076,
                0,
                ""
            ],
            [
                2077,
                0,
                "  ParentLayerPoint currentVelocity = aHandoffState.mVelocity;"
            ],
            [
                2078,
                2074,
                "  for (; startIndex < overscrollHandoffChainLength; startIndex++) {"
            ],
            [
                2079,
                2075,
                "    current = chain->GetApzcAtIndex(startIndex);"
            ],
            [
                2080,
                2076,
                ""
            ],
            [
                2081,
                0,
                "    // Make sure the apzc about to be handled can be handled"
            ],
            [
                0,
                2077,
                "    // Make sure the apcz about to be handled can be handled"
            ],
            [
                2082,
                2078,
                "    if (current == nullptr || current->IsDestroyed()) {"
            ],
            [
                2083,
                0,
                "      break;"
            ],
            [
                0,
                2079,
                "      return;"
            ],
            [
                2084,
                2080,
                "    }"
            ],
            [
                2085,
                2081,
                ""
            ],
            [
                2086,
                0,
                "    endPoint = startPoint + currentVelocity;"
            ],
            [
                0,
                2082,
                "    endPoint = startPoint + aHandoffState.mVelocity;"
            ],
            [
                2087,
                2083,
                ""
            ],
            [
                2088,
                0,
                "    RefPtr<AsyncPanZoomController> prevApzc = (startIndex > 0)"
            ],
            [
                2089,
                0,
                "                                            ? chain->GetApzcAtIndex(startIndex - 1)"
            ],
            [
                2090,
                0,
                "                                            : nullptr;"
            ],
            [
                2091,
                0,
                ""
            ],
            [
                2092,
                0,
                "    // Only transform when current apzc can be transformed with previous"
            ],
            [
                2093,
                0,
                "    if (prevApzc) {"
            ],
            [
                0,
                2084,
                "    // Only transform when current apcz can be transformed with previous"
            ],
            [
                0,
                2085,
                "    if (startIndex > 0) {"
            ],
            [
                2094,
                2086,
                "      if (!TransformDisplacement(this,"
            ],
            [
                2095,
                0,
                "                                 prevApzc,"
            ],
            [
                0,
                2087,
                "                                 chain->GetApzcAtIndex(startIndex - 1),"
            ],
            [
                2096,
                2088,
                "                                 current,"
            ],
            [
                2097,
                2089,
                "                                 startPoint,"
            ],
            [
                2098,
                2090,
                "                                 endPoint)) {"
            ],
            [
                2099,
                0,
                "        break;"
            ],
            [
                0,
                2091,
                "        return;"
            ],
            [
                2100,
                2092,
                "      }"
            ],
            [
                2101,
                2093,
                "    }"
            ],
            [
                2102,
                2094,
                ""
            ],
            [
                2103,
                0,
                "    ParentLayerPoint availableVelocity = (endPoint - startPoint);"
            ],
            [
                2104,
                0,
                "    ParentLayerPoint residualVelocity;"
            ],
            [
                0,
                2095,
                "    ParentLayerPoint transformedVelocity = endPoint - startPoint;"
            ],
            [
                0,
                2096,
                "    aHandoffState.mVelocity = transformedVelocity;"
            ],
            [
                2105,
                2097,
                ""
            ],
            [
                2106,
                0,
                "    FlingHandoffState transformedHandoffState = aHandoffState;"
            ],
            [
                2107,
                0,
                "    transformedHandoffState.mVelocity = availableVelocity;"
            ],
            [
                0,
                2098,
                "    if (current->AttemptFling(aHandoffState)) {"
            ],
            [
                0,
                2099,
                "      // Coming out of AttemptFling(), the handoff state's velocity is the"
            ],
            [
                0,
                2100,
                "      // residual velocity after attempting to fling |current|."
            ],
            [
                0,
                2101,
                "      ParentLayerPoint residualVelocity = aHandoffState.mVelocity;"
            ],
            [
                2108,
                2102,
                ""
            ],
            [
                2109,
                0,
                "    // Obey overscroll-behavior."
            ],
            [
                2110,
                0,
                "    if (prevApzc) {"
            ],
            [
                2111,
                0,
                "      residualVelocity += prevApzc->AdjustHandoffVelocityForOverscrollBehavior(transformedHandoffState.mVelocity);"
            ],
            [
                2112,
                0,
                "    }"
            ],
            [
                0,
                2103,
                "      // If there's no residual velocity, there's nothing more to hand off."
            ],
            [
                0,
                2104,
                "      if (IsZero(residualVelocity)) {"
            ],
            [
                0,
                2105,
                "        finalResidualVelocity = ParentLayerPoint();"
            ],
            [
                0,
                2106,
                "        break;"
            ],
            [
                0,
                2107,
                "      }"
            ],
            [
                2113,
                2108,
                ""
            ],
            [
                2114,
                0,
                "    residualVelocity += current->AttemptFling(transformedHandoffState);"
            ],
            [
                2115,
                0,
                ""
            ],
            [
                2116,
                0,
                "    // If there's no residual velocity, there's nothing more to hand off."
            ],
            [
                2117,
                0,
                "    if (IsZero(residualVelocity)) {"
            ],
            [
                2118,
                0,
                "      return ParentLayerPoint();"
            ],
            [
                0,
                2109,
                "      // If there is residual velocity, subtract the proportion of used"
            ],
            [
                0,
                2110,
                "      // velocity from finalResidualVelocity and continue handoff along the"
            ],
            [
                0,
                2111,
                "      // chain."
            ],
            [
                0,
                2112,
                "      if (!FuzzyEqualsAdditive(transformedVelocity.x,"
            ],
            [
                0,
                2113,
                "                               residualVelocity.x, COORDINATE_EPSILON)) {"
            ],
            [
                0,
                2114,
                "        finalResidualVelocity.x *= (residualVelocity.x / transformedVelocity.x);"
            ],
            [
                0,
                2115,
                "      }"
            ],
            [
                0,
                2116,
                "      if (!FuzzyEqualsAdditive(transformedVelocity.y,"
            ],
            [
                0,
                2117,
                "                               residualVelocity.y, COORDINATE_EPSILON)) {"
            ],
            [
                0,
                2118,
                "        finalResidualVelocity.y *= (residualVelocity.y / transformedVelocity.y);"
            ],
            [
                0,
                2119,
                "      }"
            ],
            [
                2119,
                2120,
                "    }"
            ],
            [
                2120,
                0,
                ""
            ],
            [
                2121,
                0,
                "    // If any of the velocity available to be handed off was consumed,"
            ],
            [
                2122,
                0,
                "    // subtract the proportion of consumed velocity from finalResidualVelocity."
            ],
            [
                2123,
                0,
                "    // Note: it's important to compare |residualVelocity| to |availableVelocity|"
            ],
            [
                2124,
                0,
                "    // here and not to |transformedHandoffState.mVelocity|, since the latter"
            ],
            [
                2125,
                0,
                "    // may have been modified by AdjustHandoffVelocityForOverscrollBehavior()."
            ],
            [
                2126,
                0,
                "    if (!FuzzyEqualsAdditive(availableVelocity.x,"
            ],
            [
                2127,
                0,
                "                             residualVelocity.x, COORDINATE_EPSILON)) {"
            ],
            [
                2128,
                0,
                "      finalResidualVelocity.x *= (residualVelocity.x / availableVelocity.x);"
            ],
            [
                2129,
                0,
                "    }"
            ],
            [
                2130,
                0,
                "    if (!FuzzyEqualsAdditive(availableVelocity.y,"
            ],
            [
                2131,
                0,
                "                             residualVelocity.y, COORDINATE_EPSILON)) {"
            ],
            [
                2132,
                0,
                "      finalResidualVelocity.y *= (residualVelocity.y / availableVelocity.y);"
            ],
            [
                2133,
                0,
                "    }"
            ],
            [
                2134,
                0,
                ""
            ],
            [
                2135,
                0,
                "    currentVelocity = residualVelocity;"
            ],
            [
                2136,
                2121,
                "  }"
            ],
            [
                2137,
                2122,
                ""
            ],
            [
                2138,
                0,
                "  // Return any residual velocity left over after the entire handoff process."
            ],
            [
                2139,
                0,
                "  return finalResidualVelocity;"
            ],
            [
                0,
                2123,
                "  // Set the handoff state's velocity to any residual velocity left over"
            ],
            [
                0,
                2124,
                "  // after the entire handoff process."
            ],
            [
                0,
                2125,
                "  aHandoffState.mVelocity = finalResidualVelocity;"
            ],
            [
                2140,
                2126,
                "}"
            ],
            [
                2141,
                2127,
                ""
            ],
            [
                2142,
                2128,
                "bool"
            ],
            [
                2143,
                2129,
                "APZCTreeManager::HitTestAPZC(const ScreenIntPoint& aPoint)"
            ],
            [
                2144,
                2130,
                "{"
            ],
            [
                2145,
                2131,
                "  RefPtr<AsyncPanZoomController> target = GetTargetAPZC(aPoint, nullptr);"
            ],
            [
                2146,
                2132,
                "  return target != nullptr;"
            ],
            [
                2147,
                2133,
                "}"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/APZCTreeManager.h",
        "binary": false,
        "count_add": 5,
        "count_del": 6,
        "lines": [
            [
                417,
                417,
                "   *        mChain the chain of APZCs along which the fling"
            ],
            [
                418,
                418,
                "   *                   should be handed off"
            ],
            [
                419,
                419,
                "   *        mIsHandoff is true if |aApzc| is handing off an existing fling (in"
            ],
            [
                420,
                420,
                "   *                   this case the fling is given to the next APZC in the"
            ],
            [
                421,
                421,
                "   *                   handoff chain after |aApzc|), and false is |aApzc| wants"
            ],
            [
                422,
                422,
                "   *                   start a fling (in this case the fling is given to the"
            ],
            [
                423,
                423,
                "   *                   first APZC in the chain)"
            ],
            [
                424,
                424,
                "   *"
            ],
            [
                425,
                0,
                "   * The return value is the \"residual velocity\", the portion of"
            ],
            [
                426,
                0,
                "   * |aHandoffState.mVelocity| that was not consumed by APZCs in the"
            ],
            [
                427,
                0,
                "   * handoff chain doing flings."
            ],
            [
                0,
                425,
                "   * aHandoffState.mVelocity will be modified depending on how much of that"
            ],
            [
                0,
                426,
                "   * velocity has been consumed by APZCs in the overscroll hand-off chain."
            ],
            [
                428,
                427,
                "   * The caller can use this value to determine whether it should consume"
            ],
            [
                429,
                0,
                "   * the excess velocity by going into overscroll."
            ],
            [
                0,
                428,
                "   * the excess velocity by going into an overscroll fling."
            ],
            [
                430,
                429,
                "   */"
            ],
            [
                431,
                0,
                "  ParentLayerPoint DispatchFling(AsyncPanZoomController* aApzc,"
            ],
            [
                432,
                0,
                "                                 const FlingHandoffState& aHandoffState);"
            ],
            [
                0,
                430,
                "  void DispatchFling(AsyncPanZoomController* aApzc,"
            ],
            [
                0,
                431,
                "                     FlingHandoffState& aHandoffState);"
            ],
            [
                433,
                432,
                ""
            ],
            [
                434,
                433,
                "  void StartScrollbarDrag("
            ],
            [
                435,
                434,
                "      const ScrollableLayerGuid& aGuid,"
            ],
            [
                436,
                435,
                "      const AsyncDragMetrics& aDragMetrics) override;"
            ],
            [
                437,
                436,
                ""
            ],
            [
                438,
                437,
                "  bool StartAutoscroll(const ScrollableLayerGuid& aGuid,"
            ],
            [
                439,
                438,
                "                       const ScreenPoint& aAnchorLocation) override;"
            ],
            [
                440,
                439,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/APZUtils.h",
        "binary": false,
        "count_add": 0,
        "count_del": 3,
        "lines": [
            [
                6,
                6,
                ""
            ],
            [
                7,
                7,
                "#ifndef mozilla_layers_APZUtils_h"
            ],
            [
                8,
                8,
                "#define mozilla_layers_APZUtils_h"
            ],
            [
                9,
                9,
                ""
            ],
            [
                10,
                10,
                "#include <stdint.h>                     // for uint32_t"
            ],
            [
                11,
                11,
                "#include \"LayersTypes.h\""
            ],
            [
                12,
                12,
                "#include \"UnitTransforms.h\""
            ],
            [
                13,
                13,
                "#include \"mozilla/gfx/Point.h\""
            ],
            [
                14,
                0,
                "#include \"mozilla/EnumSet.h\""
            ],
            [
                15,
                14,
                "#include \"mozilla/FloatingPoint.h\""
            ],
            [
                16,
                15,
                ""
            ],
            [
                17,
                16,
                "namespace mozilla {"
            ],
            [
                18,
                17,
                "namespace layers {"
            ],
            [
                19,
                18,
                ""
            ],
            [
                20,
                19,
                "enum HitTestResult {"
            ],
            [
                21,
                20,
                "  HitNothing,"
            ],
            [
                22,
                21,
                "  HitLayer,"
            ],
            [
                38,
                37,
                ""
            ],
            [
                39,
                38,
                "inline CancelAnimationFlags"
            ],
            [
                40,
                39,
                "operator|(CancelAnimationFlags a, CancelAnimationFlags b)"
            ],
            [
                41,
                40,
                "{"
            ],
            [
                42,
                41,
                "  return static_cast<CancelAnimationFlags>(static_cast<int>(a)"
            ],
            [
                43,
                42,
                "                                         | static_cast<int>(b));"
            ],
            [
                44,
                43,
                "}"
            ],
            [
                45,
                44,
                ""
            ],
            [
                46,
                0,
                "typedef EnumSet<ScrollDirection> ScrollDirections;"
            ],
            [
                47,
                0,
                ""
            ],
            [
                48,
                45,
                "enum class ScrollSource {"
            ],
            [
                49,
                46,
                "  // scrollTo() or something similar."
            ],
            [
                50,
                47,
                "  DOM,"
            ],
            [
                51,
                48,
                ""
            ],
            [
                52,
                49,
                "  // Touch-screen or trackpad with gesture support."
            ],
            [
                53,
                50,
                "  Touch,"
            ],
            [
                54,
                51,
                ""
            ],
            [
                55,
                52,
                "  // Mouse wheel."
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/AsyncPanZoomController.cpp",
        "binary": false,
        "count_add": 29,
        "count_del": 122,
        "lines": [
            [
                1587,
                1587,
                "    GetCurrentTouchBlock()->GetOverscrollHandoffChain()->SnapBackOverscrolledApzc(this);"
            ],
            [
                1588,
                1588,
                "    return nsEventStatus_eConsumeNoDefault;"
            ],
            [
                1589,
                1589,
                "  }"
            ],
            [
                1590,
                1590,
                ""
            ],
            [
                1591,
                1591,
                "  // Make a local copy of the tree manager pointer and check that it's not"
            ],
            [
                1592,
                1592,
                "  // null before calling DispatchFling(). This is necessary because Destroy(),"
            ],
            [
                1593,
                1593,
                "  // which nulls out mTreeManager, could be called concurrently."
            ],
            [
                1594,
                1594,
                "  if (APZCTreeManager* treeManagerLocal = GetApzcTreeManager()) {"
            ],
            [
                1595,
                0,
                "    const FlingHandoffState handoffState{flingVelocity,"
            ],
            [
                1596,
                0,
                "                                         GetCurrentTouchBlock()->GetOverscrollHandoffChain(),"
            ],
            [
                1597,
                0,
                "                                         false /* not handoff */,"
            ],
            [
                1598,
                0,
                "                                         GetCurrentTouchBlock()->GetScrolledApzc()};"
            ],
            [
                0,
                1595,
                "    FlingHandoffState handoffState{flingVelocity,"
            ],
            [
                0,
                1596,
                "                                  GetCurrentTouchBlock()->GetOverscrollHandoffChain(),"
            ],
            [
                0,
                1597,
                "                                  false /* not handoff */,"
            ],
            [
                0,
                1598,
                "                                  GetCurrentTouchBlock()->GetScrolledApzc()};"
            ],
            [
                1599,
                1599,
                "    treeManagerLocal->DispatchFling(this, handoffState);"
            ],
            [
                1600,
                1600,
                "  }"
            ],
            [
                1601,
                1601,
                "  return nsEventStatus_eConsumeNoDefault;"
            ],
            [
                1602,
                1602,
                "}"
            ],
            [
                1603,
                1603,
                ""
            ],
            [
                1604,
                1604,
                "bool"
            ],
            [
                1605,
                1605,
                "AsyncPanZoomController::ConvertToGecko(const ScreenIntPoint& aPoint, LayoutDevicePoint* aOut)"
            ],
            [
                1606,
                1606,
                "{"
            ],
            [
                1909,
                1909,
                "      }"
            ],
            [
                1910,
                1910,
                "      break;"
            ],
            [
                1911,
                1911,
                "    }"
            ],
            [
                1912,
                1912,
                "  }"
            ],
            [
                1913,
                1913,
                ""
            ],
            [
                1914,
                1914,
                "  return scrollDestination;"
            ],
            [
                1915,
                1915,
                "}"
            ],
            [
                1916,
                1916,
                ""
            ],
            [
                1917,
                0,
                "ParentLayerPoint"
            ],
            [
                1918,
                0,
                "AsyncPanZoomController::GetDeltaForEvent(const InputData& aEvent) const"
            ],
            [
                0,
                1917,
                "// Return whether or not the underlying layer can be scrolled on either axis."
            ],
            [
                0,
                1918,
                "bool"
            ],
            [
                0,
                1919,
                "AsyncPanZoomController::CanScroll(const InputData& aEvent) const"
            ],
            [
                1919,
                1920,
                "{"
            ],
            [
                1920,
                1921,
                "  ParentLayerPoint delta;"
            ],
            [
                1921,
                1922,
                "  if (aEvent.mInputType == SCROLLWHEEL_INPUT) {"
            ],
            [
                1922,
                1923,
                "    delta = GetScrollWheelDelta(aEvent.AsScrollWheelInput());"
            ],
            [
                1923,
                1924,
                "  } else if (aEvent.mInputType == PANGESTURE_INPUT) {"
            ],
            [
                1924,
                1925,
                "    const PanGestureInput& panInput = aEvent.AsPanGestureInput();"
            ],
            [
                1925,
                1926,
                "    delta = ToParentLayerCoordinates(panInput.UserMultipliedPanDisplacement(), panInput.mPanStartPoint);"
            ],
            [
                1926,
                1927,
                "  }"
            ],
            [
                1927,
                0,
                "  return delta;"
            ],
            [
                1928,
                0,
                "}"
            ],
            [
                1929,
                0,
                ""
            ],
            [
                1930,
                0,
                "// Return whether or not the underlying layer can be scrolled on either axis."
            ],
            [
                1931,
                0,
                "bool"
            ],
            [
                1932,
                0,
                "AsyncPanZoomController::CanScroll(const InputData& aEvent) const"
            ],
            [
                1933,
                0,
                "{"
            ],
            [
                1934,
                0,
                "  ParentLayerPoint delta = GetDeltaForEvent(aEvent);"
            ],
            [
                1935,
                1928,
                "  if (!delta.x && !delta.y) {"
            ],
            [
                1936,
                1929,
                "    return false;"
            ],
            [
                1937,
                1930,
                "  }"
            ],
            [
                1938,
                1931,
                ""
            ],
            [
                1939,
                1932,
                "  return CanScrollWithWheel(delta);"
            ],
            [
                1940,
                1933,
                "}"
            ],
            [
                1941,
                1934,
                ""
            ],
            [
                1942,
                0,
                "ScrollDirections"
            ],
            [
                1943,
                0,
                "AsyncPanZoomController::GetAllowedHandoffDirections() const"
            ],
            [
                1944,
                0,
                "{"
            ],
            [
                1945,
                0,
                "  ScrollDirections result;"
            ],
            [
                1946,
                0,
                "  RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                1947,
                0,
                "  if (mX.OverscrollBehaviorAllowsHandoff()) {"
            ],
            [
                1948,
                0,
                "    result += ScrollDirection::eHorizontal;"
            ],
            [
                1949,
                0,
                "  }"
            ],
            [
                1950,
                0,
                "  if (mY.OverscrollBehaviorAllowsHandoff()) {"
            ],
            [
                1951,
                0,
                "    result += ScrollDirection::eVertical;"
            ],
            [
                1952,
                0,
                "  }"
            ],
            [
                1953,
                0,
                "  return result;"
            ],
            [
                1954,
                0,
                "}"
            ],
            [
                1955,
                0,
                ""
            ],
            [
                1956,
                1935,
                "bool"
            ],
            [
                1957,
                1936,
                "AsyncPanZoomController::CanScrollWithWheel(const ParentLayerPoint& aDelta) const"
            ],
            [
                1958,
                1937,
                "{"
            ],
            [
                1959,
                1938,
                "  RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                1960,
                1939,
                "  if (mX.CanScroll(aDelta.x)) {"
            ],
            [
                1961,
                1940,
                "    return true;"
            ],
            [
                1962,
                1941,
                "  }"
            ],
            [
                1963,
                1942,
                "  if (mY.CanScroll(aDelta.y) && mScrollMetadata.AllowVerticalScrollWithWheel()) {"
            ],
            [
                2015,
                1994,
                "    case ScrollWheelInput::SCROLLDELTA_PIXEL: {"
            ],
            [
                2016,
                1995,
                "      return ScrollInputMethod::ApzWheelPixel;"
            ],
            [
                2017,
                1996,
                "    }"
            ],
            [
                2018,
                1997,
                "  }"
            ],
            [
                2019,
                1998,
                "  MOZ_ASSERT_UNREACHABLE(\"Invalid value\");"
            ],
            [
                2020,
                1999,
                "  return ScrollInputMethod::ApzWheelLine;"
            ],
            [
                2021,
                2000,
                "}"
            ],
            [
                2022,
                2001,
                ""
            ],
            [
                2023,
                0,
                "static void"
            ],
            [
                2024,
                0,
                "AdjustDeltaForAllowedScrollDirections("
            ],
            [
                2025,
                0,
                "    ParentLayerPoint& aDelta,"
            ],
            [
                2026,
                0,
                "    const ScrollDirections& aAllowedScrollDirections)"
            ],
            [
                2027,
                0,
                "{"
            ],
            [
                2028,
                0,
                "  if (!aAllowedScrollDirections.contains(ScrollDirection::eHorizontal)) {"
            ],
            [
                2029,
                0,
                "    aDelta.x = 0;"
            ],
            [
                2030,
                0,
                "  }"
            ],
            [
                2031,
                0,
                "  if (!aAllowedScrollDirections.contains(ScrollDirection::eVertical)) {"
            ],
            [
                2032,
                0,
                "    aDelta.y = 0;"
            ],
            [
                2033,
                0,
                "  }"
            ],
            [
                2034,
                0,
                "}"
            ],
            [
                2035,
                0,
                ""
            ],
            [
                2036,
                2002,
                "nsEventStatus AsyncPanZoomController::OnScrollWheel(const ScrollWheelInput& aEvent)"
            ],
            [
                2037,
                2003,
                "{"
            ],
            [
                2038,
                2004,
                "  ParentLayerPoint delta = GetScrollWheelDelta(aEvent);"
            ],
            [
                2039,
                2005,
                "  APZC_LOG(\"%p got a scroll-wheel with delta %s\\n\", this, Stringify(delta).c_str());"
            ],
            [
                2040,
                2006,
                ""
            ],
            [
                2041,
                2007,
                "  if ((delta.x || delta.y) && !CanScrollWithWheel(delta)) {"
            ],
            [
                2042,
                2008,
                "    // We can't scroll this apz anymore, so we simply drop the event."
            ],
            [
                2043,
                2009,
                "    if (mInputQueue->GetActiveWheelTransaction() &&"
            ],
            [
                2046,
                2012,
                "        controller->NotifyMozMouseScrollEvent("
            ],
            [
                2047,
                2013,
                "          mFrameMetrics.GetScrollId(),"
            ],
            [
                2048,
                2014,
                "          NS_LITERAL_STRING(\"MozMouseScrollFailed\"));"
            ],
            [
                2049,
                2015,
                "      }"
            ],
            [
                2050,
                2016,
                "    }"
            ],
            [
                2051,
                2017,
                "    return nsEventStatus_eConsumeNoDefault;"
            ],
            [
                2052,
                2018,
                "  }"
            ],
            [
                2053,
                2019,
                ""
            ],
            [
                2054,
                0,
                "  MOZ_ASSERT(mInputQueue->GetCurrentWheelBlock());"
            ],
            [
                2055,
                0,
                "  AdjustDeltaForAllowedScrollDirections(delta,"
            ],
            [
                2056,
                0,
                "      mInputQueue->GetCurrentWheelBlock()->GetAllowedScrollDirections());"
            ],
            [
                2057,
                0,
                ""
            ],
            [
                2058,
                2020,
                "  if (delta.x == 0 && delta.y == 0) {"
            ],
            [
                2059,
                2021,
                "    // Avoid spurious state changes and unnecessary work"
            ],
            [
                2060,
                2022,
                "    return nsEventStatus_eIgnore;"
            ],
            [
                2061,
                2023,
                "  }"
            ],
            [
                2062,
                2024,
                ""
            ],
            [
                2063,
                2025,
                "  mozilla::Telemetry::Accumulate(mozilla::Telemetry::SCROLL_INPUT_METHODS,"
            ],
            [
                2064,
                2026,
                "      (uint32_t) ScrollInputMethodForWheelDeltaType(aEvent.mDeltaType));"
            ],
            [
                2065,
                2027,
                ""
            ],
            [
                2073,
                2035,
                "      CSSPoint startPosition = mFrameMetrics.GetScrollOffset();"
            ],
            [
                2074,
                2036,
                "      MaybeAdjustDeltaForScrollSnapping(aEvent, delta, startPosition);"
            ],
            [
                2075,
                2037,
                ""
            ],
            [
                2076,
                2038,
                "      ScreenPoint distance = ToScreenCoordinates("
            ],
            [
                2077,
                2039,
                "        ParentLayerPoint(fabs(delta.x), fabs(delta.y)), aEvent.mLocalOrigin);"
            ],
            [
                2078,
                2040,
                ""
            ],
            [
                2079,
                2041,
                "      CancelAnimation();"
            ],
            [
                2080,
                2042,
                ""
            ],
            [
                0,
                2043,
                "      MOZ_ASSERT(mInputQueue->GetCurrentWheelBlock());"
            ],
            [
                2081,
                2044,
                "      OverscrollHandoffState handoffState("
            ],
            [
                2082,
                2045,
                "          *mInputQueue->GetCurrentWheelBlock()->GetOverscrollHandoffChain(),"
            ],
            [
                2083,
                2046,
                "          distance,"
            ],
            [
                2084,
                2047,
                "          ScrollSource::Wheel);"
            ],
            [
                2085,
                2048,
                "      ParentLayerPoint startPoint = aEvent.mLocalOrigin;"
            ],
            [
                2086,
                2049,
                "      ParentLayerPoint endPoint = aEvent.mLocalOrigin - delta;"
            ],
            [
                2087,
                2050,
                "      CallDispatchScroll(startPoint, endPoint, handoffState);"
            ],
            [
                2088,
                2051,
                ""
            ],
            [
                2249,
                2212,
                "  // Note that there is a multiplier that applies onto the \"physical\" pan"
            ],
            [
                2250,
                2213,
                "  // displacement (how much the user's fingers moved) that produces the \"logical\""
            ],
            [
                2251,
                2214,
                "  // pan displacement (how much the page should move). For some of the code"
            ],
            [
                2252,
                2215,
                "  // below it makes more sense to use the physical displacement rather than"
            ],
            [
                2253,
                2216,
                "  // the logical displacement, and vice-versa."
            ],
            [
                2254,
                2217,
                "  ScreenPoint physicalPanDisplacement = aEvent.mPanDisplacement;"
            ],
            [
                2255,
                2218,
                "  ParentLayerPoint logicalPanDisplacement = aEvent.UserMultipliedLocalPanDisplacement();"
            ],
            [
                2256,
                2219,
                ""
            ],
            [
                2257,
                0,
                "  MOZ_ASSERT(GetCurrentPanGestureBlock());"
            ],
            [
                2258,
                0,
                "  AdjustDeltaForAllowedScrollDirections(logicalPanDisplacement,"
            ],
            [
                2259,
                0,
                "      GetCurrentPanGestureBlock()->GetAllowedScrollDirections());"
            ],
            [
                2260,
                0,
                ""
            ],
            [
                2261,
                2220,
                "  // We need to update the axis velocity in order to get a useful display port"
            ],
            [
                2262,
                2221,
                "  // size and position. We need to do so even if this is a momentum pan (i.e."
            ],
            [
                2263,
                2222,
                "  // aFingersOnTouchpad == false); in that case the \"with touch\" part is not"
            ],
            [
                2264,
                2223,
                "  // really appropriate, so we may want to rethink this at some point."
            ],
            [
                2265,
                2224,
                "  mX.UpdateWithTouchAtDevicePoint(aEvent.mLocalPanStartPoint.x, logicalPanDisplacement.x, aEvent.mTime);"
            ],
            [
                2266,
                2225,
                "  mY.UpdateWithTouchAtDevicePoint(aEvent.mLocalPanStartPoint.y, logicalPanDisplacement.y, aEvent.mTime);"
            ],
            [
                2267,
                2226,
                ""
            ],
            [
                2268,
                2227,
                "  HandlePanningUpdate(physicalPanDisplacement);"
            ],
            [
                2269,
                2228,
                ""
            ],
            [
                2270,
                2229,
                "  mozilla::Telemetry::Accumulate(mozilla::Telemetry::SCROLL_INPUT_METHODS,"
            ],
            [
                2271,
                2230,
                "      (uint32_t) ScrollInputMethod::ApzPanGesture);"
            ],
            [
                2272,
                2231,
                ""
            ],
            [
                2273,
                2232,
                "  ScreenPoint panDistance(fabs(physicalPanDisplacement.x), fabs(physicalPanDisplacement.y));"
            ],
            [
                0,
                2233,
                "  MOZ_ASSERT(GetCurrentPanGestureBlock());"
            ],
            [
                2274,
                2234,
                "  OverscrollHandoffState handoffState("
            ],
            [
                2275,
                2235,
                "      *GetCurrentPanGestureBlock()->GetOverscrollHandoffChain(),"
            ],
            [
                2276,
                2236,
                "      panDistance,"
            ],
            [
                2277,
                2237,
                "      ScrollSource::Wheel);"
            ],
            [
                2278,
                2238,
                ""
            ],
            [
                2279,
                2239,
                "  // Create fake \"touch\" positions that will result in the desired scroll motion."
            ],
            [
                2280,
                2240,
                "  // Note that the pan displacement describes the change in scroll position:"
            ],
            [
                2281,
                2241,
                "  // positive displacement values mean that the scroll position increases."
            ],
            [
                2804,
                2764,
                "  RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                2805,
                2765,
                "  // Do not go into overscroll in a direction in which we have no room to"
            ],
            [
                2806,
                2766,
                "  // scroll to begin with."
            ],
            [
                2807,
                2767,
                "  bool xCanScroll = mX.CanScroll();"
            ],
            [
                2808,
                2768,
                "  bool yCanScroll = mY.CanScroll();"
            ],
            [
                2809,
                2769,
                "  bool xConsumed = FuzzyEqualsAdditive(aOverscroll.x, 0.0f, COORDINATE_EPSILON);"
            ],
            [
                2810,
                2770,
                "  bool yConsumed = FuzzyEqualsAdditive(aOverscroll.y, 0.0f, COORDINATE_EPSILON);"
            ],
            [
                2811,
                2771,
                ""
            ],
            [
                2812,
                0,
                "  bool shouldOverscrollX = xCanScroll && !xConsumed && mX.OverscrollBehaviorAllowsOverscrollEffect();"
            ],
            [
                2813,
                0,
                "  bool shouldOverscrollY = yCanScroll && !yConsumed && mY.OverscrollBehaviorAllowsOverscrollEffect();"
            ],
            [
                0,
                2772,
                "  bool shouldOverscrollX = xCanScroll && !xConsumed;"
            ],
            [
                0,
                2773,
                "  bool shouldOverscrollY = yCanScroll && !yConsumed;"
            ],
            [
                2814,
                2774,
                ""
            ],
            [
                2815,
                2775,
                "  mOverscrollEffect->ConsumeOverscroll(aOverscroll, shouldOverscrollX, shouldOverscrollY);"
            ],
            [
                2816,
                2776,
                "}"
            ],
            [
                2817,
                2777,
                ""
            ],
            [
                2818,
                2778,
                "RefPtr<const OverscrollHandoffChain> AsyncPanZoomController::BuildOverscrollHandoffChain() {"
            ],
            [
                2819,
                2779,
                "  if (APZCTreeManager* treeManagerLocal = GetApzcTreeManager()) {"
            ],
            [
                2820,
                2780,
                "    return treeManagerLocal->BuildOverscrollHandoffChain(this);"
            ],
            [
                2821,
                2781,
                "  }"
            ],
            [
                2822,
                2782,
                ""
            ],
            [
                2823,
                2783,
                "  // This APZC IsDestroyed(). To avoid callers having to special-case this"
            ],
            [
                2824,
                2784,
                "  // scenario, just build a 1-element chain containing ourselves."
            ],
            [
                2825,
                2785,
                "  OverscrollHandoffChain* result = new OverscrollHandoffChain;"
            ],
            [
                2826,
                2786,
                "  result->Add(this);"
            ],
            [
                2827,
                2787,
                "  return result;"
            ],
            [
                2828,
                2788,
                "}"
            ],
            [
                2829,
                2789,
                ""
            ],
            [
                2830,
                0,
                "ParentLayerPoint AsyncPanZoomController::AttemptFling(const FlingHandoffState& aHandoffState) {"
            ],
            [
                0,
                2790,
                "void AsyncPanZoomController::AcceptFling(FlingHandoffState& aHandoffState) {"
            ],
            [
                2831,
                2791,
                "  RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                2832,
                2792,
                ""
            ],
            [
                2833,
                0,
                "  if (!IsPannable()) {"
            ],
            [
                2834,
                0,
                "    return aHandoffState.mVelocity;"
            ],
            [
                2835,
                0,
                "  }"
            ],
            [
                2836,
                0,
                ""
            ],
            [
                2837,
                2793,
                "  // We may have a pre-existing velocity for whatever reason (for example,"
            ],
            [
                2838,
                2794,
                "  // a previously handed off fling). We don't want to clobber that."
            ],
            [
                2839,
                2795,
                "  APZC_LOG(\"%p accepting fling with velocity %s\\n\", this,"
            ],
            [
                2840,
                2796,
                "           Stringify(aHandoffState.mVelocity).c_str());"
            ],
            [
                2841,
                0,
                "  ParentLayerPoint residualVelocity = aHandoffState.mVelocity;"
            ],
            [
                2842,
                2797,
                "  if (mX.CanScroll()) {"
            ],
            [
                2843,
                2798,
                "    mX.SetVelocity(mX.GetVelocity() + aHandoffState.mVelocity.x);"
            ],
            [
                2844,
                0,
                "    residualVelocity.x = 0;"
            ],
            [
                0,
                2799,
                "    aHandoffState.mVelocity.x = 0;"
            ],
            [
                2845,
                2800,
                "  }"
            ],
            [
                2846,
                2801,
                "  if (mY.CanScroll()) {"
            ],
            [
                2847,
                2802,
                "    mY.SetVelocity(mY.GetVelocity() + aHandoffState.mVelocity.y);"
            ],
            [
                2848,
                0,
                "    residualVelocity.y = 0;"
            ],
            [
                0,
                2803,
                "    aHandoffState.mVelocity.y = 0;"
            ],
            [
                2849,
                2804,
                "  }"
            ],
            [
                2850,
                2805,
                ""
            ],
            [
                2851,
                2806,
                "  // If there's a scroll snap point near the predicted fling destination,"
            ],
            [
                2852,
                2807,
                "  // scroll there using a smooth scroll animation. Otherwise, start a"
            ],
            [
                2853,
                2808,
                "  // fling animation."
            ],
            [
                2854,
                2809,
                "  ScrollSnapToDestination();"
            ],
            [
                2855,
                2810,
                "  if (mState != SMOOTH_SCROLL) {"
            ],
            [
                2856,
                2811,
                "    SetState(FLING);"
            ],
            [
                2857,
                2812,
                "    FlingAnimation *fling = new FlingAnimation(*this,"
            ],
            [
                2858,
                2813,
                "        GetPlatformSpecificState(),"
            ],
            [
                2859,
                2814,
                "        aHandoffState.mChain,"
            ],
            [
                2860,
                2815,
                "        aHandoffState.mIsHandoff,"
            ],
            [
                2861,
                2816,
                "        aHandoffState.mScrolledApzc);"
            ],
            [
                2862,
                2817,
                "    StartAnimation(fling);"
            ],
            [
                2863,
                2818,
                "  }"
            ],
            [
                2864,
                0,
                ""
            ],
            [
                2865,
                0,
                "  return residualVelocity;"
            ],
            [
                2866,
                2819,
                "}"
            ],
            [
                2867,
                2820,
                ""
            ],
            [
                2868,
                0,
                "ParentLayerPoint AsyncPanZoomController::AdjustHandoffVelocityForOverscrollBehavior(ParentLayerPoint& aHandoffVelocity) const"
            ],
            [
                2869,
                0,
                "{"
            ],
            [
                2870,
                0,
                "  RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                2871,
                0,
                "  ParentLayerPoint residualVelocity;"
            ],
            [
                2872,
                0,
                "  if (!mX.OverscrollBehaviorAllowsHandoff()) {"
            ],
            [
                2873,
                0,
                "    residualVelocity.x = aHandoffVelocity.x;"
            ],
            [
                2874,
                0,
                "    aHandoffVelocity.x = 0;"
            ],
            [
                0,
                2821,
                "bool AsyncPanZoomController::AttemptFling(FlingHandoffState& aHandoffState) {"
            ],
            [
                0,
                2822,
                "  // If we are pannable, take over the fling ourselves."
            ],
            [
                0,
                2823,
                "  if (IsPannable()) {"
            ],
            [
                0,
                2824,
                "    AcceptFling(aHandoffState);"
            ],
            [
                0,
                2825,
                "    return true;"
            ],
            [
                2875,
                2826,
                "  }"
            ],
            [
                2876,
                0,
                "  if (!mY.OverscrollBehaviorAllowsHandoff()) {"
            ],
            [
                2877,
                0,
                "    residualVelocity.y = aHandoffVelocity.y;"
            ],
            [
                2878,
                0,
                "    aHandoffVelocity.y = 0;"
            ],
            [
                2879,
                0,
                "  }"
            ],
            [
                2880,
                0,
                "  return residualVelocity;"
            ],
            [
                2881,
                0,
                "}"
            ],
            [
                2882,
                0,
                ""
            ],
            [
                2883,
                0,
                "bool AsyncPanZoomController::OverscrollBehaviorAllowsSwipe() const"
            ],
            [
                2884,
                0,
                "{"
            ],
            [
                2885,
                0,
                "  RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                2886,
                0,
                "  // Swipe navigation is a \"non-local\" overscroll behavior like handoff."
            ],
            [
                2887,
                0,
                "  return mX.OverscrollBehaviorAllowsHandoff();"
            ],
            [
                0,
                2827,
                ""
            ],
            [
                0,
                2828,
                "  return false;"
            ],
            [
                2888,
                2829,
                "}"
            ],
            [
                2889,
                2830,
                ""
            ],
            [
                2890,
                2831,
                "void AsyncPanZoomController::HandleFlingOverscroll(const ParentLayerPoint& aVelocity,"
            ],
            [
                2891,
                2832,
                "                                                   const RefPtr<const OverscrollHandoffChain>& aOverscrollHandoffChain,"
            ],
            [
                2892,
                2833,
                "                                                   const RefPtr<const AsyncPanZoomController>& aScrolledApzc) {"
            ],
            [
                2893,
                2834,
                "  APZCTreeManager* treeManagerLocal = GetApzcTreeManager();"
            ],
            [
                2894,
                2835,
                "  if (treeManagerLocal) {"
            ],
            [
                2895,
                0,
                "    const FlingHandoffState handoffState{aVelocity,"
            ],
            [
                2896,
                0,
                "                                         aOverscrollHandoffChain,"
            ],
            [
                2897,
                0,
                "                                         true /* handoff */,"
            ],
            [
                2898,
                0,
                "                                         aScrolledApzc};"
            ],
            [
                2899,
                0,
                "    ParentLayerPoint residualVelocity = treeManagerLocal->DispatchFling(this, handoffState);"
            ],
            [
                2900,
                0,
                "    if (!IsZero(residualVelocity) && IsPannable() && gfxPrefs::APZOverscrollEnabled()) {"
            ],
            [
                2901,
                0,
                "      // Obey overscroll-behavior."
            ],
            [
                2902,
                0,
                "      RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                2903,
                0,
                "      if (!mX.OverscrollBehaviorAllowsOverscrollEffect()) {"
            ],
            [
                2904,
                0,
                "        residualVelocity.x = 0;"
            ],
            [
                2905,
                0,
                "      }"
            ],
            [
                2906,
                0,
                "      if (!mY.OverscrollBehaviorAllowsOverscrollEffect()) {"
            ],
            [
                2907,
                0,
                "        residualVelocity.y = 0;"
            ],
            [
                2908,
                0,
                "      }"
            ],
            [
                2909,
                0,
                ""
            ],
            [
                2910,
                0,
                "      if (!IsZero(residualVelocity)) {"
            ],
            [
                2911,
                0,
                "        mOverscrollEffect->HandleFlingOverscroll(residualVelocity);"
            ],
            [
                2912,
                0,
                "      }"
            ],
            [
                0,
                2836,
                "    FlingHandoffState handoffState{aVelocity,"
            ],
            [
                0,
                2837,
                "                                   aOverscrollHandoffChain,"
            ],
            [
                0,
                2838,
                "                                   true /* handoff */,"
            ],
            [
                0,
                2839,
                "                                   aScrolledApzc};"
            ],
            [
                0,
                2840,
                "    treeManagerLocal->DispatchFling(this, handoffState);"
            ],
            [
                0,
                2841,
                "    if (!IsZero(handoffState.mVelocity) && IsPannable() && gfxPrefs::APZOverscrollEnabled()) {"
            ],
            [
                0,
                2842,
                "      mOverscrollEffect->HandleFlingOverscroll(handoffState.mVelocity);"
            ],
            [
                2913,
                2843,
                "    }"
            ],
            [
                2914,
                2844,
                "  }"
            ],
            [
                2915,
                2845,
                "}"
            ],
            [
                2916,
                2846,
                ""
            ],
            [
                2917,
                2847,
                "void AsyncPanZoomController::HandleSmoothScrollOverscroll(const ParentLayerPoint& aVelocity) {"
            ],
            [
                2918,
                2848,
                "  // We must call BuildOverscrollHandoffChain from this deferred callback"
            ],
            [
                2919,
                2849,
                "  // function in order to avoid a deadlock when acquiring the tree lock."
            ],
            [
                2920,
                2850,
                "  HandleFlingOverscroll(aVelocity, BuildOverscrollHandoffChain(), nullptr);"
            ],
            [
                2958,
                2888,
                "                                                OverscrollHandoffState& aOverscrollHandoffState) {"
            ],
            [
                2959,
                2889,
                "  // Make a local copy of the tree manager pointer and check if it's not"
            ],
            [
                2960,
                2890,
                "  // null before calling DispatchScroll(). This is necessary because"
            ],
            [
                2961,
                2891,
                "  // Destroy(), which nulls out mTreeManager, could be called concurrently."
            ],
            [
                2962,
                2892,
                "  APZCTreeManager* treeManagerLocal = GetApzcTreeManager();"
            ],
            [
                2963,
                2893,
                "  if (!treeManagerLocal) {"
            ],
            [
                2964,
                2894,
                "    return;"
            ],
            [
                2965,
                2895,
                "  }"
            ],
            [
                2966,
                0,
                ""
            ],
            [
                2967,
                0,
                "  // Obey overscroll-behavior."
            ],
            [
                2968,
                0,
                "  ParentLayerPoint endPoint = aEndPoint;"
            ],
            [
                2969,
                0,
                "  if (aOverscrollHandoffState.mChainIndex > 0) {"
            ],
            [
                2970,
                0,
                "    RecursiveMutexAutoLock lock(mRecursiveMutex);"
            ],
            [
                2971,
                0,
                "    if (!mX.OverscrollBehaviorAllowsHandoff()) {"
            ],
            [
                2972,
                0,
                "      endPoint.x = aStartPoint.x;"
            ],
            [
                2973,
                0,
                "    }"
            ],
            [
                2974,
                0,
                "    if (!mY.OverscrollBehaviorAllowsHandoff()) {"
            ],
            [
                2975,
                0,
                "      endPoint.y = aStartPoint.y;"
            ],
            [
                2976,
                0,
                "    }"
            ],
            [
                2977,
                0,
                "    if (aStartPoint == endPoint) {"
            ],
            [
                2978,
                0,
                "      // Handoff not allowed in either direction - don't even bother."
            ],
            [
                2979,
                0,
                "      return;"
            ],
            [
                2980,
                0,
                "    }"
            ],
            [
                2981,
                0,
                "  }"
            ],
            [
                2982,
                0,
                ""
            ],
            [
                2983,
                2896,
                "  treeManagerLocal->DispatchScroll(this,"
            ],
            [
                2984,
                0,
                "                                   aStartPoint, endPoint,"
            ],
            [
                0,
                2897,
                "                                   aStartPoint, aEndPoint,"
            ],
            [
                2985,
                2898,
                "                                   aOverscrollHandoffState);"
            ],
            [
                2986,
                2899,
                "}"
            ],
            [
                2987,
                2900,
                ""
            ],
            [
                2988,
                2901,
                "void AsyncPanZoomController::TrackTouch(const MultiTouchInput& aEvent) {"
            ],
            [
                2989,
                2902,
                "  ParentLayerPoint prevTouchPoint(mX.GetPos(), mY.GetPos());"
            ],
            [
                2990,
                2903,
                "  ParentLayerPoint touchPoint = GetFirstTouchPoint(aEvent);"
            ],
            [
                2991,
                2904,
                ""
            ],
            [
                2992,
                2905,
                "  ScreenPoint panDistance = ToScreenCoordinates("
            ],
            [
                3941,
                3854,
                "    // The scroll clip can differ between layers associated a given scroll frame,"
            ],
            [
                3942,
                3855,
                "    // so APZC (which keeps a single copy of ScrollMetadata per scroll frame)"
            ],
            [
                3943,
                3856,
                "    // has no business using it."
            ],
            [
                3944,
                3857,
                "    mScrollMetadata.SetScrollClip(Nothing());"
            ],
            [
                3945,
                3858,
                "    mScrollMetadata.SetIsLayersIdRoot(aScrollMetadata.IsLayersIdRoot());"
            ],
            [
                3946,
                3859,
                "    mScrollMetadata.SetUsesContainerScrolling(aScrollMetadata.UsesContainerScrolling());"
            ],
            [
                3947,
                3860,
                "    mFrameMetrics.SetIsScrollInfoLayer(aLayerMetrics.IsScrollInfoLayer());"
            ],
            [
                3948,
                3861,
                "    mScrollMetadata.SetForceDisableApz(aScrollMetadata.IsApzForceDisabled());"
            ],
            [
                3949,
                0,
                "    mScrollMetadata.SetOverscrollBehavior(aScrollMetadata.GetOverscrollBehavior());"
            ],
            [
                3950,
                3862,
                ""
            ],
            [
                3951,
                3863,
                "    if (scrollOffsetUpdated) {"
            ],
            [
                3952,
                3864,
                "      APZC_LOG(\"%p updating scroll offset from %s to %s\\n\", this,"
            ],
            [
                3953,
                3865,
                "        ToString(mFrameMetrics.GetScrollOffset()).c_str(),"
            ],
            [
                3954,
                3866,
                "        ToString(aLayerMetrics.GetScrollOffset()).c_str());"
            ],
            [
                3955,
                3867,
                ""
            ],
            [
                3956,
                3868,
                "      // Send an acknowledgement with the new scroll generation so that any"
            ],
            [
                3957,
                3869,
                "      // repaint requests later in this function go through."
            ],
            [
                4011,
                3923,
                "  UpdateSharedCompositorFrameMetrics();"
            ],
            [
                4012,
                3924,
                "}"
            ],
            [
                4013,
                3925,
                ""
            ],
            [
                4014,
                3926,
                "const FrameMetrics& AsyncPanZoomController::GetFrameMetrics() const {"
            ],
            [
                4015,
                3927,
                "  mRecursiveMutex.AssertCurrentThreadIn();"
            ],
            [
                4016,
                3928,
                "  return mFrameMetrics;"
            ],
            [
                4017,
                3929,
                "}"
            ],
            [
                4018,
                3930,
                ""
            ],
            [
                4019,
                0,
                "const ScrollMetadata& AsyncPanZoomController::GetScrollMetadata() const {"
            ],
            [
                4020,
                0,
                "  mRecursiveMutex.AssertCurrentThreadIn();"
            ],
            [
                4021,
                0,
                "  return mScrollMetadata;"
            ],
            [
                4022,
                0,
                "}"
            ],
            [
                4023,
                0,
                ""
            ],
            [
                4024,
                3931,
                "APZCTreeManager* AsyncPanZoomController::GetApzcTreeManager() const {"
            ],
            [
                4025,
                3932,
                "  mRecursiveMutex.AssertNotCurrentThreadIn();"
            ],
            [
                4026,
                3933,
                "  return mTreeManager;"
            ],
            [
                4027,
                3934,
                "}"
            ],
            [
                4028,
                3935,
                ""
            ],
            [
                4029,
                3936,
                "void AsyncPanZoomController::ZoomToRect(CSSRect aRect, const uint32_t aFlags) {"
            ],
            [
                4030,
                3937,
                "  if (!aRect.IsFinite()) {"
            ],
            [
                4031,
                3938,
                "    NS_WARNING(\"ZoomToRect got called with a non-finite rect; ignoring...\");"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/AsyncPanZoomController.h",
        "binary": false,
        "count_add": 9,
        "count_del": 20,
        "lines": [
            [
                415,
                415,
                "   */"
            ],
            [
                416,
                416,
                "  ParentLayerPoint ToParentLayerCoordinates(const ScreenPoint& aVector,"
            ],
            [
                417,
                417,
                "                                            const ScreenPoint& aAnchor) const;"
            ],
            [
                418,
                418,
                ""
            ],
            [
                419,
                419,
                "  // Return whether or not a wheel event will be able to scroll in either"
            ],
            [
                420,
                420,
                "  // direction."
            ],
            [
                421,
                421,
                "  bool CanScroll(const InputData& aEvent) const;"
            ],
            [
                422,
                422,
                ""
            ],
            [
                423,
                0,
                "  // Return the directions in which this APZC allows handoff (as governed by"
            ],
            [
                424,
                0,
                "  // overscroll-behavior)."
            ],
            [
                425,
                0,
                "  ScrollDirections GetAllowedHandoffDirections() const;"
            ],
            [
                426,
                0,
                ""
            ],
            [
                427,
                423,
                "  // Return whether or not a scroll delta will be able to scroll in either"
            ],
            [
                428,
                424,
                "  // direction."
            ],
            [
                429,
                425,
                "  bool CanScrollWithWheel(const ParentLayerPoint& aDelta) const;"
            ],
            [
                430,
                426,
                ""
            ],
            [
                431,
                427,
                "  // Return whether or not there is room to scroll this APZC"
            ],
            [
                432,
                428,
                "  // in the given direction."
            ],
            [
                433,
                429,
                "  bool CanScroll(ScrollDirection aDirection) const;"
            ],
            [
                434,
                430,
                ""
            ],
            [
                437,
                433,
                "   * to CSS coordinates relative to the beginning of the scroll track."
            ],
            [
                438,
                434,
                "   * Only the component in the direction of scrolling is returned."
            ],
            [
                439,
                435,
                "   */"
            ],
            [
                440,
                436,
                "  CSSCoord ConvertScrollbarPoint(const ParentLayerPoint& aScrollbarPoint,"
            ],
            [
                441,
                437,
                "                                 const ScrollThumbData& aThumbData) const;"
            ],
            [
                442,
                438,
                ""
            ],
            [
                443,
                439,
                "  void NotifyMozMouseScrollEvent(const nsString& aString) const;"
            ],
            [
                444,
                440,
                ""
            ],
            [
                445,
                0,
                "  bool OverscrollBehaviorAllowsSwipe() const;"
            ],
            [
                446,
                0,
                ""
            ],
            [
                447,
                441,
                "protected:"
            ],
            [
                448,
                442,
                "  // Protected destructor, to discourage deletion outside of Release():"
            ],
            [
                449,
                443,
                "  virtual ~AsyncPanZoomController();"
            ],
            [
                450,
                444,
                ""
            ],
            [
                451,
                445,
                "  // Returns the cached current frame time."
            ],
            [
                452,
                446,
                "  TimeStamp GetFrameTime() const;"
            ],
            [
                453,
                447,
                ""
            ],
            [
                454,
                448,
                "  /**"
            ],
            [
                670,
                664,
                ""
            ],
            [
                671,
                665,
                "  /**"
            ],
            [
                672,
                666,
                "   * Gets the current frame metrics. This is *not* the Gecko copy stored in the"
            ],
            [
                673,
                667,
                "   * layers code."
            ],
            [
                674,
                668,
                "   */"
            ],
            [
                675,
                669,
                "  const FrameMetrics& GetFrameMetrics() const;"
            ],
            [
                676,
                670,
                ""
            ],
            [
                677,
                671,
                "  /**"
            ],
            [
                678,
                0,
                "   * Gets the current scroll metadata. This is *not* the Gecko copy stored in"
            ],
            [
                679,
                0,
                "   * the layers code/"
            ],
            [
                680,
                0,
                "   */"
            ],
            [
                681,
                0,
                "  const ScrollMetadata& GetScrollMetadata() const;"
            ],
            [
                682,
                0,
                ""
            ],
            [
                683,
                0,
                "  /**"
            ],
            [
                684,
                672,
                "   * Gets the pointer to the apzc tree manager. All the access to tree manager"
            ],
            [
                685,
                673,
                "   * should be made via this method and not via private variable since this method"
            ],
            [
                686,
                674,
                "   * ensures that no lock is set."
            ],
            [
                687,
                675,
                "   */"
            ],
            [
                688,
                676,
                "  APZCTreeManager* GetApzcTreeManager() const;"
            ],
            [
                689,
                677,
                ""
            ],
            [
                690,
                678,
                "  /**"
            ],
            [
                691,
                679,
                "   * Convert ScreenPoint relative to the screen to LayoutDevicePoint relative"
            ],
            [
                1003,
                991,
                "  /* ==================================================================="
            ],
            [
                1004,
                992,
                "   * The functions and members in this section are used to manage"
            ],
            [
                1005,
                993,
                "   * fling animations, smooth scroll animations, and overscroll"
            ],
            [
                1006,
                994,
                "   * during a fling or smooth scroll."
            ],
            [
                1007,
                995,
                "   */"
            ],
            [
                1008,
                996,
                "public:"
            ],
            [
                1009,
                997,
                "  /**"
            ],
            [
                1010,
                998,
                "   * Attempt a fling with the velocity specified in |aHandoffState|."
            ],
            [
                0,
                999,
                "   * If we are not pannable, the fling is handed off to the next APZC in"
            ],
            [
                0,
                1000,
                "   * the handoff chain via mTreeManager->DispatchFling()."
            ],
            [
                0,
                1001,
                "   * Returns true iff. the entire velocity of the fling was consumed by"
            ],
            [
                0,
                1002,
                "   * this APZC. |aHandoffState.mVelocity| is modified to contain any"
            ],
            [
                0,
                1003,
                "   * unused, residual velocity."
            ],
            [
                1011,
                1004,
                "   * |aHandoffState.mIsHandoff| should be true iff. the fling was handed off"
            ],
            [
                1012,
                1005,
                "   * from a previous APZC, and determines whether acceleration is applied"
            ],
            [
                1013,
                1006,
                "   * to the fling."
            ],
            [
                1014,
                0,
                "   * We only accept the fling in the direction(s) in which we are pannable."
            ],
            [
                1015,
                0,
                "   * Returns the \"residual velocity\", i.e. the portion of"
            ],
            [
                1016,
                0,
                "   * |aHandoffState.mVelocity| that this APZC did not consume."
            ],
            [
                1017,
                1007,
                "   */"
            ],
            [
                1018,
                0,
                "  ParentLayerPoint AttemptFling(const FlingHandoffState& aHandoffState);"
            ],
            [
                1019,
                0,
                ""
            ],
            [
                1020,
                0,
                "  ParentLayerPoint AdjustHandoffVelocityForOverscrollBehavior(ParentLayerPoint& aHandoffVelocity) const;"
            ],
            [
                0,
                1008,
                "  bool AttemptFling(FlingHandoffState& aHandoffState);"
            ],
            [
                1021,
                1009,
                ""
            ],
            [
                1022,
                1010,
                "private:"
            ],
            [
                1023,
                1011,
                "  friend class AndroidFlingAnimation;"
            ],
            [
                1024,
                1012,
                "  friend class AutoscrollAnimation;"
            ],
            [
                1025,
                1013,
                "  friend class GenericFlingAnimation;"
            ],
            [
                1026,
                1014,
                "  friend class OverscrollAnimation;"
            ],
            [
                1027,
                1015,
                "  friend class SmoothScrollAnimation;"
            ],
            [
                1028,
                1016,
                "  friend class GenericScrollAnimation;"
            ],
            [
                1045,
                1033,
                "  // later in the handoff chain, or if there are no takers, continuing the"
            ],
            [
                1046,
                1034,
                "  // fling and entering an overscrolled state."
            ],
            [
                1047,
                1035,
                "  void HandleFlingOverscroll(const ParentLayerPoint& aVelocity,"
            ],
            [
                1048,
                1036,
                "                             const RefPtr<const OverscrollHandoffChain>& aOverscrollHandoffChain,"
            ],
            [
                1049,
                1037,
                "                             const RefPtr<const AsyncPanZoomController>& aScrolledApzc);"
            ],
            [
                1050,
                1038,
                ""
            ],
            [
                1051,
                1039,
                "  void HandleSmoothScrollOverscroll(const ParentLayerPoint& aVelocity);"
            ],
            [
                1052,
                1040,
                ""
            ],
            [
                0,
                1041,
                "  // Helper function used by AttemptFling()."
            ],
            [
                0,
                1042,
                "  void AcceptFling(FlingHandoffState& aHandoffState);"
            ],
            [
                0,
                1043,
                ""
            ],
            [
                1053,
                1044,
                "  // Start an overscroll animation with the given initial velocity."
            ],
            [
                1054,
                1045,
                "  void StartOverscrollAnimation(const ParentLayerPoint& aVelocity);"
            ],
            [
                1055,
                1046,
                ""
            ],
            [
                1056,
                1047,
                "  void SmoothScrollTo(const CSSPoint& aDestination);"
            ],
            [
                1057,
                1048,
                ""
            ],
            [
                1058,
                1049,
                "  // Returns whether overscroll is allowed during an event."
            ],
            [
                1059,
                1050,
                "  bool AllowScrollHandoffInCurrentBlock() const;"
            ],
            [
                1060,
                1051,
                ""
            ],
            [
                1183,
                1174,
                ""
            ],
            [
                1184,
                1175,
                "  /**"
            ],
            [
                1185,
                1176,
                "   * Try to overscroll by 'aOverscroll'."
            ],
            [
                1186,
                1177,
                "   * If we are pannable on a particular axis, that component of 'aOverscroll'"
            ],
            [
                1187,
                1178,
                "   * is transferred to any existing overscroll."
            ],
            [
                1188,
                1179,
                "   */"
            ],
            [
                1189,
                1180,
                "  void OverscrollBy(ParentLayerPoint& aOverscroll);"
            ],
            [
                1190,
                1181,
                ""
            ],
            [
                1191,
                0,
                "  // Helper function for CanScroll()."
            ],
            [
                1192,
                0,
                "  ParentLayerPoint GetDeltaForEvent(const InputData& aEvent) const;"
            ],
            [
                1193,
                1182,
                ""
            ],
            [
                1194,
                1183,
                "  /* ==================================================================="
            ],
            [
                1195,
                1184,
                "   * The functions and members in this section are used to maintain the"
            ],
            [
                1196,
                1185,
                "   * area that this APZC instance is responsible for. This is used when"
            ],
            [
                1197,
                1186,
                "   * hit-testing to see which APZC instance should handle touch events."
            ],
            [
                1198,
                1187,
                "   */"
            ],
            [
                1199,
                1188,
                "public:"
            ],
            [
                1200,
                1189,
                "  void SetAncestorTransform(const Matrix4x4& aTransformToLayer) {"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/Axis.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 25,
        "lines": [
            [
                486,
                486,
                "                                          / ParentLayerToParentLayerScale(aScale);"
            ],
            [
                487,
                487,
                "  return GetRectLength(screenCompositionBounds) - GetPageLength() > COORDINATE_EPSILON;"
            ],
            [
                488,
                488,
                "}"
            ],
            [
                489,
                489,
                ""
            ],
            [
                490,
                490,
                "const FrameMetrics& Axis::GetFrameMetrics() const {"
            ],
            [
                491,
                491,
                "  return mAsyncPanZoomController->GetFrameMetrics();"
            ],
            [
                492,
                492,
                "}"
            ],
            [
                493,
                493,
                ""
            ],
            [
                494,
                0,
                "const ScrollMetadata& Axis::GetScrollMetadata() const {"
            ],
            [
                495,
                0,
                "  return mAsyncPanZoomController->GetScrollMetadata();"
            ],
            [
                496,
                0,
                "}"
            ],
            [
                497,
                0,
                ""
            ],
            [
                498,
                0,
                "bool Axis::OverscrollBehaviorAllowsHandoff() const {"
            ],
            [
                499,
                0,
                "  // Scroll handoff is a \"non-local\" overscroll behavior, so it's allowed"
            ],
            [
                500,
                0,
                "  // with \"auto\" and disallowed with \"contain\" and \"none\"."
            ],
            [
                501,
                0,
                "  return GetOverscrollBehavior() == OverscrollBehavior::Auto;"
            ],
            [
                502,
                0,
                "}"
            ],
            [
                503,
                0,
                ""
            ],
            [
                504,
                0,
                "bool Axis::OverscrollBehaviorAllowsOverscrollEffect() const {"
            ],
            [
                505,
                0,
                "  // An overscroll effect is a \"local\" overscroll behavior, so it's allowed"
            ],
            [
                506,
                0,
                "  // with \"auto\" and \"contain\" and disallowed with \"none\"."
            ],
            [
                507,
                0,
                "  return GetOverscrollBehavior() != OverscrollBehavior::None;"
            ],
            [
                508,
                0,
                "}"
            ],
            [
                509,
                494,
                ""
            ],
            [
                510,
                495,
                "AxisX::AxisX(AsyncPanZoomController* aAsyncPanZoomController)"
            ],
            [
                511,
                496,
                "  : Axis(aAsyncPanZoomController)"
            ],
            [
                512,
                497,
                "{"
            ],
            [
                513,
                498,
                ""
            ],
            [
                514,
                499,
                "}"
            ],
            [
                515,
                500,
                ""
            ],
            [
                516,
                501,
                "ParentLayerCoord AxisX::GetPointOffset(const ParentLayerPoint& aPoint) const"
            ],
            [
                538,
                523,
                "  return ScreenPoint(aCoord, 0);"
            ],
            [
                539,
                524,
                "}"
            ],
            [
                540,
                525,
                ""
            ],
            [
                541,
                526,
                "const char* AxisX::Name() const"
            ],
            [
                542,
                527,
                "{"
            ],
            [
                543,
                528,
                "  return \"X\";"
            ],
            [
                544,
                529,
                "}"
            ],
            [
                545,
                530,
                ""
            ],
            [
                546,
                0,
                "OverscrollBehavior AxisX::GetOverscrollBehavior() const"
            ],
            [
                547,
                0,
                "{"
            ],
            [
                548,
                0,
                "  return GetScrollMetadata().GetOverscrollBehavior().mBehaviorX;"
            ],
            [
                549,
                0,
                "}"
            ],
            [
                550,
                0,
                ""
            ],
            [
                551,
                531,
                "AxisY::AxisY(AsyncPanZoomController* aAsyncPanZoomController)"
            ],
            [
                552,
                532,
                "  : Axis(aAsyncPanZoomController)"
            ],
            [
                553,
                533,
                "{"
            ],
            [
                554,
                534,
                ""
            ],
            [
                555,
                535,
                "}"
            ],
            [
                556,
                536,
                ""
            ],
            [
                557,
                537,
                "ParentLayerCoord AxisY::GetPointOffset(const ParentLayerPoint& aPoint) const"
            ],
            [
                558,
                538,
                "{"
            ],
            [
                579,
                559,
                "  return ScreenPoint(0, aCoord);"
            ],
            [
                580,
                560,
                "}"
            ],
            [
                581,
                561,
                ""
            ],
            [
                582,
                562,
                "const char* AxisY::Name() const"
            ],
            [
                583,
                563,
                "{"
            ],
            [
                584,
                564,
                "  return \"Y\";"
            ],
            [
                585,
                565,
                "}"
            ],
            [
                586,
                566,
                ""
            ],
            [
                587,
                0,
                "OverscrollBehavior AxisY::GetOverscrollBehavior() const"
            ],
            [
                588,
                0,
                "{"
            ],
            [
                589,
                0,
                "  return GetScrollMetadata().GetOverscrollBehavior().mBehaviorY;"
            ],
            [
                590,
                0,
                "}"
            ],
            [
                591,
                0,
                ""
            ],
            [
                592,
                567,
                "} // namespace layers"
            ],
            [
                593,
                568,
                "} // namespace mozilla"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/Axis.h",
        "binary": false,
        "count_add": 0,
        "count_del": 10,
        "lines": [
            [
                244,
                244,
                "  ParentLayerCoord GetPageStart() const;"
            ],
            [
                245,
                245,
                "  ParentLayerCoord GetPageLength() const;"
            ],
            [
                246,
                246,
                "  ParentLayerCoord GetCompositionEnd() const;"
            ],
            [
                247,
                247,
                "  ParentLayerCoord GetPageEnd() const;"
            ],
            [
                248,
                248,
                "  ParentLayerCoord GetScrollRangeEnd() const;"
            ],
            [
                249,
                249,
                ""
            ],
            [
                250,
                250,
                "  ParentLayerCoord GetPos() const { return mPos; }"
            ],
            [
                251,
                251,
                ""
            ],
            [
                252,
                0,
                "  bool OverscrollBehaviorAllowsHandoff() const;"
            ],
            [
                253,
                0,
                "  bool OverscrollBehaviorAllowsOverscrollEffect() const;"
            ],
            [
                254,
                0,
                ""
            ],
            [
                255,
                252,
                "  virtual ParentLayerCoord GetPointOffset(const ParentLayerPoint& aPoint) const = 0;"
            ],
            [
                256,
                253,
                "  virtual ParentLayerCoord GetRectLength(const ParentLayerRect& aRect) const = 0;"
            ],
            [
                257,
                254,
                "  virtual ParentLayerCoord GetRectOffset(const ParentLayerRect& aRect) const = 0;"
            ],
            [
                258,
                255,
                "  virtual CSSToParentLayerScale GetScaleForAxis(const CSSToParentLayerScale2D& aScale) const = 0;"
            ],
            [
                259,
                256,
                ""
            ],
            [
                260,
                257,
                "  virtual ScreenPoint MakePoint(ScreenCoord aCoord) const = 0;"
            ],
            [
                261,
                258,
                ""
            ],
            [
                262,
                259,
                "  virtual const char* Name() const = 0;"
            ],
            [
                284,
                281,
                ""
            ],
            [
                285,
                282,
                "  // A queue of (timestamp, velocity) pairs; these are the historical"
            ],
            [
                286,
                283,
                "  // velocities at the given timestamps. Timestamps are in milliseconds,"
            ],
            [
                287,
                284,
                "  // velocities are in screen pixels per ms. This member can only be"
            ],
            [
                288,
                285,
                "  // accessed on the controller/UI thread."
            ],
            [
                289,
                286,
                "  nsTArray<std::pair<uint32_t, float> > mVelocityQueue;"
            ],
            [
                290,
                287,
                ""
            ],
            [
                291,
                288,
                "  const FrameMetrics& GetFrameMetrics() const;"
            ],
            [
                292,
                0,
                "  const ScrollMetadata& GetScrollMetadata() const;"
            ],
            [
                293,
                0,
                ""
            ],
            [
                294,
                0,
                "  virtual OverscrollBehavior GetOverscrollBehavior() const = 0;"
            ],
            [
                295,
                289,
                ""
            ],
            [
                296,
                290,
                "  // Adjust a requested overscroll amount for resistance, yielding a smaller"
            ],
            [
                297,
                291,
                "  // actual overscroll amount."
            ],
            [
                298,
                292,
                "  ParentLayerCoord ApplyResistance(ParentLayerCoord aOverscroll) const;"
            ],
            [
                299,
                293,
                ""
            ],
            [
                300,
                294,
                "  // Helper function for SampleOverscrollAnimation()."
            ],
            [
                301,
                295,
                "  void StepOverscrollAnimation(double aStepDurationMilliseconds);"
            ],
            [
                302,
                296,
                ""
            ],
            [
                308,
                302,
                "public:"
            ],
            [
                309,
                303,
                "  explicit AxisX(AsyncPanZoomController* mAsyncPanZoomController);"
            ],
            [
                310,
                304,
                "  virtual ParentLayerCoord GetPointOffset(const ParentLayerPoint& aPoint) const override;"
            ],
            [
                311,
                305,
                "  virtual ParentLayerCoord GetRectLength(const ParentLayerRect& aRect) const override;"
            ],
            [
                312,
                306,
                "  virtual ParentLayerCoord GetRectOffset(const ParentLayerRect& aRect) const override;"
            ],
            [
                313,
                307,
                "  virtual CSSToParentLayerScale GetScaleForAxis(const CSSToParentLayerScale2D& aScale) const override;"
            ],
            [
                314,
                308,
                "  virtual ScreenPoint MakePoint(ScreenCoord aCoord) const override;"
            ],
            [
                315,
                309,
                "  virtual const char* Name() const override;"
            ],
            [
                316,
                0,
                "private:"
            ],
            [
                317,
                0,
                "  virtual OverscrollBehavior GetOverscrollBehavior() const override;"
            ],
            [
                318,
                310,
                "};"
            ],
            [
                319,
                311,
                ""
            ],
            [
                320,
                312,
                "class AxisY : public Axis {"
            ],
            [
                321,
                313,
                "public:"
            ],
            [
                322,
                314,
                "  explicit AxisY(AsyncPanZoomController* mAsyncPanZoomController);"
            ],
            [
                323,
                315,
                "  virtual ParentLayerCoord GetPointOffset(const ParentLayerPoint& aPoint) const override;"
            ],
            [
                324,
                316,
                "  virtual ParentLayerCoord GetRectLength(const ParentLayerRect& aRect) const override;"
            ],
            [
                325,
                317,
                "  virtual ParentLayerCoord GetRectOffset(const ParentLayerRect& aRect) const override;"
            ],
            [
                326,
                318,
                "  virtual CSSToParentLayerScale GetScaleForAxis(const CSSToParentLayerScale2D& aScale) const override;"
            ],
            [
                327,
                319,
                "  virtual ScreenPoint MakePoint(ScreenCoord aCoord) const override;"
            ],
            [
                328,
                320,
                "  virtual const char* Name() const override;"
            ],
            [
                329,
                0,
                "private:"
            ],
            [
                330,
                0,
                "  virtual OverscrollBehavior GetOverscrollBehavior() const override;"
            ],
            [
                331,
                321,
                "};"
            ],
            [
                332,
                322,
                ""
            ],
            [
                333,
                323,
                "} // namespace layers"
            ],
            [
                334,
                324,
                "} // namespace mozilla"
            ],
            [
                335,
                325,
                ""
            ],
            [
                336,
                326,
                "#endif"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/InputBlockState.cpp",
        "binary": false,
        "count_add": 4,
        "count_del": 8,
        "lines": [
            [
                317,
                317,
                "  sLastWheelBlockId = GetBlockId();"
            ],
            [
                318,
                318,
                ""
            ],
            [
                319,
                319,
                "  if (aTargetConfirmed) {"
            ],
            [
                320,
                320,
                "    // Find the nearest APZC in the overscroll handoff chain that is scrollable."
            ],
            [
                321,
                321,
                "    // If we get a content confirmation later that the apzc is different, then"
            ],
            [
                322,
                322,
                "    // content should have found a scrollable apzc, so we don't need to handle"
            ],
            [
                323,
                323,
                "    // that case."
            ],
            [
                324,
                324,
                "    RefPtr<AsyncPanZoomController> apzc ="
            ],
            [
                325,
                0,
                "      mOverscrollHandoffChain->FindFirstScrollable("
            ],
            [
                326,
                0,
                "          aInitialEvent, &mAllowedScrollDirections);"
            ],
            [
                0,
                325,
                "      mOverscrollHandoffChain->FindFirstScrollable(aInitialEvent);"
            ],
            [
                327,
                326,
                ""
            ],
            [
                328,
                327,
                "    // If nothing is scrollable, we don't consider this block as starting a"
            ],
            [
                329,
                328,
                "    // transaction."
            ],
            [
                330,
                329,
                "    if (!apzc) {"
            ],
            [
                331,
                330,
                "      EndTransaction();"
            ],
            [
                332,
                331,
                "      return;"
            ],
            [
                333,
                332,
                "    }"
            ],
            [
                334,
                333,
                ""
            ],
            [
                352,
                351,
                "                                        TargetConfirmationState aState,"
            ],
            [
                353,
                352,
                "                                        InputData* aFirstInput)"
            ],
            [
                354,
                353,
                "{"
            ],
            [
                355,
                354,
                "  // The APZC that we find via APZCCallbackHelpers may not be the same APZC"
            ],
            [
                356,
                355,
                "  // ESM or OverscrollHandoff would have computed. Make sure we get the right"
            ],
            [
                357,
                356,
                "  // one by looking for the first apzc the next pending event can scroll."
            ],
            [
                358,
                357,
                "  RefPtr<AsyncPanZoomController> apzc = aTargetApzc;"
            ],
            [
                359,
                358,
                "  if (apzc && aFirstInput) {"
            ],
            [
                360,
                0,
                "    apzc = apzc->BuildOverscrollHandoffChain()->FindFirstScrollable("
            ],
            [
                361,
                0,
                "        *aFirstInput, &mAllowedScrollDirections);"
            ],
            [
                0,
                359,
                "    apzc = apzc->BuildOverscrollHandoffChain()->FindFirstScrollable(*aFirstInput);"
            ],
            [
                362,
                360,
                "  }"
            ],
            [
                363,
                361,
                ""
            ],
            [
                364,
                362,
                "  InputBlockState::SetConfirmedTargetApzc(apzc, aState, aFirstInput);"
            ],
            [
                365,
                363,
                "  return true;"
            ],
            [
                366,
                364,
                "}"
            ],
            [
                367,
                365,
                ""
            ],
            [
                368,
                366,
                "void"
            ],
            [
                369,
                367,
                "WheelBlockState::Update(ScrollWheelInput& aEvent)"
            ],
            [
                550,
                548,
                "  , mWaitingForContentResponse(false)"
            ],
            [
                551,
                549,
                "{"
            ],
            [
                552,
                550,
                "  if (aTargetConfirmed) {"
            ],
            [
                553,
                551,
                "    // Find the nearest APZC in the overscroll handoff chain that is scrollable."
            ],
            [
                554,
                552,
                "    // If we get a content confirmation later that the apzc is different, then"
            ],
            [
                555,
                553,
                "    // content should have found a scrollable apzc, so we don't need to handle"
            ],
            [
                556,
                554,
                "    // that case."
            ],
            [
                557,
                555,
                "    RefPtr<AsyncPanZoomController> apzc ="
            ],
            [
                558,
                0,
                "      mOverscrollHandoffChain->FindFirstScrollable("
            ],
            [
                559,
                0,
                "          aInitialEvent, &mAllowedScrollDirections);"
            ],
            [
                0,
                556,
                "      mOverscrollHandoffChain->FindFirstScrollable(aInitialEvent);"
            ],
            [
                560,
                557,
                ""
            ],
            [
                561,
                558,
                "    if (apzc && apzc != GetTargetApzc()) {"
            ],
            [
                562,
                559,
                "      UpdateTargetApzc(apzc);"
            ],
            [
                563,
                560,
                "    }"
            ],
            [
                564,
                561,
                "  }"
            ],
            [
                565,
                562,
                "}"
            ],
            [
                566,
                563,
                ""
            ],
            [
                567,
                564,
                "bool"
            ],
            [
                570,
                567,
                "                                             InputData* aFirstInput)"
            ],
            [
                571,
                568,
                "{"
            ],
            [
                572,
                569,
                "  // The APZC that we find via APZCCallbackHelpers may not be the same APZC"
            ],
            [
                573,
                570,
                "  // ESM or OverscrollHandoff would have computed. Make sure we get the right"
            ],
            [
                574,
                571,
                "  // one by looking for the first apzc the next pending event can scroll."
            ],
            [
                575,
                572,
                "  RefPtr<AsyncPanZoomController> apzc = aTargetApzc;"
            ],
            [
                576,
                573,
                "  if (apzc && aFirstInput) {"
            ],
            [
                577,
                574,
                "    RefPtr<AsyncPanZoomController> scrollableApzc ="
            ],
            [
                578,
                0,
                "      apzc->BuildOverscrollHandoffChain()->FindFirstScrollable("
            ],
            [
                579,
                0,
                "          *aFirstInput, &mAllowedScrollDirections);"
            ],
            [
                0,
                575,
                "      apzc->BuildOverscrollHandoffChain()->FindFirstScrollable(*aFirstInput);"
            ],
            [
                580,
                576,
                "    if (scrollableApzc) {"
            ],
            [
                581,
                577,
                "      apzc = scrollableApzc;"
            ],
            [
                582,
                578,
                "    }"
            ],
            [
                583,
                579,
                "  }"
            ],
            [
                584,
                580,
                ""
            ],
            [
                585,
                581,
                "  InputBlockState::SetConfirmedTargetApzc(apzc, aState, aFirstInput);"
            ],
            [
                586,
                582,
                "  return true;"
            ],
            [
                587,
                583,
                "}"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/InputBlockState.h",
        "binary": false,
        "count_add": 0,
        "count_del": 6,
        "lines": [
            [
                277,
                277,
                "   */"
            ],
            [
                278,
                278,
                "  bool MaybeTimeout(const TimeStamp& aTimeStamp);"
            ],
            [
                279,
                279,
                ""
            ],
            [
                280,
                280,
                "  /**"
            ],
            [
                281,
                281,
                "   * Update the wheel transaction state for a new event."
            ],
            [
                282,
                282,
                "   */"
            ],
            [
                283,
                283,
                "  void Update(ScrollWheelInput& aEvent);"
            ],
            [
                284,
                284,
                ""
            ],
            [
                285,
                0,
                "  ScrollDirections GetAllowedScrollDirections() const { return mAllowedScrollDirections; }"
            ],
            [
                286,
                0,
                ""
            ],
            [
                287,
                285,
                "protected:"
            ],
            [
                288,
                286,
                "  void UpdateTargetApzc(const RefPtr<AsyncPanZoomController>& aTargetApzc) override;"
            ],
            [
                289,
                287,
                ""
            ],
            [
                290,
                288,
                "private:"
            ],
            [
                291,
                289,
                "  TimeStamp mLastEventTime;"
            ],
            [
                292,
                290,
                "  TimeStamp mLastMouseMove;"
            ],
            [
                293,
                291,
                "  uint32_t mScrollSeriesCounter;"
            ],
            [
                294,
                292,
                "  bool mTransactionEnded;"
            ],
            [
                295,
                0,
                "  ScrollDirections mAllowedScrollDirections;"
            ],
            [
                296,
                293,
                "};"
            ],
            [
                297,
                294,
                ""
            ],
            [
                298,
                295,
                "/**"
            ],
            [
                299,
                296,
                " * A block of mouse events that are part of a drag"
            ],
            [
                300,
                297,
                " */"
            ],
            [
                301,
                298,
                "class DragBlockState : public CancelableBlockState"
            ],
            [
                302,
                299,
                "{"
            ],
            [
                303,
                300,
                "public:"
            ],
            [
                352,
                349,
                "   * @return Whether or not overscrolling is prevented for this block."
            ],
            [
                353,
                350,
                "   */"
            ],
            [
                354,
                351,
                "  bool AllowScrollHandoff() const;"
            ],
            [
                355,
                352,
                ""
            ],
            [
                356,
                353,
                "  bool WasInterrupted() const { return mInterrupted; }"
            ],
            [
                357,
                354,
                ""
            ],
            [
                358,
                355,
                "  void SetNeedsToWaitForContentResponse(bool aWaitForContentResponse);"
            ],
            [
                359,
                356,
                ""
            ],
            [
                360,
                0,
                "  ScrollDirections GetAllowedScrollDirections() const { return mAllowedScrollDirections; }"
            ],
            [
                361,
                0,
                ""
            ],
            [
                362,
                357,
                "private:"
            ],
            [
                363,
                358,
                "  bool mInterrupted;"
            ],
            [
                364,
                359,
                "  bool mWaitingForContentResponse;"
            ],
            [
                365,
                0,
                "  ScrollDirections mAllowedScrollDirections;"
            ],
            [
                366,
                360,
                "};"
            ],
            [
                367,
                361,
                ""
            ],
            [
                368,
                362,
                "/**"
            ],
            [
                369,
                363,
                " * This class represents a single touch block. A touch block is"
            ],
            [
                370,
                364,
                " * a set of touch events that can be cancelled by web content via"
            ],
            [
                371,
                365,
                " * touch event listeners."
            ],
            [
                372,
                366,
                " *"
            ],
            [
                373,
                367,
                " * Every touch-start event creates a new touch block. In this case, the"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/InputQueue.cpp",
        "binary": false,
        "count_add": 2,
        "count_del": 6,
        "lines": [
            [
                313,
                313,
                "}"
            ],
            [
                314,
                314,
                ""
            ],
            [
                315,
                315,
                "static bool"
            ],
            [
                316,
                316,
                "CanScrollTargetHorizontally(const PanGestureInput& aInitialEvent,"
            ],
            [
                317,
                317,
                "                            PanGestureBlockState* aBlock)"
            ],
            [
                318,
                318,
                "{"
            ],
            [
                319,
                319,
                "  PanGestureInput horizontalComponent = aInitialEvent;"
            ],
            [
                320,
                320,
                "  horizontalComponent.mPanDisplacement.y = 0;"
            ],
            [
                321,
                0,
                "  ScrollDirections allowedScrollDirections;"
            ],
            [
                322,
                321,
                "  RefPtr<AsyncPanZoomController> horizontallyScrollableAPZC ="
            ],
            [
                323,
                0,
                "    aBlock->GetOverscrollHandoffChain()->FindFirstScrollable("
            ],
            [
                324,
                0,
                "        horizontalComponent, &allowedScrollDirections);"
            ],
            [
                325,
                0,
                "  return horizontallyScrollableAPZC &&"
            ],
            [
                326,
                0,
                "      horizontallyScrollableAPZC == aBlock->GetTargetApzc() &&"
            ],
            [
                327,
                0,
                "      allowedScrollDirections.contains(ScrollDirection::eHorizontal);"
            ],
            [
                0,
                322,
                "    aBlock->GetOverscrollHandoffChain()->FindFirstScrollable(horizontalComponent);"
            ],
            [
                0,
                323,
                "  return horizontallyScrollableAPZC && horizontallyScrollableAPZC == aBlock->GetTargetApzc();"
            ],
            [
                328,
                324,
                "}"
            ],
            [
                329,
                325,
                ""
            ],
            [
                330,
                326,
                "nsEventStatus"
            ],
            [
                331,
                327,
                "InputQueue::ReceivePanGestureInput(const RefPtr<AsyncPanZoomController>& aTarget,"
            ],
            [
                332,
                328,
                "                                   bool aTargetConfirmed,"
            ],
            [
                333,
                329,
                "                                   const PanGestureInput& aEvent,"
            ],
            [
                334,
                330,
                "                                   uint64_t* aOutInputBlockId) {"
            ],
            [
                335,
                331,
                "  if (aEvent.mType == PanGestureInput::PANGESTURE_MAYSTART ||"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/OverscrollHandoffState.cpp",
        "binary": false,
        "count_add": 1,
        "count_del": 13,
        "lines": [
            [
                156,
                156,
                ""
            ],
            [
                157,
                157,
                "bool"
            ],
            [
                158,
                158,
                "OverscrollHandoffChain::HasFastFlungApzc() const"
            ],
            [
                159,
                159,
                "{"
            ],
            [
                160,
                160,
                "  return AnyApzc(&AsyncPanZoomController::IsFlingingFast);"
            ],
            [
                161,
                161,
                "}"
            ],
            [
                162,
                162,
                ""
            ],
            [
                163,
                163,
                "RefPtr<AsyncPanZoomController>"
            ],
            [
                164,
                0,
                "OverscrollHandoffChain::FindFirstScrollable("
            ],
            [
                165,
                0,
                "    const InputData& aInput,"
            ],
            [
                166,
                0,
                "    ScrollDirections* aOutAllowedScrollDirections) const"
            ],
            [
                0,
                164,
                "OverscrollHandoffChain::FindFirstScrollable(const InputData& aInput) const"
            ],
            [
                167,
                165,
                "{"
            ],
            [
                168,
                0,
                "  // Start by allowing scrolling in both directions. As we do handoff"
            ],
            [
                169,
                0,
                "  // overscroll-behavior may restrict one or both of the directions."
            ],
            [
                170,
                0,
                "  *aOutAllowedScrollDirections += ScrollDirection::eVertical;"
            ],
            [
                171,
                0,
                "  *aOutAllowedScrollDirections += ScrollDirection::eHorizontal;"
            ],
            [
                172,
                0,
                ""
            ],
            [
                173,
                166,
                "  for (size_t i = 0; i < Length(); i++) {"
            ],
            [
                174,
                167,
                "    if (mChain[i]->CanScroll(aInput)) {"
            ],
            [
                175,
                168,
                "      return mChain[i];"
            ],
            [
                176,
                169,
                "    }"
            ],
            [
                177,
                0,
                ""
            ],
            [
                178,
                0,
                "    *aOutAllowedScrollDirections &= mChain[i]->GetAllowedHandoffDirections();"
            ],
            [
                179,
                0,
                "    if (aOutAllowedScrollDirections->isEmpty()) {"
            ],
            [
                180,
                0,
                "      return nullptr;"
            ],
            [
                181,
                0,
                "    }"
            ],
            [
                182,
                170,
                "  }"
            ],
            [
                183,
                171,
                "  return nullptr;"
            ],
            [
                184,
                172,
                "}"
            ],
            [
                185,
                173,
                ""
            ],
            [
                186,
                174,
                "} // namespace layers"
            ],
            [
                187,
                175,
                "} // namespace mozilla"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/apz/src/OverscrollHandoffState.h",
        "binary": false,
        "count_add": 1,
        "count_del": 7,
        "lines": [
            [
                84,
                84,
                "                            ScrollDirection aDirection) const;"
            ],
            [
                85,
                85,
                ""
            ],
            [
                86,
                86,
                "  // Determine whether any APZC along this handoff chain is overscrolled."
            ],
            [
                87,
                87,
                "  bool HasOverscrolledApzc() const;"
            ],
            [
                88,
                88,
                ""
            ],
            [
                89,
                89,
                "  // Determine whether any APZC along this handoff chain has been flung fast."
            ],
            [
                90,
                90,
                "  bool HasFastFlungApzc() const;"
            ],
            [
                91,
                91,
                ""
            ],
            [
                92,
                0,
                "  // Find the first APZC in this handoff chain that can be scrolled by |aInput|."
            ],
            [
                93,
                0,
                "  // Since overscroll-behavior can restrict handoff in some directions,"
            ],
            [
                94,
                0,
                "  // |aOutAllowedScrollDirections| is populated with the scroll directions"
            ],
            [
                95,
                0,
                "  // in which scrolling of the returned APZC is allowed."
            ],
            [
                96,
                0,
                "  RefPtr<AsyncPanZoomController> FindFirstScrollable("
            ],
            [
                97,
                0,
                "      const InputData& aInput,"
            ],
            [
                98,
                0,
                "      ScrollDirections* aOutAllowedScrollDirections) const;"
            ],
            [
                0,
                92,
                "  RefPtr<AsyncPanZoomController> FindFirstScrollable(const InputData& aInput) const;"
            ],
            [
                99,
                93,
                ""
            ],
            [
                100,
                94,
                "private:"
            ],
            [
                101,
                95,
                "  std::vector<RefPtr<AsyncPanZoomController>> mChain;"
            ],
            [
                102,
                96,
                ""
            ],
            [
                103,
                97,
                "  typedef void (AsyncPanZoomController::*APZCMethod)();"
            ],
            [
                104,
                98,
                "  typedef bool (AsyncPanZoomController::*APZCPredicate)() const;"
            ],
            [
                105,
                99,
                "  void ForEachApzc(APZCMethod aMethod) const;"
            ],
            [
                106,
                100,
                "  bool AnyApzc(APZCPredicate aPredicate) const;"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "gfx/layers/ipc/LayersMessageUtils.h",
        "binary": false,
        "count_add": 1,
        "count_del": 32,
        "lines": [
            [
                73,
                73,
                "template<>"
            ],
            [
                74,
                74,
                "struct ParamTraits<mozilla::layers::FrameMetrics::ScrollOffsetUpdateType>"
            ],
            [
                75,
                75,
                "  : public ContiguousEnumSerializerInclusive<"
            ],
            [
                76,
                76,
                "             mozilla::layers::FrameMetrics::ScrollOffsetUpdateType,"
            ],
            [
                77,
                77,
                "             mozilla::layers::FrameMetrics::ScrollOffsetUpdateType::eNone,"
            ],
            [
                78,
                78,
                "             mozilla::layers::FrameMetrics::sHighestScrollOffsetUpdateType>"
            ],
            [
                79,
                79,
                "{};"
            ],
            [
                80,
                80,
                ""
            ],
            [
                81,
                0,
                "template <>"
            ],
            [
                82,
                0,
                "struct ParamTraits<mozilla::layers::OverscrollBehavior>"
            ],
            [
                83,
                0,
                "  : public ContiguousEnumSerializerInclusive<"
            ],
            [
                84,
                0,
                "            mozilla::layers::OverscrollBehavior,"
            ],
            [
                85,
                0,
                "            mozilla::layers::OverscrollBehavior::Auto,"
            ],
            [
                86,
                0,
                "            mozilla::layers::kHighestOverscrollBehavior>"
            ],
            [
                87,
                0,
                "{};"
            ],
            [
                88,
                0,
                ""
            ],
            [
                89,
                81,
                "template<>"
            ],
            [
                90,
                82,
                "struct ParamTraits<mozilla::layers::LayerHandle>"
            ],
            [
                91,
                83,
                "{"
            ],
            [
                92,
                84,
                "  typedef mozilla::layers::LayerHandle paramType;"
            ],
            [
                93,
                85,
                ""
            ],
            [
                94,
                86,
                "  static void Write(Message* msg, const paramType& param) {"
            ],
            [
                95,
                87,
                "    WriteParam(msg, param.mHandle);"
            ],
            [
                96,
                88,
                "  }"
            ],
            [
                228,
                220,
                "            ReadParam(aMsg, aIter, &aResult->mScrollSnapIntervalX) &&"
            ],
            [
                229,
                221,
                "            ReadParam(aMsg, aIter, &aResult->mScrollSnapIntervalY) &&"
            ],
            [
                230,
                222,
                "            ReadParam(aMsg, aIter, &aResult->mScrollSnapDestination) &&"
            ],
            [
                231,
                223,
                "            ReadParam(aMsg, aIter, &aResult->mScrollSnapCoordinates));"
            ],
            [
                232,
                224,
                "  }"
            ],
            [
                233,
                225,
                "};"
            ],
            [
                234,
                226,
                ""
            ],
            [
                235,
                227,
                "template <>"
            ],
            [
                236,
                0,
                "struct ParamTraits<mozilla::layers::OverscrollBehaviorInfo>"
            ],
            [
                237,
                0,
                "{"
            ],
            [
                238,
                0,
                "  // Not using PlainOldDataSerializer so we get enum validation"
            ],
            [
                239,
                0,
                "  // for the members."
            ],
            [
                240,
                0,
                ""
            ],
            [
                241,
                0,
                "  typedef mozilla::layers::OverscrollBehaviorInfo paramType;"
            ],
            [
                242,
                0,
                ""
            ],
            [
                243,
                0,
                "  static void Write(Message* aMsg, const paramType& aParam)"
            ],
            [
                244,
                0,
                "  {"
            ],
            [
                245,
                0,
                "    WriteParam(aMsg, aParam.mBehaviorX);"
            ],
            [
                246,
                0,
                "    WriteParam(aMsg, aParam.mBehaviorY);"
            ],
            [
                247,
                0,
                "  }"
            ],
            [
                248,
                0,
                ""
            ],
            [
                249,
                0,
                "  static bool Read(const Message* aMsg, PickleIterator* aIter, paramType* aResult)"
            ],
            [
                250,
                0,
                "  {"
            ],
            [
                251,
                0,
                "    return (ReadParam(aMsg, aIter, &aResult->mBehaviorX) &&"
            ],
            [
                252,
                0,
                "            ReadParam(aMsg, aIter, &aResult->mBehaviorY));"
            ],
            [
                253,
                0,
                "  }"
            ],
            [
                254,
                0,
                "};"
            ],
            [
                255,
                0,
                ""
            ],
            [
                256,
                0,
                "template <>"
            ],
            [
                257,
                228,
                "struct ParamTraits<mozilla::layers::LayerClip>"
            ],
            [
                258,
                229,
                "{"
            ],
            [
                259,
                230,
                "  typedef mozilla::layers::LayerClip paramType;"
            ],
            [
                260,
                231,
                ""
            ],
            [
                261,
                232,
                "  static void Write(Message* aMsg, const paramType& aParam)"
            ],
            [
                262,
                233,
                "  {"
            ],
            [
                263,
                234,
                "    WriteParam(aMsg, aParam.mClipRect);"
            ],
            [
                264,
                235,
                "    WriteParam(aMsg, aParam.mMaskLayerIndex);"
            ],
            [
                287,
                258,
                "    WriteParam(aMsg, aParam.mLineScrollAmount);"
            ],
            [
                288,
                259,
                "    WriteParam(aMsg, aParam.mPageScrollAmount);"
            ],
            [
                289,
                260,
                "    WriteParam(aMsg, aParam.mScrollClip);"
            ],
            [
                290,
                261,
                "    WriteParam(aMsg, aParam.mHasScrollgrab);"
            ],
            [
                291,
                262,
                "    WriteParam(aMsg, aParam.mAllowVerticalScrollWithWheel);"
            ],
            [
                292,
                263,
                "    WriteParam(aMsg, aParam.mIsLayersIdRoot);"
            ],
            [
                293,
                264,
                "    WriteParam(aMsg, aParam.mUsesContainerScrolling);"
            ],
            [
                294,
                265,
                "    WriteParam(aMsg, aParam.mForceDisableApz);"
            ],
            [
                295,
                0,
                "    WriteParam(aMsg, aParam.mOverscrollBehavior);"
            ],
            [
                296,
                266,
                "  }"
            ],
            [
                297,
                267,
                ""
            ],
            [
                298,
                268,
                "  static bool ReadContentDescription(const Message* aMsg, PickleIterator* aIter, paramType* aResult)"
            ],
            [
                299,
                269,
                "  {"
            ],
            [
                300,
                270,
                "    nsCString str;"
            ],
            [
                301,
                271,
                "    if (!ReadParam(aMsg, aIter, &str)) {"
            ],
            [
                302,
                272,
                "      return false;"
            ],
            [
                303,
                273,
                "    }"
            ],
            [
                314,
                284,
                "            ReadContentDescription(aMsg, aIter, aResult) &&"
            ],
            [
                315,
                285,
                "            ReadParam(aMsg, aIter, &aResult->mLineScrollAmount) &&"
            ],
            [
                316,
                286,
                "            ReadParam(aMsg, aIter, &aResult->mPageScrollAmount) &&"
            ],
            [
                317,
                287,
                "            ReadParam(aMsg, aIter, &aResult->mScrollClip) &&"
            ],
            [
                318,
                288,
                "            ReadBoolForBitfield(aMsg, aIter, aResult, &paramType::SetHasScrollgrab) &&"
            ],
            [
                319,
                289,
                "            ReadBoolForBitfield(aMsg, aIter, aResult, &paramType::SetAllowVerticalScrollWithWheel) &&"
            ],
            [
                320,
                290,
                "            ReadBoolForBitfield(aMsg, aIter, aResult, &paramType::SetIsLayersIdRoot) &&"
            ],
            [
                321,
                291,
                "            ReadBoolForBitfield(aMsg, aIter, aResult, &paramType::SetUsesContainerScrolling) &&"
            ],
            [
                322,
                0,
                "            ReadBoolForBitfield(aMsg, aIter, aResult, &paramType::SetForceDisableApz) &&"
            ],
            [
                323,
                0,
                "            ReadParam(aMsg, aIter, &aResult->mOverscrollBehavior));"
            ],
            [
                0,
                292,
                "            ReadBoolForBitfield(aMsg, aIter, aResult, &paramType::SetForceDisableApz));"
            ],
            [
                324,
                293,
                "  }"
            ],
            [
                325,
                294,
                "};"
            ],
            [
                326,
                295,
                ""
            ],
            [
                327,
                296,
                "template<>"
            ],
            [
                328,
                297,
                "struct ParamTraits<mozilla::layers::TextureFactoryIdentifier>"
            ],
            [
                329,
                298,
                "{"
            ],
            [
                330,
                299,
                "  typedef mozilla::layers::TextureFactoryIdentifier paramType;"
            ],
            [
                331,
                300,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "ipc/glue/IPCMessageUtils.h",
        "binary": false,
        "count_add": 0,
        "count_del": 5,
        "lines": [
            [
                251,
                251,
                ""
            ],
            [
                252,
                252,
                "/**"
            ],
            [
                253,
                253,
                " * A helper class for serializing plain-old data (POD) structures."
            ],
            [
                254,
                254,
                " * The memory representation of the structure is written to and read from"
            ],
            [
                255,
                255,
                " * the serialized stream directly, without individual processing of the"
            ],
            [
                256,
                256,
                " * structure's members."
            ],
            [
                257,
                257,
                " *"
            ],
            [
                258,
                258,
                " * Derive ParamTraits<T> from PlainOldDataSerializer<T> if T is POD."
            ],
            [
                259,
                0,
                " *"
            ],
            [
                260,
                0,
                " * Note: For POD structures with enumeration fields, this will not do"
            ],
            [
                261,
                0,
                " *   validation of the enum values the way serializing the fields"
            ],
            [
                262,
                0,
                " *   individually would. Prefer serializing the fields individually"
            ],
            [
                263,
                0,
                " *   in such cases."
            ],
            [
                264,
                259,
                " */"
            ],
            [
                265,
                260,
                "template <typename T>"
            ],
            [
                266,
                261,
                "struct PlainOldDataSerializer"
            ],
            [
                267,
                262,
                "{"
            ],
            [
                268,
                263,
                "  // TODO: Once the mozilla::IsPod trait is in good enough shape (bug 900042),"
            ],
            [
                269,
                264,
                "  //       static_assert that mozilla::IsPod<T>::value is true."
            ],
            [
                270,
                265,
                "  typedef T paramType;"
            ],
            [
                271,
                266,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/base/ScrollbarStyles.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 4,
        "lines": [
            [
                8,
                8,
                "#include \"nsStyleStruct.h\" // for nsStyleDisplay and nsStyleBackground::Position"
            ],
            [
                9,
                9,
                ""
            ],
            [
                10,
                10,
                "namespace mozilla {"
            ],
            [
                11,
                11,
                ""
            ],
            [
                12,
                12,
                "  ScrollbarStyles::ScrollbarStyles(uint8_t aH, uint8_t aV,"
            ],
            [
                13,
                13,
                "                                   const nsStyleDisplay* aDisplay)"
            ],
            [
                14,
                14,
                "    : mHorizontal(aH), mVertical(aV),"
            ],
            [
                15,
                15,
                "      mScrollBehavior(aDisplay->mScrollBehavior),"
            ],
            [
                16,
                0,
                "      mOverscrollBehaviorX(aDisplay->mOverscrollBehaviorX),"
            ],
            [
                17,
                0,
                "      mOverscrollBehaviorY(aDisplay->mOverscrollBehaviorY),"
            ],
            [
                18,
                16,
                "      mScrollSnapTypeX(aDisplay->mScrollSnapTypeX),"
            ],
            [
                19,
                17,
                "      mScrollSnapTypeY(aDisplay->mScrollSnapTypeY),"
            ],
            [
                20,
                18,
                "      mScrollSnapPointsX(aDisplay->mScrollSnapPointsX),"
            ],
            [
                21,
                19,
                "      mScrollSnapPointsY(aDisplay->mScrollSnapPointsY),"
            ],
            [
                22,
                20,
                "      mScrollSnapDestinationX(aDisplay->mScrollSnapDestination.mXPosition),"
            ],
            [
                23,
                21,
                "      mScrollSnapDestinationY(aDisplay->mScrollSnapDestination.mYPosition) {}"
            ],
            [
                24,
                22,
                ""
            ],
            [
                25,
                23,
                "  ScrollbarStyles::ScrollbarStyles(const nsStyleDisplay* aDisplay)"
            ],
            [
                26,
                24,
                "    : mHorizontal(aDisplay->mOverflowX), mVertical(aDisplay->mOverflowY),"
            ],
            [
                27,
                25,
                "      mScrollBehavior(aDisplay->mScrollBehavior),"
            ],
            [
                28,
                0,
                "      mOverscrollBehaviorX(aDisplay->mOverscrollBehaviorX),"
            ],
            [
                29,
                0,
                "      mOverscrollBehaviorY(aDisplay->mOverscrollBehaviorY),"
            ],
            [
                30,
                26,
                "      mScrollSnapTypeX(aDisplay->mScrollSnapTypeX),"
            ],
            [
                31,
                27,
                "      mScrollSnapTypeY(aDisplay->mScrollSnapTypeY),"
            ],
            [
                32,
                28,
                "      mScrollSnapPointsX(aDisplay->mScrollSnapPointsX),"
            ],
            [
                33,
                29,
                "      mScrollSnapPointsY(aDisplay->mScrollSnapPointsY),"
            ],
            [
                34,
                30,
                "      mScrollSnapDestinationX(aDisplay->mScrollSnapDestination.mXPosition),"
            ],
            [
                35,
                31,
                "      mScrollSnapDestinationY(aDisplay->mScrollSnapDestination.mYPosition) {}"
            ],
            [
                36,
                32,
                ""
            ],
            [
                37,
                33,
                "} // namespace mozilla"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/base/ScrollbarStyles.h",
        "binary": false,
        "count_add": 0,
        "count_del": 6,
        "lines": [
            [
                21,
                21,
                "{"
            ],
            [
                22,
                22,
                "  // Always one of NS_STYLE_OVERFLOW_SCROLL, NS_STYLE_OVERFLOW_HIDDEN,"
            ],
            [
                23,
                23,
                "  // or NS_STYLE_OVERFLOW_AUTO."
            ],
            [
                24,
                24,
                "  uint8_t mHorizontal;"
            ],
            [
                25,
                25,
                "  uint8_t mVertical;"
            ],
            [
                26,
                26,
                "  // Always one of NS_STYLE_SCROLL_BEHAVIOR_AUTO or"
            ],
            [
                27,
                27,
                "  // NS_STYLE_SCROLL_BEHAVIOR_SMOOTH"
            ],
            [
                28,
                28,
                "  uint8_t mScrollBehavior;"
            ],
            [
                29,
                0,
                "  mozilla::StyleOverscrollBehavior mOverscrollBehaviorX;"
            ],
            [
                30,
                0,
                "  mozilla::StyleOverscrollBehavior mOverscrollBehaviorY;"
            ],
            [
                31,
                29,
                "  // Always one of NS_STYLE_SCROLL_SNAP_NONE, NS_STYLE_SCROLL_SNAP_MANDATORY,"
            ],
            [
                32,
                30,
                "  // or NS_STYLE_SCROLL_SNAP_PROXIMITY."
            ],
            [
                33,
                31,
                "  uint8_t mScrollSnapTypeX;"
            ],
            [
                34,
                32,
                "  uint8_t mScrollSnapTypeY;"
            ],
            [
                35,
                33,
                "  nsStyleCoord mScrollSnapPointsX;"
            ],
            [
                36,
                34,
                "  nsStyleCoord mScrollSnapPointsY;"
            ],
            [
                37,
                35,
                "  nsStyleCoord::CalcValue mScrollSnapDestinationX;"
            ],
            [
                38,
                36,
                "  nsStyleCoord::CalcValue mScrollSnapDestinationY;"
            ],
            [
                39,
                37,
                ""
            ],
            [
                40,
                38,
                "  ScrollbarStyles(uint8_t aH, uint8_t aV)"
            ],
            [
                41,
                39,
                "    : mHorizontal(aH), mVertical(aV),"
            ],
            [
                42,
                40,
                "      mScrollBehavior(NS_STYLE_SCROLL_BEHAVIOR_AUTO),"
            ],
            [
                43,
                0,
                "      mOverscrollBehaviorX(StyleOverscrollBehavior::Auto),"
            ],
            [
                44,
                0,
                "      mOverscrollBehaviorY(StyleOverscrollBehavior::Auto),"
            ],
            [
                45,
                41,
                "      mScrollSnapTypeX(NS_STYLE_SCROLL_SNAP_TYPE_NONE),"
            ],
            [
                46,
                42,
                "      mScrollSnapTypeY(NS_STYLE_SCROLL_SNAP_TYPE_NONE),"
            ],
            [
                47,
                43,
                "      mScrollSnapPointsX(nsStyleCoord(eStyleUnit_None)),"
            ],
            [
                48,
                44,
                "      mScrollSnapPointsY(nsStyleCoord(eStyleUnit_None)) {"
            ],
            [
                49,
                45,
                ""
            ],
            [
                50,
                46,
                "    mScrollSnapDestinationX.mPercent = 0;"
            ],
            [
                51,
                47,
                "    mScrollSnapDestinationX.mLength = nscoord(0.0f);"
            ],
            [
                52,
                48,
                "    mScrollSnapDestinationX.mHasPercent = false;"
            ],
            [
                55,
                51,
                "    mScrollSnapDestinationY.mHasPercent = false;"
            ],
            [
                56,
                52,
                "  }"
            ],
            [
                57,
                53,
                ""
            ],
            [
                58,
                54,
                "  explicit ScrollbarStyles(const nsStyleDisplay* aDisplay);"
            ],
            [
                59,
                55,
                "  ScrollbarStyles(uint8_t aH, uint8_t aV, const nsStyleDisplay* aDisplay);"
            ],
            [
                60,
                56,
                "  bool operator==(const ScrollbarStyles& aStyles) const {"
            ],
            [
                61,
                57,
                "    return aStyles.mHorizontal == mHorizontal && aStyles.mVertical == mVertical &&"
            ],
            [
                62,
                58,
                "           aStyles.mScrollBehavior == mScrollBehavior &&"
            ],
            [
                63,
                0,
                "           aStyles.mOverscrollBehaviorX == mOverscrollBehaviorX &&"
            ],
            [
                64,
                0,
                "           aStyles.mOverscrollBehaviorY == mOverscrollBehaviorY &&"
            ],
            [
                65,
                59,
                "           aStyles.mScrollSnapTypeX == mScrollSnapTypeX &&"
            ],
            [
                66,
                60,
                "           aStyles.mScrollSnapTypeY == mScrollSnapTypeY &&"
            ],
            [
                67,
                61,
                "           aStyles.mScrollSnapPointsX == mScrollSnapPointsX &&"
            ],
            [
                68,
                62,
                "           aStyles.mScrollSnapPointsY == mScrollSnapPointsY &&"
            ],
            [
                69,
                63,
                "           aStyles.mScrollSnapDestinationX == mScrollSnapDestinationX &&"
            ],
            [
                70,
                64,
                "           aStyles.mScrollSnapDestinationY == mScrollSnapDestinationY;"
            ],
            [
                71,
                65,
                "  }"
            ],
            [
                72,
                66,
                "  bool operator!=(const ScrollbarStyles& aStyles) const {"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/base/nsLayoutUtils.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 5,
        "lines": [
            [
                9352,
                9352,
                "        EventStateManager::CanVerticallyScrollFrameWithWheel(aScrollFrame->GetParent()))"
            ],
            [
                9353,
                9353,
                "    {"
            ],
            [
                9354,
                9354,
                "      metadata.SetAllowVerticalScrollWithWheel(true);"
            ],
            [
                9355,
                9355,
                "    }"
            ],
            [
                9356,
                9356,
                ""
            ],
            [
                9357,
                9357,
                "    metadata.SetUsesContainerScrolling(scrollableFrame->UsesContainerScrolling());"
            ],
            [
                9358,
                9358,
                ""
            ],
            [
                9359,
                9359,
                "    metadata.SetSnapInfo(scrollableFrame->GetScrollSnapInfo());"
            ],
            [
                9360,
                0,
                ""
            ],
            [
                9361,
                0,
                "    ScrollbarStyles scrollbarStyles = scrollableFrame->GetScrollbarStyles();"
            ],
            [
                9362,
                0,
                "    metadata.SetOverscrollBehavior(OverscrollBehaviorInfo::FromStyleConstants("
            ],
            [
                9363,
                0,
                "        scrollbarStyles.mOverscrollBehaviorX,"
            ],
            [
                9364,
                0,
                "        scrollbarStyles.mOverscrollBehaviorY));"
            ],
            [
                9365,
                9360,
                "  }"
            ],
            [
                9366,
                9361,
                ""
            ],
            [
                9367,
                9362,
                "  // If we have the scrollparent being the same as the scroll id, the"
            ],
            [
                9368,
                9363,
                "  // compositor-side code could get into an infinite loop while building the"
            ],
            [
                9369,
                9364,
                "  // overscroll handoff chain."
            ],
            [
                9370,
                9365,
                "  MOZ_ASSERT(aScrollParentId == FrameMetrics::NULL_SCROLL_ID || scrollId != aScrollParentId);"
            ],
            [
                9371,
                9366,
                "  metrics.SetScrollId(scrollId);"
            ],
            [
                9372,
                9367,
                "  metrics.SetIsRootContent(aIsRootContent);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/Declaration.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 12,
        "lines": [
            [
                1463,
                1463,
                "      // shorthands that are just aliases with different parsing rules"
            ],
            [
                1464,
                1464,
                "      const nsCSSPropertyID* subprops ="
            ],
            [
                1465,
                1465,
                "        nsCSSProps::SubpropertyEntryFor(aProperty);"
            ],
            [
                1466,
                1466,
                "      MOZ_ASSERT(subprops[1] == eCSSProperty_UNKNOWN,"
            ],
            [
                1467,
                1467,
                "                 \"must have exactly one subproperty\");"
            ],
            [
                1468,
                1468,
                "      AppendValueToString(subprops[0], aValue);"
            ],
            [
                1469,
                1469,
                "      break;"
            ],
            [
                1470,
                1470,
                "    }"
            ],
            [
                1471,
                0,
                "    case eCSSProperty_overscroll_behavior: {"
            ],
            [
                1472,
                0,
                "      const nsCSSValue& xValue ="
            ],
            [
                1473,
                0,
                "        *data->ValueFor(eCSSProperty_overscroll_behavior_x);"
            ],
            [
                1474,
                0,
                "      const nsCSSValue& yValue ="
            ],
            [
                1475,
                0,
                "        *data->ValueFor(eCSSProperty_overscroll_behavior_y);"
            ],
            [
                1476,
                0,
                "      AppendValueToString(eCSSProperty_overscroll_behavior_x, aValue);"
            ],
            [
                1477,
                0,
                "      if (yValue != xValue) {"
            ],
            [
                1478,
                0,
                "        aValue.Append(char16_t(' '));"
            ],
            [
                1479,
                0,
                "        AppendValueToString(eCSSProperty_overscroll_behavior_y, aValue);"
            ],
            [
                1480,
                0,
                "      }"
            ],
            [
                1481,
                0,
                "      break;"
            ],
            [
                1482,
                0,
                "    }"
            ],
            [
                1483,
                1471,
                "    case eCSSProperty_scroll_snap_type: {"
            ],
            [
                1484,
                1472,
                "      const nsCSSValue& xValue ="
            ],
            [
                1485,
                1473,
                "        *data->ValueFor(eCSSProperty_scroll_snap_type_x);"
            ],
            [
                1486,
                1474,
                "      const nsCSSValue& yValue ="
            ],
            [
                1487,
                1475,
                "        *data->ValueFor(eCSSProperty_scroll_snap_type_y);"
            ],
            [
                1488,
                1476,
                "      if (xValue == yValue) {"
            ],
            [
                1489,
                1477,
                "        AppendValueToString(eCSSProperty_scroll_snap_type_x, aValue);"
            ],
            [
                1490,
                1478,
                "      }"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/ServoBindings.toml",
        "binary": false,
        "count_add": 0,
        "count_del": 1,
        "lines": [
            [
                168,
                168,
                "    \"StyleBoxOrient\","
            ],
            [
                169,
                169,
                "    \"StyleBoxAlign\","
            ],
            [
                170,
                170,
                "    \"StyleUserFocus\","
            ],
            [
                171,
                171,
                "    \"StyleUserSelect\","
            ],
            [
                172,
                172,
                "    \"StyleImageLayerRepeat\","
            ],
            [
                173,
                173,
                "    \"StyleBoxDecorationBreak\","
            ],
            [
                174,
                174,
                "    \"StyleRuleInclusion\","
            ],
            [
                175,
                175,
                "    \"StyleGridTrackBreadth\","
            ],
            [
                176,
                0,
                "    \"StyleOverscrollBehavior\","
            ],
            [
                177,
                176,
                "    \"nsStyleImageType\","
            ],
            [
                178,
                177,
                "    \"StyleWhiteSpace\","
            ],
            [
                179,
                178,
                "    \"nsStyleSVGPaintType\","
            ],
            [
                180,
                179,
                "    \"nsStyleSVGFallbackType\","
            ],
            [
                181,
                180,
                "    # \".*Style.*\","
            ],
            [
                182,
                181,
                "    \"nsINode_BooleanFlag\","
            ],
            [
                183,
                182,
                "    \"CSSPseudoElementType\","
            ],
            [
                184,
                183,
                "    \"CSSPseudoClassType\","
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsCSSParser.cpp",
        "binary": false,
        "count_add": 1,
        "count_del": 29,
        "lines": [
            [
                991,
                991,
                "  bool ParseDasharray();"
            ],
            [
                992,
                992,
                "  bool ParseMarker();"
            ],
            [
                993,
                993,
                "  bool ParsePaintOrder();"
            ],
            [
                994,
                994,
                "  bool ParseAll();"
            ],
            [
                995,
                995,
                "  bool ParseScrollSnapType();"
            ],
            [
                996,
                996,
                "  bool ParseScrollSnapPoints(nsCSSValue& aValue, nsCSSPropertyID aPropID);"
            ],
            [
                997,
                997,
                "  bool ParseScrollSnapDestination(nsCSSValue& aValue);"
            ],
            [
                998,
                998,
                "  bool ParseScrollSnapCoordinate(nsCSSValue& aValue);"
            ],
            [
                999,
                0,
                "  bool ParseOverscrollBehavior();"
            ],
            [
                1000,
                999,
                "  bool ParseWebkitTextStroke();"
            ],
            [
                1001,
                1000,
                ""
            ],
            [
                1002,
                1001,
                "  /**"
            ],
            [
                1003,
                1002,
                "   * Parses a variable value from a custom property declaration."
            ],
            [
                1004,
                1003,
                "   *"
            ],
            [
                1005,
                1004,
                "   * @param aType Out parameter into which will be stored the type of variable"
            ],
            [
                1006,
                1005,
                "   *   value, indicating whether the parsed value was a token stream or one of"
            ],
            [
                1007,
                1006,
                "   *   the CSS-wide keywords."
            ],
            [
                10654,
                10653,
                "//  from(color)"
            ],
            [
                10655,
                10654,
                "//  to(color)"
            ],
            [
                10656,
                10655,
                "//"
            ],
            [
                10657,
                10656,
                "// Quoting https://www.webkit.org/blog/175/introducing-css-gradients/ :"
            ],
            [
                10658,
                10657,
                "//   A stop is a function, color-stop, that takes two arguments, the stop value"
            ],
            [
                10659,
                10658,
                "//   (either a percentage or a number between 0 and 1.0), and a color (any"
            ],
            [
                10660,
                10659,
                "//   valid CSS color). In addition the shorthand functions from and to are"
            ],
            [
                10661,
                10660,
                "//   supported. These functions only require a color argument and are"
            ],
            [
                10662,
                0,
                "//   equivalent to color-stop(0, ...) and color-stop(1.0, ...) respectively."
            ],
            [
                0,
                10661,
                "//   equivalent to color-stop(0, ...) and color-stop(1.0, \u2026) respectively."
            ],
            [
                10663,
                10662,
                "bool"
            ],
            [
                10664,
                10663,
                "CSSParserImpl::ParseWebkitGradientColorStop(nsCSSValueGradient* aGradient)"
            ],
            [
                10665,
                10664,
                "{"
            ],
            [
                10666,
                10665,
                "  MOZ_ASSERT(aGradient, \"null gradient\");"
            ],
            [
                10667,
                10666,
                ""
            ],
            [
                10668,
                10667,
                "  if (!GetToken(true)) {"
            ],
            [
                10669,
                10668,
                "    return false;"
            ],
            [
                10670,
                10669,
                "  }"
            ],
            [
                11807,
                11806,
                "  case eCSSProperty_stroke:"
            ],
            [
                11808,
                11807,
                "    return ParsePaint(aPropID);"
            ],
            [
                11809,
                11808,
                "  case eCSSProperty_stroke_dasharray:"
            ],
            [
                11810,
                11809,
                "    return ParseDasharray();"
            ],
            [
                11811,
                11810,
                "  case eCSSProperty_marker:"
            ],
            [
                11812,
                11811,
                "    return ParseMarker();"
            ],
            [
                11813,
                11812,
                "  case eCSSProperty_paint_order:"
            ],
            [
                11814,
                11813,
                "    return ParsePaintOrder();"
            ],
            [
                11815,
                0,
                "  case eCSSProperty_overscroll_behavior:"
            ],
            [
                11816,
                0,
                "    return ParseOverscrollBehavior();"
            ],
            [
                11817,
                11814,
                "  case eCSSProperty_scroll_snap_type:"
            ],
            [
                11818,
                11815,
                "    return ParseScrollSnapType();"
            ],
            [
                11819,
                11816,
                "  case eCSSProperty_mask:"
            ],
            [
                11820,
                11817,
                "    return ParseImageLayers(nsStyleImageLayers::kMaskLayerTable);"
            ],
            [
                11821,
                11818,
                "  case eCSSProperty_mask_repeat:"
            ],
            [
                11822,
                11819,
                "    return ParseImageLayerRepeat(eCSSProperty_mask_repeat);"
            ],
            [
                11823,
                11820,
                "  case eCSSProperty_mask_position:"
            ],
            [
                11824,
                11821,
                "    return ParseImageLayerPosition(nsStyleImageLayers::kMaskLayerTable);"
            ],
            [
                17491,
                17488,
                "  }"
            ],
            [
                17492,
                17489,
                ""
            ],
            [
                17493,
                17490,
                "  *aType = type;"
            ],
            [
                17494,
                17491,
                "  aValue = variableValue;"
            ],
            [
                17495,
                17492,
                "  return true;"
            ],
            [
                17496,
                17493,
                "}"
            ],
            [
                17497,
                17494,
                ""
            ],
            [
                17498,
                17495,
                "bool"
            ],
            [
                17499,
                0,
                "CSSParserImpl::ParseOverscrollBehavior()"
            ],
            [
                17500,
                0,
                "{"
            ],
            [
                17501,
                0,
                "  static const nsCSSPropertyID ids[] = {"
            ],
            [
                17502,
                0,
                "    eCSSProperty_overscroll_behavior_x,"
            ],
            [
                17503,
                0,
                "    eCSSProperty_overscroll_behavior_y"
            ],
            [
                17504,
                0,
                "  };"
            ],
            [
                17505,
                0,
                "  const int32_t numProps = MOZ_ARRAY_LENGTH(ids);"
            ],
            [
                17506,
                0,
                ""
            ],
            [
                17507,
                0,
                "  nsCSSValue values[numProps];"
            ],
            [
                17508,
                0,
                "  int32_t found = ParseChoice(values, ids, numProps);"
            ],
            [
                17509,
                0,
                "  if (found < 1) {"
            ],
            [
                17510,
                0,
                "    return false;"
            ],
            [
                17511,
                0,
                "  }"
            ],
            [
                17512,
                0,
                ""
            ],
            [
                17513,
                0,
                "  // If only one value is specified, it's used for both axes."
            ],
            [
                17514,
                0,
                "  if (found == 1) {"
            ],
            [
                17515,
                0,
                "    values[1] = values[0];"
            ],
            [
                17516,
                0,
                "  }"
            ],
            [
                17517,
                0,
                ""
            ],
            [
                17518,
                0,
                "  AppendValue(eCSSProperty_overscroll_behavior_x, values[0]);"
            ],
            [
                17519,
                0,
                "  AppendValue(eCSSProperty_overscroll_behavior_y, values[1]);"
            ],
            [
                17520,
                0,
                "  return true;"
            ],
            [
                17521,
                0,
                "}"
            ],
            [
                17522,
                0,
                ""
            ],
            [
                17523,
                0,
                "bool"
            ],
            [
                17524,
                17496,
                "CSSParserImpl::ParseScrollSnapType()"
            ],
            [
                17525,
                17497,
                "{"
            ],
            [
                17526,
                17498,
                "  nsCSSValue value;"
            ],
            [
                17527,
                17499,
                "  if (!ParseSingleTokenVariant(value, VARIANT_HK,"
            ],
            [
                17528,
                17500,
                "                               nsCSSProps::kScrollSnapTypeKTable)) {"
            ],
            [
                17529,
                17501,
                "    return false;"
            ],
            [
                17530,
                17502,
                "  }"
            ],
            [
                17531,
                17503,
                "  AppendValue(eCSSProperty_scroll_snap_type_x, value);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsCSSPropList.h",
        "binary": false,
        "count_add": 0,
        "count_del": 26,
        "lines": [
            [
                3652,
                3652,
                "    scroll_behavior,"
            ],
            [
                3653,
                3653,
                "    ScrollBehavior,"
            ],
            [
                3654,
                3654,
                "    CSS_PROPERTY_PARSE_VALUE,"
            ],
            [
                3655,
                3655,
                "    \"layout.css.scroll-behavior.property-enabled\","
            ],
            [
                3656,
                3656,
                "    VARIANT_HK,"
            ],
            [
                3657,
                3657,
                "    kScrollBehaviorKTable,"
            ],
            [
                3658,
                3658,
                "    CSS_PROP_NO_OFFSET,"
            ],
            [
                3659,
                3659,
                "    eStyleAnimType_Discrete)"
            ],
            [
                3660,
                0,
                "CSS_PROP_SHORTHAND("
            ],
            [
                3661,
                0,
                "    overscroll-behavior,"
            ],
            [
                3662,
                0,
                "    overscroll_behavior,"
            ],
            [
                3663,
                0,
                "    OverscrollBehavior,"
            ],
            [
                3664,
                0,
                "    CSS_PROPERTY_PARSE_FUNCTION,"
            ],
            [
                3665,
                0,
                "    \"layout.css.overscroll-behavior.enabled\")"
            ],
            [
                3666,
                0,
                "CSS_PROP_DISPLAY("
            ],
            [
                3667,
                0,
                "    overscroll-behavior-x,"
            ],
            [
                3668,
                0,
                "    overscroll_behavior_x,"
            ],
            [
                3669,
                0,
                "    OverscrollBehaviorX,"
            ],
            [
                3670,
                0,
                "    CSS_PROPERTY_PARSE_VALUE,"
            ],
            [
                3671,
                0,
                "    \"layout.css.overscroll-behavior.enabled\","
            ],
            [
                3672,
                0,
                "    VARIANT_HK,"
            ],
            [
                3673,
                0,
                "    kOverscrollBehaviorKTable,"
            ],
            [
                3674,
                0,
                "    CSS_PROP_NO_OFFSET,"
            ],
            [
                3675,
                0,
                "    eStyleAnimType_Discrete)"
            ],
            [
                3676,
                0,
                "CSS_PROP_DISPLAY("
            ],
            [
                3677,
                0,
                "    overscroll-behavior-y,"
            ],
            [
                3678,
                0,
                "    overscroll_behavior_y,"
            ],
            [
                3679,
                0,
                "    OverscrollBehaviorY,"
            ],
            [
                3680,
                0,
                "    CSS_PROPERTY_PARSE_VALUE,"
            ],
            [
                3681,
                0,
                "    \"layout.css.overscroll-behavior.enabled\","
            ],
            [
                3682,
                0,
                "    VARIANT_HK,"
            ],
            [
                3683,
                0,
                "    kOverscrollBehaviorKTable,"
            ],
            [
                3684,
                0,
                "    CSS_PROP_NO_OFFSET,"
            ],
            [
                3685,
                0,
                "    eStyleAnimType_Discrete)"
            ],
            [
                3686,
                3660,
                "CSS_PROP_DISPLAY("
            ],
            [
                3687,
                3661,
                "    scroll-snap-coordinate,"
            ],
            [
                3688,
                3662,
                "    scroll_snap_coordinate,"
            ],
            [
                3689,
                3663,
                "    ScrollSnapCoordinate,"
            ],
            [
                3690,
                3664,
                "    CSS_PROPERTY_PARSE_VALUE |"
            ],
            [
                3691,
                3665,
                "        CSS_PROPERTY_VALUE_PARSER_FUNCTION |"
            ],
            [
                3692,
                3666,
                "        CSS_PROPERTY_VALUE_LIST_USES_COMMAS |"
            ],
            [
                3693,
                3667,
                "        CSS_PROPERTY_STORES_CALC,"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsCSSProps.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 13,
        "lines": [
            [
                1934,
                1934,
                "};"
            ],
            [
                1935,
                1935,
                ""
            ],
            [
                1936,
                1936,
                "const KTableEntry nsCSSProps::kScrollBehaviorKTable[] = {"
            ],
            [
                1937,
                1937,
                "  { eCSSKeyword_auto,       NS_STYLE_SCROLL_BEHAVIOR_AUTO },"
            ],
            [
                1938,
                1938,
                "  { eCSSKeyword_smooth,     NS_STYLE_SCROLL_BEHAVIOR_SMOOTH },"
            ],
            [
                1939,
                1939,
                "  { eCSSKeyword_UNKNOWN,    -1 }"
            ],
            [
                1940,
                1940,
                "};"
            ],
            [
                1941,
                1941,
                ""
            ],
            [
                1942,
                0,
                "const KTableEntry nsCSSProps::kOverscrollBehaviorKTable[] = {"
            ],
            [
                1943,
                0,
                "  { eCSSKeyword_auto,       StyleOverscrollBehavior::Auto },"
            ],
            [
                1944,
                0,
                "  { eCSSKeyword_contain,    StyleOverscrollBehavior::Contain },"
            ],
            [
                1945,
                0,
                "  { eCSSKeyword_none,       StyleOverscrollBehavior::None },"
            ],
            [
                1946,
                0,
                "  { eCSSKeyword_UNKNOWN,    -1 }"
            ],
            [
                1947,
                0,
                "};"
            ],
            [
                1948,
                0,
                ""
            ],
            [
                1949,
                1942,
                "const KTableEntry nsCSSProps::kScrollSnapTypeKTable[] = {"
            ],
            [
                1950,
                1943,
                "  { eCSSKeyword_none,      NS_STYLE_SCROLL_SNAP_TYPE_NONE },"
            ],
            [
                1951,
                1944,
                "  { eCSSKeyword_mandatory, NS_STYLE_SCROLL_SNAP_TYPE_MANDATORY },"
            ],
            [
                1952,
                1945,
                "  { eCSSKeyword_proximity, NS_STYLE_SCROLL_SNAP_TYPE_PROXIMITY },"
            ],
            [
                1953,
                1946,
                "  { eCSSKeyword_UNKNOWN,   -1 }"
            ],
            [
                1954,
                1947,
                "};"
            ],
            [
                1955,
                1948,
                ""
            ],
            [
                1956,
                1949,
                "const KTableEntry nsCSSProps::kStackSizingKTable[] = {"
            ],
            [
                3005,
                2998,
                ""
            ],
            [
                3006,
                2999,
                "// Subproperty tables for shorthands that are just aliases with"
            ],
            [
                3007,
                3000,
                "// different parsing rules."
            ],
            [
                3008,
                3001,
                "static const nsCSSPropertyID gMozTransformSubpropTable[] = {"
            ],
            [
                3009,
                3002,
                "  eCSSProperty_transform,"
            ],
            [
                3010,
                3003,
                "  eCSSProperty_UNKNOWN"
            ],
            [
                3011,
                3004,
                "};"
            ],
            [
                3012,
                3005,
                ""
            ],
            [
                3013,
                0,
                "static const nsCSSPropertyID gOverscrollBehaviorSubpropTable[] = {"
            ],
            [
                3014,
                0,
                "  eCSSProperty_overscroll_behavior_x,"
            ],
            [
                3015,
                0,
                "  eCSSProperty_overscroll_behavior_y,"
            ],
            [
                3016,
                0,
                "  eCSSProperty_UNKNOWN"
            ],
            [
                3017,
                0,
                "};"
            ],
            [
                3018,
                0,
                ""
            ],
            [
                3019,
                3006,
                "static const nsCSSPropertyID gScrollSnapTypeSubpropTable[] = {"
            ],
            [
                3020,
                3007,
                "  eCSSProperty_scroll_snap_type_x,"
            ],
            [
                3021,
                3008,
                "  eCSSProperty_scroll_snap_type_y,"
            ],
            [
                3022,
                3009,
                "  eCSSProperty_UNKNOWN"
            ],
            [
                3023,
                3010,
                "};"
            ],
            [
                3024,
                3011,
                ""
            ],
            [
                3025,
                3012,
                "static const nsCSSPropertyID gMaskSubpropTable[] = {"
            ],
            [
                3026,
                3013,
                "  eCSSProperty_mask_image,"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsCSSProps.h",
        "binary": false,
        "count_add": 0,
        "count_del": 1,
        "lines": [
            [
                832,
                832,
                "  static const KTableEntry kPositionKTable[];"
            ],
            [
                833,
                833,
                "  static const KTableEntry kRadialGradientShapeKTable[];"
            ],
            [
                834,
                834,
                "  static const KTableEntry kRadialGradientSizeKTable[];"
            ],
            [
                835,
                835,
                "  static const KTableEntry kRadialGradientLegacySizeKTable[];"
            ],
            [
                836,
                836,
                "  static const KTableEntry kResizeKTable[];"
            ],
            [
                837,
                837,
                "  static const KTableEntry kRubyAlignKTable[];"
            ],
            [
                838,
                838,
                "  static const KTableEntry kRubyPositionKTable[];"
            ],
            [
                839,
                839,
                "  static const KTableEntry kScrollBehaviorKTable[];"
            ],
            [
                840,
                0,
                "  static const KTableEntry kOverscrollBehaviorKTable[];"
            ],
            [
                841,
                840,
                "  static const KTableEntry kScrollSnapTypeKTable[];"
            ],
            [
                842,
                841,
                "  static const KTableEntry kSpeakKTable[];"
            ],
            [
                843,
                842,
                "  static const KTableEntry kSpeakHeaderKTable[];"
            ],
            [
                844,
                843,
                "  static const KTableEntry kSpeakNumeralKTable[];"
            ],
            [
                845,
                844,
                "  static const KTableEntry kSpeakPunctuationKTable[];"
            ],
            [
                846,
                845,
                "  static const KTableEntry kSpeechRateKTable[];"
            ],
            [
                847,
                846,
                "  static const KTableEntry kStackSizingKTable[];"
            ],
            [
                848,
                847,
                "  static const KTableEntry kTableLayoutKTable[];"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsComputedDOMStyle.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 20,
        "lines": [
            [
                3618,
                3618,
                "  RefPtr<nsROCSSPrimitiveValue> val = new nsROCSSPrimitiveValue;"
            ],
            [
                3619,
                3619,
                "  val->SetIdent("
            ],
            [
                3620,
                3620,
                "    nsCSSProps::ValueToKeywordEnum(StyleDisplay()->mScrollBehavior,"
            ],
            [
                3621,
                3621,
                "                                   nsCSSProps::kScrollBehaviorKTable));"
            ],
            [
                3622,
                3622,
                "  return val.forget();"
            ],
            [
                3623,
                3623,
                "}"
            ],
            [
                3624,
                3624,
                ""
            ],
            [
                3625,
                3625,
                "already_AddRefed<CSSValue>"
            ],
            [
                3626,
                0,
                "nsComputedDOMStyle::DoGetOverscrollBehaviorX()"
            ],
            [
                3627,
                0,
                "{"
            ],
            [
                3628,
                0,
                "  RefPtr<nsROCSSPrimitiveValue> val = new nsROCSSPrimitiveValue;"
            ],
            [
                3629,
                0,
                "  val->SetIdent("
            ],
            [
                3630,
                0,
                "    nsCSSProps::ValueToKeywordEnum(StyleDisplay()->mOverscrollBehaviorX,"
            ],
            [
                3631,
                0,
                "                                   nsCSSProps::kOverscrollBehaviorKTable));"
            ],
            [
                3632,
                0,
                "  return val.forget();"
            ],
            [
                3633,
                0,
                "}"
            ],
            [
                3634,
                0,
                ""
            ],
            [
                3635,
                0,
                "already_AddRefed<CSSValue>"
            ],
            [
                3636,
                0,
                "nsComputedDOMStyle::DoGetOverscrollBehaviorY()"
            ],
            [
                3637,
                0,
                "{"
            ],
            [
                3638,
                0,
                "  RefPtr<nsROCSSPrimitiveValue> val = new nsROCSSPrimitiveValue;"
            ],
            [
                3639,
                0,
                "  val->SetIdent("
            ],
            [
                3640,
                0,
                "    nsCSSProps::ValueToKeywordEnum(StyleDisplay()->mOverscrollBehaviorY,"
            ],
            [
                3641,
                0,
                "                                   nsCSSProps::kOverscrollBehaviorKTable));"
            ],
            [
                3642,
                0,
                "  return val.forget();"
            ],
            [
                3643,
                0,
                "}"
            ],
            [
                3644,
                0,
                ""
            ],
            [
                3645,
                0,
                "already_AddRefed<CSSValue>"
            ],
            [
                3646,
                3626,
                "nsComputedDOMStyle::DoGetScrollSnapType()"
            ],
            [
                3647,
                3627,
                "{"
            ],
            [
                3648,
                3628,
                "  const nsStyleDisplay* display = StyleDisplay();"
            ],
            [
                3649,
                3629,
                "  if (display->mScrollSnapTypeX != display->mScrollSnapTypeY) {"
            ],
            [
                3650,
                3630,
                "    // No value to return.  We can't express this combination of"
            ],
            [
                3651,
                3631,
                "    // values as a shorthand."
            ],
            [
                3652,
                3632,
                "    return nullptr;"
            ],
            [
                3653,
                3633,
                "  }"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsComputedDOMStyle.h",
        "binary": false,
        "count_add": 0,
        "count_del": 2,
        "lines": [
            [
                511,
                511,
                "  already_AddRefed<CSSValue> DoGetTransformBox();"
            ],
            [
                512,
                512,
                "  already_AddRefed<CSSValue> DoGetTransformOrigin();"
            ],
            [
                513,
                513,
                "  already_AddRefed<CSSValue> DoGetPerspective();"
            ],
            [
                514,
                514,
                "  already_AddRefed<CSSValue> DoGetBackfaceVisibility();"
            ],
            [
                515,
                515,
                "  already_AddRefed<CSSValue> DoGetPerspectiveOrigin();"
            ],
            [
                516,
                516,
                "  already_AddRefed<CSSValue> DoGetTransformStyle();"
            ],
            [
                517,
                517,
                "  already_AddRefed<CSSValue> DoGetOrient();"
            ],
            [
                518,
                518,
                "  already_AddRefed<CSSValue> DoGetScrollBehavior();"
            ],
            [
                519,
                0,
                "  already_AddRefed<CSSValue> DoGetOverscrollBehaviorX();"
            ],
            [
                520,
                0,
                "  already_AddRefed<CSSValue> DoGetOverscrollBehaviorY();"
            ],
            [
                521,
                519,
                "  already_AddRefed<CSSValue> DoGetScrollSnapType();"
            ],
            [
                522,
                520,
                "  already_AddRefed<CSSValue> DoGetScrollSnapTypeX();"
            ],
            [
                523,
                521,
                "  already_AddRefed<CSSValue> DoGetScrollSnapTypeY();"
            ],
            [
                524,
                522,
                "  already_AddRefed<CSSValue> DoGetScrollSnapPointsX();"
            ],
            [
                525,
                523,
                "  already_AddRefed<CSSValue> DoGetScrollSnapPointsY();"
            ],
            [
                526,
                524,
                "  already_AddRefed<CSSValue> DoGetScrollSnapDestination();"
            ],
            [
                527,
                525,
                "  already_AddRefed<CSSValue> DoGetScrollSnapCoordinate();"
            ],
            [
                528,
                526,
                "  already_AddRefed<CSSValue> DoGetShapeOutside();"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsComputedDOMStylePropertyList.h",
        "binary": false,
        "count_add": 0,
        "count_del": 2,
        "lines": [
            [
                198,
                198,
                "COMPUTED_STYLE_PROP(outline_offset,                OutlineOffset)"
            ],
            [
                199,
                199,
                "COMPUTED_STYLE_PROP(outline_style,                 OutlineStyle)"
            ],
            [
                200,
                200,
                "COMPUTED_STYLE_PROP(outline_width,                 OutlineWidth)"
            ],
            [
                201,
                201,
                "COMPUTED_STYLE_PROP(overflow,                      Overflow)"
            ],
            [
                202,
                202,
                "COMPUTED_STYLE_PROP(overflow_clip_box,             OverflowClipBox)"
            ],
            [
                203,
                203,
                "COMPUTED_STYLE_PROP(overflow_wrap,                 OverflowWrap)"
            ],
            [
                204,
                204,
                "COMPUTED_STYLE_PROP(overflow_x,                    OverflowX)"
            ],
            [
                205,
                205,
                "COMPUTED_STYLE_PROP(overflow_y,                    OverflowY)"
            ],
            [
                206,
                0,
                "COMPUTED_STYLE_PROP(overscroll_behavior_x,         OverscrollBehaviorX)"
            ],
            [
                207,
                0,
                "COMPUTED_STYLE_PROP(overscroll_behavior_y,         OverscrollBehaviorY)"
            ],
            [
                208,
                206,
                "//// COMPUTED_STYLE_PROP(padding,                  Padding)"
            ],
            [
                209,
                207,
                "COMPUTED_STYLE_PROP(padding_bottom,                PaddingBottom)"
            ],
            [
                210,
                208,
                "COMPUTED_STYLE_PROP(padding_left,                  PaddingLeft)"
            ],
            [
                211,
                209,
                "COMPUTED_STYLE_PROP(padding_right,                 PaddingRight)"
            ],
            [
                212,
                210,
                "COMPUTED_STYLE_PROP(padding_top,                   PaddingTop)"
            ],
            [
                213,
                211,
                "// COMPUTED_STYLE_PROP(page,                       Page)"
            ],
            [
                214,
                212,
                "COMPUTED_STYLE_PROP(page_break_after,              PageBreakAfter)"
            ],
            [
                215,
                213,
                "COMPUTED_STYLE_PROP(page_break_before,             PageBreakBefore)"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsRuleNode.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 17,
        "lines": [
            [
                1432,
                1432,
                "  DEFINE_ENUM_CLASS_SETTER(StyleBoxPack, Start, Justify)"
            ],
            [
                1433,
                1433,
                "  DEFINE_ENUM_CLASS_SETTER(StyleBoxSizing, Content, Border)"
            ],
            [
                1434,
                1434,
                "  DEFINE_ENUM_CLASS_SETTER(StyleClear, None, Both)"
            ],
            [
                1435,
                1435,
                "  DEFINE_ENUM_CLASS_SETTER(StyleContent, OpenQuote, AltContent)"
            ],
            [
                1436,
                1436,
                "  DEFINE_ENUM_CLASS_SETTER(StyleFillRule, Nonzero, Evenodd)"
            ],
            [
                1437,
                1437,
                "  DEFINE_ENUM_CLASS_SETTER(StyleFloat, None, InlineEnd)"
            ],
            [
                1438,
                1438,
                "  DEFINE_ENUM_CLASS_SETTER(StyleFloatEdge, ContentBox, MarginBox)"
            ],
            [
                1439,
                1439,
                "  DEFINE_ENUM_CLASS_SETTER(StyleHyphens, None, Auto)"
            ],
            [
                1440,
                0,
                "  DEFINE_ENUM_CLASS_SETTER(StyleOverscrollBehavior, Auto, None)"
            ],
            [
                1441,
                1440,
                "  DEFINE_ENUM_CLASS_SETTER(StyleStackSizing, Ignore, IgnoreVertical)"
            ],
            [
                1442,
                1441,
                "  DEFINE_ENUM_CLASS_SETTER(StyleTextJustify, None, InterCharacter)"
            ],
            [
                1443,
                1442,
                "  DEFINE_ENUM_CLASS_SETTER(StyleUserFocus, None, SelectMenu)"
            ],
            [
                1444,
                1443,
                "  DEFINE_ENUM_CLASS_SETTER(StyleUserSelect, None, MozText)"
            ],
            [
                1445,
                1444,
                "  DEFINE_ENUM_CLASS_SETTER(StyleUserInput, None, Auto)"
            ],
            [
                1446,
                1445,
                "  DEFINE_ENUM_CLASS_SETTER(StyleUserModify, ReadOnly, WriteOnly)"
            ],
            [
                1447,
                1446,
                "  DEFINE_ENUM_CLASS_SETTER(StyleWindowDragging, Default, NoDrag)"
            ],
            [
                1448,
                1447,
                "  DEFINE_ENUM_CLASS_SETTER(StyleOrient, Inline, Vertical)"
            ],
            [
                5807,
                5806,
                "           NS_STYLE_CONTAIN_NONE, Unused, Unused);"
            ],
            [
                5808,
                5807,
                ""
            ],
            [
                5809,
                5808,
                "  // scroll-behavior: enum, inherit, initial"
            ],
            [
                5810,
                5809,
                "  SetValue(*aRuleData->ValueForScrollBehavior(), display->mScrollBehavior,"
            ],
            [
                5811,
                5810,
                "           conditions,"
            ],
            [
                5812,
                5811,
                "           SETVAL_ENUMERATED | SETVAL_UNSET_INITIAL,"
            ],
            [
                5813,
                5812,
                "           parentDisplay->mScrollBehavior, NS_STYLE_SCROLL_BEHAVIOR_AUTO);"
            ],
            [
                5814,
                5813,
                ""
            ],
            [
                5815,
                0,
                "  // overscroll-behavior-x: none, enum, inherit, initial"
            ],
            [
                5816,
                0,
                "  SetValue(*aRuleData->ValueForOverscrollBehaviorX(),"
            ],
            [
                5817,
                0,
                "           display->mOverscrollBehaviorX,"
            ],
            [
                5818,
                0,
                "           conditions,"
            ],
            [
                5819,
                0,
                "           SETVAL_ENUMERATED | SETVAL_UNSET_INITIAL,"
            ],
            [
                5820,
                0,
                "           parentDisplay->mOverscrollBehaviorX,"
            ],
            [
                5821,
                0,
                "           StyleOverscrollBehavior::Auto);"
            ],
            [
                5822,
                0,
                ""
            ],
            [
                5823,
                0,
                "  // overscroll-behavior-y: none, enum, inherit, initial"
            ],
            [
                5824,
                0,
                "  SetValue(*aRuleData->ValueForOverscrollBehaviorY(),"
            ],
            [
                5825,
                0,
                "           display->mOverscrollBehaviorY,"
            ],
            [
                5826,
                0,
                "           conditions,"
            ],
            [
                5827,
                0,
                "           SETVAL_ENUMERATED | SETVAL_UNSET_INITIAL,"
            ],
            [
                5828,
                0,
                "           parentDisplay->mOverscrollBehaviorY,"
            ],
            [
                5829,
                0,
                "           StyleOverscrollBehavior::Auto);"
            ],
            [
                5830,
                0,
                ""
            ],
            [
                5831,
                5814,
                "  // scroll-snap-type-x: none, enum, inherit, initial"
            ],
            [
                5832,
                5815,
                "  SetValue(*aRuleData->ValueForScrollSnapTypeX(), display->mScrollSnapTypeX,"
            ],
            [
                5833,
                5816,
                "           conditions,"
            ],
            [
                5834,
                5817,
                "           SETVAL_ENUMERATED | SETVAL_UNSET_INITIAL,"
            ],
            [
                5835,
                5818,
                "           parentDisplay->mScrollSnapTypeX, NS_STYLE_SCROLL_SNAP_TYPE_NONE);"
            ],
            [
                5836,
                5819,
                ""
            ],
            [
                5837,
                5820,
                "  // scroll-snap-type-y: none, enum, inherit, initial"
            ],
            [
                5838,
                5821,
                "  SetValue(*aRuleData->ValueForScrollSnapTypeY(), display->mScrollSnapTypeY,"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsStyleConsts.h",
        "binary": false,
        "count_add": 0,
        "count_del": 7,
        "lines": [
            [
                1183,
                1183,
                "#define NS_STYLE_COUNTER_SPEAKAS_WORDS      2"
            ],
            [
                1184,
                1184,
                "#define NS_STYLE_COUNTER_SPEAKAS_SPELL_OUT  3"
            ],
            [
                1185,
                1185,
                "#define NS_STYLE_COUNTER_SPEAKAS_OTHER      255 // refer to another style"
            ],
            [
                1186,
                1186,
                ""
            ],
            [
                1187,
                1187,
                "// See nsStyleDisplay::mScrollBehavior"
            ],
            [
                1188,
                1188,
                "#define NS_STYLE_SCROLL_BEHAVIOR_AUTO       0"
            ],
            [
                1189,
                1189,
                "#define NS_STYLE_SCROLL_BEHAVIOR_SMOOTH     1"
            ],
            [
                1190,
                1190,
                ""
            ],
            [
                1191,
                0,
                "// See nsStyleDisplay::mOverscrollBehavior{X,Y}"
            ],
            [
                1192,
                0,
                "enum class StyleOverscrollBehavior : uint8_t {"
            ],
            [
                1193,
                0,
                "  Auto = 0,"
            ],
            [
                1194,
                0,
                "  Contain,"
            ],
            [
                1195,
                0,
                "  None,"
            ],
            [
                1196,
                0,
                "};"
            ],
            [
                1197,
                0,
                ""
            ],
            [
                1198,
                1191,
                "// See nsStyleDisplay::mScrollSnapType{X,Y}"
            ],
            [
                1199,
                1192,
                "#define NS_STYLE_SCROLL_SNAP_TYPE_NONE              0"
            ],
            [
                1200,
                1193,
                "#define NS_STYLE_SCROLL_SNAP_TYPE_MANDATORY         1"
            ],
            [
                1201,
                1194,
                "#define NS_STYLE_SCROLL_SNAP_TYPE_PROXIMITY         2"
            ],
            [
                1202,
                1195,
                ""
            ],
            [
                1203,
                1196,
                "/*****************************************************************************"
            ],
            [
                1204,
                1197,
                " * Constants for media features.                                             *"
            ],
            [
                1205,
                1198,
                " *****************************************************************************/"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsStyleStruct.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 11,
        "lines": [
            [
                3563,
                3563,
                "  , mOverflowClipBox(NS_STYLE_OVERFLOW_CLIP_BOX_PADDING_BOX)"
            ],
            [
                3564,
                3564,
                "  , mResize(NS_STYLE_RESIZE_NONE)"
            ],
            [
                3565,
                3565,
                "  , mOrient(StyleOrient::Inline)"
            ],
            [
                3566,
                3566,
                "  , mIsolation(NS_STYLE_ISOLATION_AUTO)"
            ],
            [
                3567,
                3567,
                "  , mTopLayer(NS_STYLE_TOP_LAYER_NONE)"
            ],
            [
                3568,
                3568,
                "  , mWillChangeBitField(0)"
            ],
            [
                3569,
                3569,
                "  , mTouchAction(NS_STYLE_TOUCH_ACTION_AUTO)"
            ],
            [
                3570,
                3570,
                "  , mScrollBehavior(NS_STYLE_SCROLL_BEHAVIOR_AUTO)"
            ],
            [
                3571,
                0,
                "  , mOverscrollBehaviorX(StyleOverscrollBehavior::Auto)"
            ],
            [
                3572,
                0,
                "  , mOverscrollBehaviorY(StyleOverscrollBehavior::Auto)"
            ],
            [
                3573,
                3571,
                "  , mScrollSnapTypeX(NS_STYLE_SCROLL_SNAP_TYPE_NONE)"
            ],
            [
                3574,
                3572,
                "  , mScrollSnapTypeY(NS_STYLE_SCROLL_SNAP_TYPE_NONE)"
            ],
            [
                3575,
                3573,
                "  , mScrollSnapPointsX(eStyleUnit_None)"
            ],
            [
                3576,
                3574,
                "  , mScrollSnapPointsY(eStyleUnit_None)"
            ],
            [
                3577,
                3575,
                "  , mBackfaceVisibility(NS_STYLE_BACKFACE_VISIBILITY_VISIBLE)"
            ],
            [
                3578,
                3576,
                "  , mTransformStyle(NS_STYLE_TRANSFORM_STYLE_FLAT)"
            ],
            [
                3579,
                3577,
                "  , mTransformBox(StyleGeometryBox::BorderBox)"
            ],
            [
                3580,
                3578,
                "  , mSpecifiedTransform(nullptr)"
            ],
            [
                3628,
                3626,
                "  , mResize(aSource.mResize)"
            ],
            [
                3629,
                3627,
                "  , mOrient(aSource.mOrient)"
            ],
            [
                3630,
                3628,
                "  , mIsolation(aSource.mIsolation)"
            ],
            [
                3631,
                3629,
                "  , mTopLayer(aSource.mTopLayer)"
            ],
            [
                3632,
                3630,
                "  , mWillChangeBitField(aSource.mWillChangeBitField)"
            ],
            [
                3633,
                3631,
                "  , mWillChange(aSource.mWillChange)"
            ],
            [
                3634,
                3632,
                "  , mTouchAction(aSource.mTouchAction)"
            ],
            [
                3635,
                3633,
                "  , mScrollBehavior(aSource.mScrollBehavior)"
            ],
            [
                3636,
                0,
                "  , mOverscrollBehaviorX(aSource.mOverscrollBehaviorX)"
            ],
            [
                3637,
                0,
                "  , mOverscrollBehaviorY(aSource.mOverscrollBehaviorY)"
            ],
            [
                3638,
                3634,
                "  , mScrollSnapTypeX(aSource.mScrollSnapTypeX)"
            ],
            [
                3639,
                3635,
                "  , mScrollSnapTypeY(aSource.mScrollSnapTypeY)"
            ],
            [
                3640,
                3636,
                "  , mScrollSnapPointsX(aSource.mScrollSnapPointsX)"
            ],
            [
                3641,
                3637,
                "  , mScrollSnapPointsY(aSource.mScrollSnapPointsY)"
            ],
            [
                3642,
                3638,
                "  , mScrollSnapDestination(aSource.mScrollSnapDestination)"
            ],
            [
                3643,
                3639,
                "  , mScrollSnapCoordinate(aSource.mScrollSnapCoordinate)"
            ],
            [
                3644,
                3640,
                "  , mBackfaceVisibility(aSource.mBackfaceVisibility)"
            ],
            [
                3645,
                3641,
                "  , mTransformStyle(aSource.mTransformStyle)"
            ],
            [
                3894,
                3890,
                "  }"
            ],
            [
                3895,
                3891,
                ""
            ],
            [
                3896,
                3892,
                "  // If touch-action is changed, we need to regenerate the event regions on"
            ],
            [
                3897,
                3893,
                "  // the layers and send it over to the compositor for APZ to handle."
            ],
            [
                3898,
                3894,
                "  if (mTouchAction != aNewData.mTouchAction) {"
            ],
            [
                3899,
                3895,
                "    hint |= nsChangeHint_RepaintFrame;"
            ],
            [
                3900,
                3896,
                "  }"
            ],
            [
                3901,
                3897,
                ""
            ],
            [
                3902,
                0,
                "  // If overscroll-behavior has changed, the changes are picked up"
            ],
            [
                3903,
                0,
                "  // during a repaint."
            ],
            [
                3904,
                0,
                "  if (mOverscrollBehaviorX != aNewData.mOverscrollBehaviorX ||"
            ],
            [
                3905,
                0,
                "      mOverscrollBehaviorY != aNewData.mOverscrollBehaviorY) {"
            ],
            [
                3906,
                0,
                "    hint |= nsChangeHint_SchedulePaint;"
            ],
            [
                3907,
                0,
                "  }"
            ],
            [
                3908,
                0,
                ""
            ],
            [
                3909,
                3898,
                "  // Note:  Our current behavior for handling changes to the"
            ],
            [
                3910,
                3899,
                "  // transition-duration, transition-delay, and transition-timing-function"
            ],
            [
                3911,
                3900,
                "  // properties is to do nothing.  In other words, the transition"
            ],
            [
                3912,
                3901,
                "  // property that matters is what it is when the transition begins, and"
            ],
            [
                3913,
                3902,
                "  // we don't stop a transition later because the transition property"
            ],
            [
                3914,
                3903,
                "  // changed."
            ],
            [
                3915,
                3904,
                "  // We do handle changes to transition-property, but we don't need to"
            ],
            [
                3916,
                3905,
                "  // bother with anything here, since the transition manager is notified"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/nsStyleStruct.h",
        "binary": false,
        "count_add": 0,
        "count_del": 2,
        "lines": [
            [
                2582,
                2582,
                "                                // that are frequently queried. This should"
            ],
            [
                2583,
                2583,
                "                                // match mWillChange. Also tracks if any of the"
            ],
            [
                2584,
                2584,
                "                                // properties in the will-change list require"
            ],
            [
                2585,
                2585,
                "                                // a stacking context."
            ],
            [
                2586,
                2586,
                "  nsTArray<RefPtr<nsAtom>> mWillChange;"
            ],
            [
                2587,
                2587,
                ""
            ],
            [
                2588,
                2588,
                "  uint8_t mTouchAction;         // [reset] see nsStyleConsts.h"
            ],
            [
                2589,
                2589,
                "  uint8_t mScrollBehavior;      // [reset] see nsStyleConsts.h NS_STYLE_SCROLL_BEHAVIOR_*"
            ],
            [
                2590,
                0,
                "  mozilla::StyleOverscrollBehavior mOverscrollBehaviorX;  // [reset] see nsStyleConsts.h"
            ],
            [
                2591,
                0,
                "  mozilla::StyleOverscrollBehavior mOverscrollBehaviorY;  // [reset] see nsStyleConsts.h"
            ],
            [
                2592,
                2590,
                "  uint8_t mScrollSnapTypeX;     // [reset] see nsStyleConsts.h NS_STYLE_SCROLL_SNAP_TYPE_*"
            ],
            [
                2593,
                2591,
                "  uint8_t mScrollSnapTypeY;     // [reset] see nsStyleConsts.h NS_STYLE_SCROLL_SNAP_TYPE_*"
            ],
            [
                2594,
                2592,
                "  nsStyleCoord mScrollSnapPointsX; // [reset]"
            ],
            [
                2595,
                2593,
                "  nsStyleCoord mScrollSnapPointsY; // [reset]"
            ],
            [
                2596,
                2594,
                "  mozilla::Position mScrollSnapDestination; // [reset]"
            ],
            [
                2597,
                2595,
                "  nsTArray<mozilla::Position> mScrollSnapCoordinate; // [reset]"
            ],
            [
                2598,
                2596,
                ""
            ],
            [
                2599,
                2597,
                "  // mSpecifiedTransform is the list of transform functions as"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/test/mochitest.ini",
        "binary": false,
        "count_add": 0,
        "count_del": 1,
        "lines": [
            [
                250,
                250,
                "[test_media_queries_dynamic.html]"
            ],
            [
                251,
                251,
                "[test_media_queries_dynamic_xbl.html]"
            ],
            [
                252,
                252,
                "[test_media_query_list.html]"
            ],
            [
                253,
                253,
                "[test_media_query_serialization.html]"
            ],
            [
                254,
                254,
                "[test_moz_device_pixel_ratio.html]"
            ],
            [
                255,
                255,
                "[test_namespace_rule.html]"
            ],
            [
                256,
                256,
                "[test_non_content_accessible_properties.html]"
            ],
            [
                257,
                257,
                "[test_of_type_selectors.xhtml]"
            ],
            [
                258,
                0,
                "[test_overscroll_behavior_pref.html]"
            ],
            [
                259,
                258,
                "[test_page_parser.html]"
            ],
            [
                260,
                259,
                "[test_parse_eof.html]"
            ],
            [
                261,
                260,
                "[test_parse_ident.html]"
            ],
            [
                262,
                261,
                "[test_parse_rule.html]"
            ],
            [
                263,
                262,
                "[test_parse_url.html]"
            ],
            [
                264,
                263,
                "[test_parser_diagnostics_unprintables.html]"
            ],
            [
                265,
                264,
                "[test_pixel_lengths.html]"
            ],
            [
                266,
                265,
                "[test_pointer-events.html]"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "layout/style/test/property_database.js",
        "binary": false,
        "count_add": 0,
        "count_del": 28,
        "lines": [
            [
                7447,
                7447,
                "    inherited: false,"
            ],
            [
                7448,
                7448,
                "    type: CSS_TYPE_LONGHAND,"
            ],
            [
                7449,
                7449,
                "    initial_values: [ \"auto\" ],"
            ],
            [
                7450,
                7450,
                "    other_values: [ \"smooth\" ],"
            ],
            [
                7451,
                7451,
                "    invalid_values: [ \"none\",  \"1px\" ]"
            ],
            [
                7452,
                7452,
                "  };"
            ],
            [
                7453,
                7453,
                "}"
            ],
            [
                7454,
                7454,
                ""
            ],
            [
                7455,
                0,
                "if (IsCSSPropertyPrefEnabled(\"layout.css.overscroll-behavior.enabled\")) {"
            ],
            [
                7456,
                0,
                "  gCSSProperties[\"overscroll-behavior-x\"] = {"
            ],
            [
                7457,
                0,
                "    domProp: \"overscrollBehaviorX\","
            ],
            [
                7458,
                0,
                "    inherited: false,"
            ],
            [
                7459,
                0,
                "    type: CSS_TYPE_LONGHAND,"
            ],
            [
                7460,
                0,
                "    initial_values: [ \"auto\" ],"
            ],
            [
                7461,
                0,
                "    other_values: [ \"contain\", \"none\" ],"
            ],
            [
                7462,
                0,
                "    invalid_values: [ \"left\", \"1px\" ]"
            ],
            [
                7463,
                0,
                "  };"
            ],
            [
                7464,
                0,
                "  gCSSProperties[\"overscroll-behavior-y\"] = {"
            ],
            [
                7465,
                0,
                "    domProp: \"overscrollBehaviorY\","
            ],
            [
                7466,
                0,
                "    inherited: false,"
            ],
            [
                7467,
                0,
                "    type: CSS_TYPE_LONGHAND,"
            ],
            [
                7468,
                0,
                "    initial_values: [ \"auto\" ],"
            ],
            [
                7469,
                0,
                "    other_values: [ \"contain\", \"none\" ],"
            ],
            [
                7470,
                0,
                "    invalid_values: [ \"left\", \"1px\" ]"
            ],
            [
                7471,
                0,
                "  };"
            ],
            [
                7472,
                0,
                "  gCSSProperties[\"overscroll-behavior\"] = {"
            ],
            [
                7473,
                0,
                "    domProp: \"overscrollBehavior\","
            ],
            [
                7474,
                0,
                "    inherited: false,"
            ],
            [
                7475,
                0,
                "    type: CSS_TYPE_TRUE_SHORTHAND,"
            ],
            [
                7476,
                0,
                "    subproperties: [ \"overscroll-behavior-x\", \"overscroll-behavior-y\" ],"
            ],
            [
                7477,
                0,
                "    initial_values: [ \"auto\" ],"
            ],
            [
                7478,
                0,
                "    other_values: [ \"contain\", \"none\", \"contain contain\", \"contain auto\", \"none contain\" ],"
            ],
            [
                7479,
                0,
                "    invalid_values: [ \"left\", \"1px\", \"contain auto none\", \"contain nonsense\" ]"
            ],
            [
                7480,
                0,
                "  };"
            ],
            [
                7481,
                0,
                "}"
            ],
            [
                7482,
                0,
                ""
            ],
            [
                7483,
                7455,
                "if (IsCSSPropertyPrefEnabled(\"layout.css.scroll-snap.enabled\")) {"
            ],
            [
                7484,
                7456,
                "  gCSSProperties[\"scroll-snap-coordinate\"] = {"
            ],
            [
                7485,
                7457,
                "    domProp: \"scrollSnapCoordinate\","
            ],
            [
                7486,
                7458,
                "    inherited: false,"
            ],
            [
                7487,
                7459,
                "    type: CSS_TYPE_LONGHAND,"
            ],
            [
                7488,
                7460,
                "    initial_values: [ \"none\" ],"
            ],
            [
                7489,
                7461,
                "    other_values: [ \"25% 25%\", \"top\", \"0px 100px, 10em 50%\","
            ],
            [
                7490,
                7462,
                "                    \"top left, top right, bottom left, bottom right, center\","
            ]
        ]
    },
    {
        "new": false,
        "deleted": true,
        "renamed_from": null,
        "filename": "layout/style/test/test_overscroll_behavior_pref.html",
        "binary": false,
        "count_add": 0,
        "count_del": 24,
        "lines": [
            [
                1,
                0,
                "<!doctype html>"
            ],
            [
                2,
                0,
                "<html>"
            ],
            [
                3,
                0,
                "  <head>"
            ],
            [
                4,
                0,
                "    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">"
            ],
            [
                5,
                0,
                "    <title>Test pref for overscroll-behavior property</title>"
            ],
            [
                6,
                0,
                "    <script type=\"text/javascript\" src=\"/tests/SimpleTest/SimpleTest.js\"></script>"
            ],
            [
                7,
                0,
                "  </head>"
            ],
            [
                8,
                0,
                "<script class=\"testbody\" type=\"text/javascript\">"
            ],
            [
                9,
                0,
                "function runTest() {"
            ],
            [
                10,
                0,
                "  let css = \"div { overscroll-behavior: auto; }\";"
            ],
            [
                11,
                0,
                "  let style = document.createElement('style');"
            ],
            [
                12,
                0,
                "  style.appendChild(document.createTextNode(css));"
            ],
            [
                13,
                0,
                "  document.head.appendChild(style);"
            ],
            [
                14,
                0,
                ""
            ],
            [
                15,
                0,
                "  is(document.styleSheets[0].cssRules[0].style.length,"
            ],
            [
                16,
                0,
                "     0,"
            ],
            [
                17,
                0,
                "     \"overscroll-behavior shouldn't be parsed if the pref is off\");"
            ],
            [
                18,
                0,
                "  SimpleTest.finish();"
            ],
            [
                19,
                0,
                "}"
            ],
            [
                20,
                0,
                "SpecialPowers.pushPrefEnv({ set: [[\"layout.css.overscroll-behavior.enabled\", false]] },"
            ],
            [
                21,
                0,
                "                          runTest);"
            ],
            [
                22,
                0,
                "SimpleTest.waitForExplicitFinish();"
            ],
            [
                23,
                0,
                "</script>"
            ],
            [
                24,
                0,
                "</html>"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "modules/libpref/init/all.js",
        "binary": false,
        "count_add": 0,
        "count_del": 7,
        "lines": [
            [
                3026,
                3026,
                "#endif"
            ],
            [
                3027,
                3027,
                ""
            ],
            [
                3028,
                3028,
                "// Is support for column-span enabled?"
            ],
            [
                3029,
                3029,
                "pref(\"layout.css.column-span.enabled\", false);"
            ],
            [
                3030,
                3030,
                ""
            ],
            [
                3031,
                3031,
                "// Are inter-character ruby annotations enabled?"
            ],
            [
                3032,
                3032,
                "pref(\"layout.css.ruby.intercharacter.enabled\", false);"
            ],
            [
                3033,
                3033,
                ""
            ],
            [
                3034,
                0,
                "// Is support for overscroll-behavior enabled?"
            ],
            [
                3035,
                0,
                "#ifdef RELEASE_OR_BETA"
            ],
            [
                3036,
                0,
                "pref(\"layout.css.overscroll-behavior.enabled\", false);"
            ],
            [
                3037,
                0,
                "#else"
            ],
            [
                3038,
                0,
                "pref(\"layout.css.overscroll-behavior.enabled\", true);"
            ],
            [
                3039,
                0,
                "#endif"
            ],
            [
                3040,
                0,
                ""
            ],
            [
                3041,
                3034,
                "// pref for which side vertical scrollbars should be on"
            ],
            [
                3042,
                3035,
                "// 0 = end-side in UI direction"
            ],
            [
                3043,
                3036,
                "// 1 = end-side in document/content direction"
            ],
            [
                3044,
                3037,
                "// 2 = right"
            ],
            [
                3045,
                3038,
                "// 3 = left"
            ],
            [
                3046,
                3039,
                "pref(\"layout.scrollbar.side\", 0);"
            ],
            [
                3047,
                3040,
                ""
            ],
            [
                3048,
                3041,
                "// pref to stop overlay scrollbars from fading out, for testing purposes"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "testing/web-platform/tests/css/cssom-view/overscrollBehavior-manual.html",
        "binary": false,
        "count_add": 0,
        "count_del": 1,
        "lines": [
            [
                47,
                47,
                "  <li id=\"i1\">Make two scrolls on <span style=\"color: blue\">BLUE</span>, in this order: scroll UP (or drag down), then scroll LEFT (or drag right). Scroll (or drag) until nothing is scrolling. Then tap on DONE.</li>"
            ],
            [
                48,
                48,
                "  <li id=\"i2\">Repeat the same scrolls as in step 1 and then tap on DONE.</li>"
            ],
            [
                49,
                49,
                "  <li id=\"i3\">Repeat the same scrolls as in step 1 and then tap on DONE.</li>"
            ],
            [
                50,
                50,
                "  <li id=\"i4\">Make two separate scrolls on <span style=\"color: green\">GREEN</span>, in this order: scroll UP (or drag down), then scroll LEFT (or drag right). Scroll (or drag) until nothing is scrolling. Then tap on DONE.</li>"
            ],
            [
                51,
                51,
                "</ol>"
            ],
            [
                52,
                52,
                ""
            ],
            [
                53,
                53,
                ""
            ],
            [
                54,
                54,
                "<script>"
            ],
            [
                55,
                0,
                "setup({explicit_timeout: true});"
            ],
            [
                56,
                55,
                "const container = document.getElementById('container');"
            ],
            [
                57,
                56,
                "const non_scrollable = document.getElementById('non_scrollable');"
            ],
            [
                58,
                57,
                "const root = document.getElementById('root');"
            ],
            [
                59,
                58,
                "var test = async_test(\"overscroll-behavior prevents scroll-propagation in the area and direction as specified\");"
            ],
            [
                60,
                59,
                "var instruction1 = document.getElementById(\"i1\");"
            ],
            [
                61,
                60,
                "var instruction2 = document.getElementById(\"i2\");"
            ],
            [
                62,
                61,
                "var instruction3 = document.getElementById(\"i3\");"
            ],
            [
                63,
                62,
                "var instruction4 = document.getElementById(\"i4\");"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "widget/InputData.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 2,
        "lines": [
            [
                485,
                485,
                "  : InputData(PANGESTURE_INPUT)"
            ],
            [
                486,
                486,
                "  , mLineOrPageDeltaX(0)"
            ],
            [
                487,
                487,
                "  , mLineOrPageDeltaY(0)"
            ],
            [
                488,
                488,
                "  , mUserDeltaMultiplierX(1.0)"
            ],
            [
                489,
                489,
                "  , mUserDeltaMultiplierY(1.0)"
            ],
            [
                490,
                490,
                "  , mHandledByAPZ(false)"
            ],
            [
                491,
                491,
                "  , mFollowedByMomentum(false)"
            ],
            [
                492,
                492,
                "  , mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection(false)"
            ],
            [
                493,
                0,
                "  , mOverscrollBehaviorAllowsSwipe(false)"
            ],
            [
                494,
                493,
                "{"
            ],
            [
                495,
                494,
                "}"
            ],
            [
                496,
                495,
                ""
            ],
            [
                497,
                496,
                "PanGestureInput::PanGestureInput(PanGestureType aType, uint32_t aTime,"
            ],
            [
                498,
                497,
                "                                 TimeStamp aTimeStamp,"
            ],
            [
                499,
                498,
                "                                 const ScreenPoint& aPanStartPoint,"
            ],
            [
                500,
                499,
                "                                 const ScreenPoint& aPanDisplacement,"
            ],
            [
                501,
                500,
                "                                 Modifiers aModifiers)"
            ],
            [
                505,
                504,
                "  , mPanDisplacement(aPanDisplacement)"
            ],
            [
                506,
                505,
                "  , mLineOrPageDeltaX(0)"
            ],
            [
                507,
                506,
                "  , mLineOrPageDeltaY(0)"
            ],
            [
                508,
                507,
                "  , mUserDeltaMultiplierX(1.0)"
            ],
            [
                509,
                508,
                "  , mUserDeltaMultiplierY(1.0)"
            ],
            [
                510,
                509,
                "  , mHandledByAPZ(false)"
            ],
            [
                511,
                510,
                "  , mFollowedByMomentum(false)"
            ],
            [
                512,
                511,
                "  , mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection(false)"
            ],
            [
                513,
                0,
                "  , mOverscrollBehaviorAllowsSwipe(false)"
            ],
            [
                514,
                512,
                "{"
            ],
            [
                515,
                513,
                "}"
            ],
            [
                516,
                514,
                ""
            ],
            [
                517,
                515,
                "bool"
            ],
            [
                518,
                516,
                "PanGestureInput::IsMomentum() const"
            ],
            [
                519,
                517,
                "{"
            ],
            [
                520,
                518,
                "  switch (mType) {"
            ],
            [
                521,
                519,
                "    case PanGestureInput::PANGESTURE_MOMENTUMSTART:"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "widget/InputData.h",
        "binary": false,
        "count_add": 0,
        "count_del": 8,
        "lines": [
            [
                380,
                380,
                ""
            ],
            [
                381,
                381,
                "  // If this is true, and this event started a new input block that couldn't"
            ],
            [
                382,
                382,
                "  // find a scrollable target which is scrollable in the horizontal component"
            ],
            [
                383,
                383,
                "  // of the scroll start direction, then this input block needs to be put on"
            ],
            [
                384,
                384,
                "  // hold until a content response has arrived, even if the block has a"
            ],
            [
                385,
                385,
                "  // confirmed target."
            ],
            [
                386,
                386,
                "  // This is used by events that can result in a swipe instead of a scroll."
            ],
            [
                387,
                387,
                "  bool mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection;"
            ],
            [
                388,
                0,
                ""
            ],
            [
                389,
                0,
                "  // This is used by APZ to communicate to the macOS widget code whether"
            ],
            [
                390,
                0,
                "  // the overscroll-behavior of the scroll frame handling this swipe allows"
            ],
            [
                391,
                0,
                "  // non-local overscroll behaviors in the horizontal direction (such as"
            ],
            [
                392,
                0,
                "  // swipe navigation)."
            ],
            [
                393,
                0,
                "  bool mOverscrollBehaviorAllowsSwipe;"
            ],
            [
                394,
                0,
                ""
            ],
            [
                395,
                0,
                "  // XXX: If adding any more bools, switch to using bitfields instead."
            ],
            [
                396,
                388,
                "};"
            ],
            [
                397,
                389,
                ""
            ],
            [
                398,
                390,
                "/**"
            ],
            [
                399,
                391,
                " * Encapsulation class for pinch events. In general, these will be generated by"
            ],
            [
                400,
                392,
                " * a gesture listener by looking at SingleTouchData/MultiTouchInput instances and"
            ],
            [
                401,
                393,
                " * determining whether or not the user was trying to do a gesture."
            ],
            [
                402,
                394,
                " */"
            ],
            [
                403,
                395,
                "class PinchGestureInput : public InputData"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "widget/cocoa/nsChildView.mm",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                2918,
                2918,
                "        result = mAPZC->ReceiveInputEvent(aEvent, &guid, &inputBlockId);"
            ],
            [
                2919,
                2919,
                "        if (result == nsEventStatus_eConsumeNoDefault) {"
            ],
            [
                2920,
                2920,
                "          return;"
            ],
            [
                2921,
                2921,
                "        }"
            ],
            [
                2922,
                2922,
                ""
            ],
            [
                2923,
                2923,
                "        PanGestureInput& panInput = aEvent.AsPanGestureInput();"
            ],
            [
                2924,
                2924,
                ""
            ],
            [
                2925,
                2925,
                "        event = panInput.ToWidgetWheelEvent(this);"
            ],
            [
                2926,
                0,
                "        if (aCanTriggerSwipe && panInput.mOverscrollBehaviorAllowsSwipe) {"
            ],
            [
                0,
                2926,
                "        if (aCanTriggerSwipe) {"
            ],
            [
                2927,
                2927,
                "          SwipeInfo swipeInfo = SendMayStartSwipe(panInput);"
            ],
            [
                2928,
                2928,
                "          event.mCanTriggerSwipe = swipeInfo.wantsSwipe;"
            ],
            [
                2929,
                2929,
                "          if (swipeInfo.wantsSwipe) {"
            ],
            [
                2930,
                2930,
                "            if (result == nsEventStatus_eIgnore) {"
            ],
            [
                2931,
                2931,
                "              // APZ has determined and that scrolling horizontally in the"
            ],
            [
                2932,
                2932,
                "              // requested direction is impossible, so it didn't do any"
            ],
            [
                2933,
                2933,
                "              // scrolling for the event."
            ],
            [
                2934,
                2934,
                "              // We know now that MayStartSwipe wants a swipe, so we can start"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "widget/nsGUIEventIPC.h",
        "binary": false,
        "count_add": 1,
        "count_del": 3,
        "lines": [
            [
                1220,
                1220,
                "    WriteParam(aMsg, aParam.mLocalPanDisplacement);"
            ],
            [
                1221,
                1221,
                "    WriteParam(aMsg, aParam.mLineOrPageDeltaX);"
            ],
            [
                1222,
                1222,
                "    WriteParam(aMsg, aParam.mLineOrPageDeltaY);"
            ],
            [
                1223,
                1223,
                "    WriteParam(aMsg, aParam.mUserDeltaMultiplierX);"
            ],
            [
                1224,
                1224,
                "    WriteParam(aMsg, aParam.mUserDeltaMultiplierY);"
            ],
            [
                1225,
                1225,
                "    WriteParam(aMsg, aParam.mHandledByAPZ);"
            ],
            [
                1226,
                1226,
                "    WriteParam(aMsg, aParam.mFollowedByMomentum);"
            ],
            [
                1227,
                1227,
                "    WriteParam(aMsg, aParam.mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection);"
            ],
            [
                1228,
                0,
                "    WriteParam(aMsg, aParam.mOverscrollBehaviorAllowsSwipe);"
            ],
            [
                1229,
                1228,
                "  }"
            ],
            [
                1230,
                1229,
                ""
            ],
            [
                1231,
                1230,
                "  static bool Read(const Message* aMsg, PickleIterator* aIter, paramType* aResult)"
            ],
            [
                1232,
                1231,
                "  {"
            ],
            [
                1233,
                1232,
                "    return ReadParam(aMsg, aIter, static_cast<mozilla::InputData*>(aResult)) &&"
            ],
            [
                1234,
                1233,
                "           ReadParam(aMsg, aIter, &aResult->mType) &&"
            ],
            [
                1235,
                1234,
                "           ReadParam(aMsg, aIter, &aResult->mPanStartPoint) &&"
            ],
            [
                1236,
                1235,
                "           ReadParam(aMsg, aIter, &aResult->mPanDisplacement) &&"
            ],
            [
                1237,
                1236,
                "           ReadParam(aMsg, aIter, &aResult->mLocalPanStartPoint) &&"
            ],
            [
                1238,
                1237,
                "           ReadParam(aMsg, aIter, &aResult->mLocalPanDisplacement) &&"
            ],
            [
                1239,
                1238,
                "           ReadParam(aMsg, aIter, &aResult->mLineOrPageDeltaX) &&"
            ],
            [
                1240,
                1239,
                "           ReadParam(aMsg, aIter, &aResult->mLineOrPageDeltaY) &&"
            ],
            [
                1241,
                1240,
                "           ReadParam(aMsg, aIter, &aResult->mUserDeltaMultiplierX) &&"
            ],
            [
                1242,
                1241,
                "           ReadParam(aMsg, aIter, &aResult->mUserDeltaMultiplierY) &&"
            ],
            [
                1243,
                1242,
                "           ReadParam(aMsg, aIter, &aResult->mHandledByAPZ) &&"
            ],
            [
                1244,
                1243,
                "           ReadParam(aMsg, aIter, &aResult->mFollowedByMomentum) &&"
            ],
            [
                1245,
                0,
                "           ReadParam(aMsg, aIter, &aResult->mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection) &&"
            ],
            [
                1246,
                0,
                "           ReadParam(aMsg, aIter, &aResult->mOverscrollBehaviorAllowsSwipe);"
            ],
            [
                0,
                1244,
                "           ReadParam(aMsg, aIter, &aResult->mRequiresContentResponseIfCannotScrollHorizontallyInStartDirection);"
            ],
            [
                1247,
                1245,
                "  }"
            ],
            [
                1248,
                1246,
                "};"
            ],
            [
                1249,
                1247,
                ""
            ],
            [
                1250,
                1248,
                "template<>"
            ],
            [
                1251,
                1249,
                "struct ParamTraits<mozilla::PinchGestureInput::PinchGestureType>"
            ],
            [
                1252,
                1250,
                "  : public ContiguousEnumSerializerInclusive<"
            ],
            [
                1253,
                1251,
                "             mozilla::PinchGestureInput::PinchGestureType,"
            ],
            [
                1254,
                1252,
                "             mozilla::PinchGestureInput::PinchGestureType::PINCHGESTURE_START,"
            ]
        ]
    }
]