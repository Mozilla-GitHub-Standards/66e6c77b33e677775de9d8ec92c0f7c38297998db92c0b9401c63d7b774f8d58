[
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/browser.ini",
        "binary": false,
        "count_add": 1,
        "count_del": 0,
        "lines": [
            [
                1,
                1,
                "[DEFAULT]"
            ],
            [
                2,
                2,
                "subsuite = screenshots"
            ],
            [
                3,
                3,
                "support-files ="
            ],
            [
                4,
                4,
                "  head.js"
            ],
            [
                5,
                5,
                ""
            ],
            [
                6,
                6,
                "[browser_screenshots.js]"
            ],
            [
                0,
                7,
                "[browser_screenshots_cropping.js]"
            ],
            [
                7,
                8,
                "[browser_boundingbox.js]"
            ]
        ]
    },
    {
        "new": true,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/browser_screenshots_cropping.js",
        "binary": false,
        "count_add": 82,
        "count_del": 0,
        "lines": [
            [
                0,
                1,
                "/* This Source Code Form is subject to the terms of the Mozilla Public"
            ],
            [
                0,
                2,
                " * License, v. 2.0. If a copy of the MPL was not distributed with this"
            ],
            [
                0,
                3,
                " * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
            ],
            [
                0,
                4,
                ""
            ],
            [
                0,
                5,
                "\"use strict\";"
            ],
            [
                0,
                6,
                ""
            ],
            [
                0,
                7,
                "Cu.import(\"resource://gre/modules/Geometry.jsm\", this);"
            ],
            [
                0,
                8,
                ""
            ],
            [
                0,
                9,
                "async function draw(window, src) {"
            ],
            [
                0,
                10,
                "  const { document, Image } = window;"
            ],
            [
                0,
                11,
                ""
            ],
            [
                0,
                12,
                "  const promise = new Promise((resolve, reject) => {"
            ],
            [
                0,
                13,
                "    const img = new Image();"
            ],
            [
                0,
                14,
                ""
            ],
            [
                0,
                15,
                "    img.onload = function() {"
            ],
            [
                0,
                16,
                "      // Create a new offscreen canvas"
            ],
            [
                0,
                17,
                "      const canvas = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\");"
            ],
            [
                0,
                18,
                "      canvas.width = img.naturalWidth;"
            ],
            [
                0,
                19,
                "      canvas.height = img.naturalHeight;"
            ],
            [
                0,
                20,
                "      const ctx = canvas.getContext(\"2d\");"
            ],
            [
                0,
                21,
                ""
            ],
            [
                0,
                22,
                "      ctx.drawImage(img, 0, 0);"
            ],
            [
                0,
                23,
                ""
            ],
            [
                0,
                24,
                "      resolve(canvas);"
            ],
            [
                0,
                25,
                "    };"
            ],
            [
                0,
                26,
                ""
            ],
            [
                0,
                27,
                "    img.onerror = function() {"
            ],
            [
                0,
                28,
                "      reject(`error loading image ${src}`);"
            ],
            [
                0,
                29,
                "    };"
            ],
            [
                0,
                30,
                ""
            ],
            [
                0,
                31,
                "    // Load the src image for drawing"
            ],
            [
                0,
                32,
                "    img.src = src;"
            ],
            [
                0,
                33,
                "  });"
            ],
            [
                0,
                34,
                ""
            ],
            [
                0,
                35,
                "  return promise;"
            ],
            [
                0,
                36,
                "}"
            ],
            [
                0,
                37,
                ""
            ],
            [
                0,
                38,
                "async function compareImages(window, expected, test) {"
            ],
            [
                0,
                39,
                "  const testCanvas = await draw(window, test);"
            ],
            [
                0,
                40,
                "  const expectedCanvas = await draw(window, expected);"
            ],
            [
                0,
                41,
                ""
            ],
            [
                0,
                42,
                "  is(testCanvas.width, expectedCanvas.width, \"The test and expected images must be the same size\");"
            ],
            [
                0,
                43,
                "  is(testCanvas.height, expectedCanvas.height, \"The test and expected images must be the same size\");"
            ],
            [
                0,
                44,
                ""
            ],
            [
                0,
                45,
                "  const nsIDOMWindowUtils = window.getInterface(Ci.nsIDOMWindowUtils);"
            ],
            [
                0,
                46,
                "  return nsIDOMWindowUtils.compareCanvases(expectedCanvas, testCanvas, {});"
            ],
            [
                0,
                47,
                "}"
            ],
            [
                0,
                48,
                ""
            ],
            [
                0,
                49,
                "async function cropAndCompare(window, src, expected, test, region) {"
            ],
            [
                0,
                50,
                "  await TestRunner._cropImage(window, src, region, test);"
            ],
            [
                0,
                51,
                ""
            ],
            [
                0,
                52,
                "  return compareImages(window, expected, OS.Path.toFileURI(test));"
            ],
            [
                0,
                53,
                "}"
            ],
            [
                0,
                54,
                ""
            ],
            [
                0,
                55,
                "add_task(async function crop() {"
            ],
            [
                0,
                56,
                "  const window = Services.wm.getMostRecentWindow(\"navigator:browser\");"
            ],
            [
                0,
                57,
                ""
            ],
            [
                0,
                58,
                "  const tmp = OS.Constants.Path.tmpDir;"
            ],
            [
                0,
                59,
                "  is(await cropAndCompare("
            ],
            [
                0,
                60,
                "      window,"
            ],
            [
                0,
                61,
                "      \"chrome://mozscreenshots/content/lib/robot.png\","
            ],
            [
                0,
                62,
                "      \"chrome://mozscreenshots/content/lib/robot_upperleft.png\","
            ],
            [
                0,
                63,
                "      OS.Path.join(tmp, \"test_cropped_upperleft.png\"),"
            ],
            [
                0,
                64,
                "      new Rect(0, 0, 32, 32)"
            ],
            [
                0,
                65,
                "  ), 0, \"The image should be cropped to the upper left quadrant\");"
            ],
            [
                0,
                66,
                ""
            ],
            [
                0,
                67,
                "  is(await cropAndCompare("
            ],
            [
                0,
                68,
                "      window,"
            ],
            [
                0,
                69,
                "      \"chrome://mozscreenshots/content/lib/robot.png\","
            ],
            [
                0,
                70,
                "      \"chrome://mozscreenshots/content/lib/robot_center.png\","
            ],
            [
                0,
                71,
                "      OS.Path.join(tmp, \"test_cropped_center.png\"),"
            ],
            [
                0,
                72,
                "      new Rect(16, 16, 32, 32)"
            ],
            [
                0,
                73,
                "  ), 0, \"The image should be cropped to the center of the image\");"
            ],
            [
                0,
                74,
                ""
            ],
            [
                0,
                75,
                "  is(await cropAndCompare("
            ],
            [
                0,
                76,
                "      window,"
            ],
            [
                0,
                77,
                "      \"chrome://mozscreenshots/content/lib/robot.png\","
            ],
            [
                0,
                78,
                "      \"chrome://mozscreenshots/content/lib/robot_uncropped.png\","
            ],
            [
                0,
                79,
                "      OS.Path.join(tmp, \"test_uncropped.png\"),"
            ],
            [
                0,
                80,
                "      new Rect(-8, -9, 80, 80)"
            ],
            [
                0,
                81,
                "  ), 0, \"The image should be not be cropped, and the cropping region should be clipped to the size of the image\");"
            ],
            [
                0,
                82,
                "});"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/mozscreenshots/extension/Screenshot.jsm",
        "binary": false,
        "count_add": 4,
        "count_del": 10,
        "lines": [
            [
                59,
                59,
                "    }"
            ],
            [
                60,
                60,
                "  },"
            ],
            [
                61,
                61,
                ""
            ],
            [
                62,
                62,
                "  _buildImagePath(baseName) {"
            ],
            [
                63,
                63,
                "    return OS.Path.join(this._path, this._imagePrefix + baseName + this._imageExtension);"
            ],
            [
                64,
                64,
                "  },"
            ],
            [
                65,
                65,
                ""
            ],
            [
                66,
                66,
                "  // Capture the whole screen using an external application."
            ],
            [
                67,
                0,
                "  captureExternal(filename) {"
            ],
            [
                0,
                67,
                "  async captureExternal(filename) {"
            ],
            [
                68,
                68,
                "    let imagePath = this._buildImagePath(filename);"
            ],
            [
                69,
                0,
                "    return this._screenshotFunction(imagePath).then(() => {"
            ],
            [
                70,
                0,
                "      log.debug(\"saved screenshot: \" + filename);"
            ],
            [
                71,
                0,
                "    });"
            ],
            [
                0,
                69,
                "    await this._screenshotFunction(imagePath);"
            ],
            [
                0,
                70,
                "    log.debug(\"saved screenshot: \" + filename);"
            ],
            [
                0,
                71,
                "    return imagePath;"
            ],
            [
                72,
                72,
                "  },"
            ],
            [
                73,
                73,
                ""
            ],
            [
                74,
                74,
                "  // helpers"
            ],
            [
                75,
                75,
                ""
            ],
            [
                76,
                76,
                "  _screenshotWindows(filename) {"
            ],
            [
                77,
                77,
                "    return new Promise((resolve, reject) => {"
            ],
            [
                78,
                78,
                "      let exe = Services.dirsvc.get(\"GreBinD\", Ci.nsIFile);"
            ],
            [
                79,
                79,
                "      exe.append(\"screenshot.exe\");"
            ],
            [
                97,
                97,
                "        let file = Cc[\"@mozilla.org/file/local;1\"].createInstance(Ci.nsIFile);"
            ],
            [
                98,
                98,
                "        file.initWithPath(\"/usr/sbin/screencapture\");"
            ],
            [
                99,
                99,
                ""
            ],
            [
                100,
                100,
                "        let process = Cc[\"@mozilla.org/process/util;1\"].createInstance(Ci.nsIProcess);"
            ],
            [
                101,
                101,
                "        process.init(file);"
            ],
            [
                102,
                102,
                ""
            ],
            [
                103,
                103,
                "        // Run the process."
            ],
            [
                104,
                104,
                "        let args = [\"-x\", \"-t\", \"png\"];"
            ],
            [
                105,
                0,
                "        // Darwin version number for OS X 10.6 is 10.x"
            ],
            [
                106,
                0,
                "        if (windowID && Services.sysinfo.getProperty(\"version\").indexOf(\"10.\") !== 0) {"
            ],
            [
                107,
                0,
                "          // Capture only that window on 10.7+"
            ],
            [
                108,
                0,
                "          args.push(\"-l\");"
            ],
            [
                109,
                0,
                "          args.push(windowID);"
            ],
            [
                110,
                0,
                "        }"
            ],
            [
                111,
                105,
                "        args.push(filename);"
            ],
            [
                112,
                106,
                "        process.runAsync(args, args.length, this._processObserver(resolve, reject));"
            ],
            [
                113,
                107,
                "      });"
            ],
            [
                114,
                108,
                "    };"
            ],
            [
                115,
                109,
                ""
            ],
            [
                116,
                110,
                "    function readWindowID() {"
            ],
            [
                117,
                111,
                "      let decoder = new TextDecoder();"
            ],
            [
                118,
                112,
                "      let promise = OS.File.read(\"/tmp/mozscreenshots-windowid\");"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/mozscreenshots/extension/TestRunner.jsm",
        "binary": false,
        "count_add": 70,
        "count_del": 12,
        "lines": [
            [
                15,
                15,
                "Cu.import(\"resource://gre/modules/Services.jsm\");"
            ],
            [
                16,
                16,
                "Cu.import(\"resource://gre/modules/Timer.jsm\");"
            ],
            [
                17,
                17,
                "Cu.import(\"resource://gre/modules/XPCOMUtils.jsm\");"
            ],
            [
                18,
                18,
                "Cu.import(\"resource://gre/modules/osfile.jsm\");"
            ],
            [
                19,
                19,
                "Cu.import(\"resource://gre/modules/Geometry.jsm\");"
            ],
            [
                20,
                20,
                ""
            ],
            [
                21,
                21,
                "XPCOMUtils.defineLazyModuleGetter(this, \"BrowserTestUtils\","
            ],
            [
                22,
                22,
                "                                  \"resource://testing-common/BrowserTestUtils.jsm\");"
            ],
            [
                23,
                0,
                ""
            ],
            [
                0,
                23,
                "// Screenshot.jsm must be imported this way for xpcshell tests to work"
            ],
            [
                24,
                24,
                "XPCOMUtils.defineLazyModuleGetter(this, \"Screenshot\", \"chrome://mozscreenshots/content/Screenshot.jsm\");"
            ],
            [
                25,
                25,
                ""
            ],
            [
                26,
                26,
                "// Create a new instance of the ConsoleAPI so we can control the maxLogLevel with a pref."
            ],
            [
                27,
                27,
                "// See LOG_LEVELS in Console.jsm. Common examples: \"All\", \"Info\", \"Warn\", & \"Error\"."
            ],
            [
                28,
                28,
                "const PREF_LOG_LEVEL = \"extensions.mozscreenshots@mozilla.org.loglevel\";"
            ],
            [
                29,
                29,
                "XPCOMUtils.defineLazyGetter(this, \"log\", () => {"
            ],
            [
                30,
                30,
                "  let ConsoleAPI = Cu.import(\"resource://gre/modules/Console.jsm\", {}).ConsoleAPI;"
            ],
            [
                31,
                31,
                "  let consoleOptions = {"
            ],
            [
                319,
                319,
                "      log.warn(\"\\tskipped configuration: \" + ex);"
            ],
            [
                320,
                320,
                "      // Don't set lastCombo here so that we properly know which configurations"
            ],
            [
                321,
                321,
                "      // need to be applied since the last screenshot"
            ],
            [
                322,
                322,
                ""
            ],
            [
                323,
                323,
                "      // Return so we don't take a screenshot."
            ],
            [
                324,
                324,
                "      return;"
            ],
            [
                325,
                325,
                "    }"
            ],
            [
                326,
                326,
                ""
            ],
            [
                327,
                0,
                "    await this._onConfigurationReady(combo);"
            ],
            [
                0,
                327,
                "    // Collect selectors from combo configs for cropping region"
            ],
            [
                0,
                328,
                "    let windowType;"
            ],
            [
                0,
                329,
                "    const finalSelectors = [];"
            ],
            [
                0,
                330,
                "    for (const obj of combo) {"
            ],
            [
                0,
                331,
                "      if (!windowType) {"
            ],
            [
                0,
                332,
                "        windowType = obj.windowType;"
            ],
            [
                0,
                333,
                "      } else if (windowType !== obj.windowType) {"
            ],
            [
                0,
                334,
                "        log.warn(\"\\tConfigurations with multiple window types are not allowed\");"
            ],
            [
                0,
                335,
                "        return;"
            ],
            [
                0,
                336,
                "      }"
            ],
            [
                0,
                337,
                "      for (const selector of obj.selectors) {"
            ],
            [
                0,
                338,
                "        finalSelectors.push(selector);"
            ],
            [
                0,
                339,
                "      }"
            ],
            [
                0,
                340,
                "    }"
            ],
            [
                0,
                341,
                ""
            ],
            [
                0,
                342,
                "    const rect = this._findBoundingBox(finalSelectors, windowType);"
            ],
            [
                0,
                343,
                "    await this._onConfigurationReady(combo, rect);"
            ],
            [
                328,
                344,
                "  },"
            ],
            [
                329,
                345,
                ""
            ],
            [
                330,
                0,
                "  _onConfigurationReady(combo) {"
            ],
            [
                331,
                0,
                "    let delayedScreenshot = () => {"
            ],
            [
                332,
                0,
                "      let filename = padLeft(this.currentComboIndex + 1,"
            ],
            [
                333,
                0,
                "                             String(this.combos.length).length) + this._comboName(combo);"
            ],
            [
                334,
                0,
                "      return Screenshot.captureExternal(filename)"
            ],
            [
                335,
                0,
                "        .then(() => {"
            ],
            [
                336,
                0,
                "          this.completedCombos++;"
            ],
            [
                337,
                0,
                "        });"
            ],
            [
                338,
                0,
                "    };"
            ],
            [
                0,
                346,
                "  async _onConfigurationReady(combo, rect) {"
            ],
            [
                0,
                347,
                "    let filename = padLeft(this.currentComboIndex + 1,"
            ],
            [
                0,
                348,
                "                           String(this.combos.length).length) + this._comboName(combo);"
            ],
            [
                0,
                349,
                "    const imagePath = await Screenshot.captureExternal(filename);"
            ],
            [
                339,
                350,
                ""
            ],
            [
                0,
                351,
                "    let browserWindow = Services.wm.getMostRecentWindow(\"navigator:browser\");"
            ],
            [
                0,
                352,
                "    await this._cropImage(browserWindow, OS.Path.toFileURI(imagePath), rect, imagePath);"
            ],
            [
                0,
                353,
                "    this.completedCombos++;"
            ],
            [
                340,
                354,
                "    log.debug(\"_onConfigurationReady\");"
            ],
            [
                341,
                0,
                "    return delayedScreenshot();"
            ],
            [
                342,
                355,
                "  },"
            ],
            [
                343,
                356,
                ""
            ],
            [
                344,
                357,
                "  _comboName(combo) {"
            ],
            [
                345,
                358,
                "    return combo.reduce(function(a, b) {"
            ],
            [
                346,
                359,
                "      return a + \"_\" + b.name;"
            ],
            [
                347,
                360,
                "    }, \"\");"
            ],
            [
                348,
                361,
                "  },"
            ],
            [
                349,
                362,
                ""
            ],
            [
                0,
                363,
                "  async _cropImage(window, srcPath, rect, targetPath) {"
            ],
            [
                0,
                364,
                "    const { document, Image } = window;"
            ],
            [
                0,
                365,
                "    const promise = new Promise((resolve, reject) => {"
            ],
            [
                0,
                366,
                "      const img = new Image();"
            ],
            [
                0,
                367,
                "      img.onload = function() {"
            ],
            [
                0,
                368,
                "        // Clip the cropping region to the size of the screenshot"
            ],
            [
                0,
                369,
                "        // This is necessary mostly to deal with offscreen windows, since we"
            ],
            [
                0,
                370,
                "        // are capturing an image of the operating system's desktop."
            ],
            [
                0,
                371,
                "        rect.left = Math.max(0, rect.left);"
            ],
            [
                0,
                372,
                "        rect.right = Math.min(img.naturalWidth, rect.right);"
            ],
            [
                0,
                373,
                "        rect.top = Math.max(0, rect.top);"
            ],
            [
                0,
                374,
                "        rect.bottom = Math.min(img.naturalHeight, rect.bottom);"
            ],
            [
                0,
                375,
                ""
            ],
            [
                0,
                376,
                "        // Create a new offscreen canvas with the width and height given by the"
            ],
            [
                0,
                377,
                "        // size of the region we want to crop to"
            ],
            [
                0,
                378,
                "        const canvas = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\");"
            ],
            [
                0,
                379,
                "        canvas.width = rect.width;"
            ],
            [
                0,
                380,
                "        canvas.height = rect.height;"
            ],
            [
                0,
                381,
                "        const ctx = canvas.getContext(\"2d\");"
            ],
            [
                0,
                382,
                "        // By drawing the image with the negative offset, the unwanted regions"
            ],
            [
                0,
                383,
                "        // are drawn off canvas, and are not captured when the canvas is saved."
            ],
            [
                0,
                384,
                "        ctx.drawImage(img, -rect.x, -rect.y);"
            ],
            [
                0,
                385,
                "        // Converts the canvas to a binary blob, which can be saved to a png"
            ],
            [
                0,
                386,
                "        canvas.toBlob((blob) => {"
            ],
            [
                0,
                387,
                "          // Use a filereader to convert the raw binary blob into a writable buffer"
            ],
            [
                0,
                388,
                "          const fr = new FileReader();"
            ],
            [
                0,
                389,
                "          fr.onload = function(e) {"
            ],
            [
                0,
                390,
                "            const buffer = new Uint8Array(e.target.result);"
            ],
            [
                0,
                391,
                "            // Save the file and complete the promise"
            ],
            [
                0,
                392,
                "            OS.File.writeAtomic(targetPath, buffer, {}).then(resolve);"
            ],
            [
                0,
                393,
                "          };"
            ],
            [
                0,
                394,
                "          // Do the conversion"
            ],
            [
                0,
                395,
                "          fr.readAsArrayBuffer(blob);"
            ],
            [
                0,
                396,
                "        });"
            ],
            [
                0,
                397,
                "      };"
            ],
            [
                0,
                398,
                ""
            ],
            [
                0,
                399,
                "      img.onerror = function() {"
            ],
            [
                0,
                400,
                "        reject(`error loading image ${srcPath}`);"
            ],
            [
                0,
                401,
                "      };"
            ],
            [
                0,
                402,
                "      // Load the src image for drawing"
            ],
            [
                0,
                403,
                "      img.src = srcPath;"
            ],
            [
                0,
                404,
                "    });"
            ],
            [
                0,
                405,
                "    return promise;"
            ],
            [
                0,
                406,
                "  },"
            ],
            [
                0,
                407,
                ""
            ],
            [
                350,
                408,
                "  /**"
            ],
            [
                351,
                409,
                "   * Finds the index of the first comma that is not enclosed within square brackets."
            ],
            [
                352,
                410,
                "   * @param {String} envVar - the string that needs to be searched"
            ],
            [
                353,
                411,
                "   * @return {Integer} index of valid comma or -1 if not found."
            ],
            [
                354,
                412,
                "   */"
            ],
            [
                355,
                413,
                "  findComma(envVar) {"
            ],
            [
                356,
                414,
                "    let nestingDepth = 0;"
            ],
            [
                357,
                415,
                "    for (let i = 0; i < envVar.length; i++) {"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/mozscreenshots/extension/configurations/TabsInTitlebar.jsm",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                24,
                24,
                "          return Promise.reject(\"TabsInTitlebar isn't supported on Linux\");"
            ],
            [
                25,
                25,
                "        }"
            ],
            [
                26,
                26,
                "        Services.prefs.setBoolPref(PREF_TABS_IN_TITLEBAR, true);"
            ],
            [
                27,
                27,
                "        return undefined;"
            ],
            [
                28,
                28,
                "      },"
            ],
            [
                29,
                29,
                "    },"
            ],
            [
                30,
                30,
                ""
            ],
            [
                31,
                31,
                "    tabsOutsideTitlebar: {"
            ],
            [
                32,
                0,
                "      selectors: [\"#navigator-toolbox\", \"#titlebar\"],"
            ],
            [
                0,
                32,
                "      selectors: [\"#navigator-toolbox\"].concat(Services.appinfo.OS == \"Linux\" ? [] : [\"#titlebar\"]),"
            ],
            [
                33,
                33,
                "      async applyConfig() {"
            ],
            [
                34,
                34,
                "        Services.prefs.setBoolPref(PREF_TABS_IN_TITLEBAR, false);"
            ],
            [
                35,
                35,
                "      },"
            ],
            [
                36,
                36,
                "    },"
            ],
            [
                37,
                37,
                ""
            ],
            [
                38,
                38,
                "  },"
            ],
            [
                39,
                39,
                "};"
            ]
        ]
    },
    {
        "new": true,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/mozscreenshots/extension/lib/robot_center.png",
        "binary": true,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": true,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/mozscreenshots/extension/lib/robot_uncropped.png",
        "binary": true,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": true,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/tools/mozscreenshots/mozscreenshots/extension/lib/robot_upperleft.png",
        "binary": true,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    }
]