[
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/base/content/test/referrer/head.js",
        "binary": false,
        "count_add": 1,
        "count_del": 3,
        "lines": [
            [
                148,
                148,
                ""
            ],
            [
                149,
                149,
                "/**"
            ],
            [
                150,
                150,
                " * Waits for some (any) tab to load. The caller triggers the load."
            ],
            [
                151,
                151,
                " * @param aWindow The window where to wait for a tab to load."
            ],
            [
                152,
                152,
                " * @return {Promise}"
            ],
            [
                153,
                153,
                " * @resolves With the tab once it's loaded."
            ],
            [
                154,
                154,
                " */"
            ],
            [
                155,
                155,
                "function someTabLoaded(aWindow) {"
            ],
            [
                156,
                0,
                "  return BrowserTestUtils.waitForNewTab(gTestWindow.gBrowser).then((tab) => {"
            ],
            [
                157,
                0,
                "    return BrowserTestUtils.browserStopped(tab.linkedBrowser).then(() => tab);"
            ],
            [
                158,
                0,
                "  });"
            ],
            [
                0,
                156,
                "  return BrowserTestUtils.waitForNewTab(gTestWindow.gBrowser, null, true);"
            ],
            [
                159,
                157,
                "}"
            ],
            [
                160,
                158,
                ""
            ],
            [
                161,
                159,
                "/**"
            ],
            [
                162,
                160,
                " * Waits for a new window to open and load. The caller triggers the open."
            ],
            [
                163,
                161,
                " * @return {Promise}"
            ],
            [
                164,
                162,
                " * @resolves With the new window once it's open and loaded."
            ],
            [
                165,
                163,
                " */"
            ],
            [
                166,
                164,
                "function newWindowOpened() {"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/base/content/test/siteIdentity/browser_insecureLoginForms.js",
        "binary": false,
        "count_add": 12,
        "count_del": 5,
        "lines": [
            [
                126,
                126,
                ""
            ],
            [
                127,
                127,
                "  gBrowser.removeTab(tab);"
            ],
            [
                128,
                128,
                "});"
            ],
            [
                129,
                129,
                ""
            ],
            [
                130,
                130,
                "/**"
            ],
            [
                131,
                131,
                " * Checks that insecure window.opener does not trigger a warning."
            ],
            [
                132,
                132,
                " */"
            ],
            [
                133,
                133,
                "add_task(async function test_ignoring_window_opener() {"
            ],
            [
                134,
                0,
                "  let newTabURL = \"https://example.com\" + TEST_URL_PATH + \"form_basic.html\";"
            ],
            [
                135,
                134,
                "  let path = getRootDirectory(gTestPath)"
            ],
            [
                136,
                135,
                "    .replace(\"chrome://mochitests/content\", \"http://example.com\");"
            ],
            [
                137,
                136,
                "  let url = path + \"insecure_opener.html\";"
            ],
            [
                138,
                137,
                ""
            ],
            [
                139,
                138,
                "  await BrowserTestUtils.withNewTab(url, async function(browser) {"
            ],
            [
                140,
                139,
                "    // Clicking the link will spawn a new tab."
            ],
            [
                141,
                0,
                "    let loaded = BrowserTestUtils.waitForNewTab(gBrowser, newTabURL);"
            ],
            [
                0,
                140,
                "    let stateChangePromise;"
            ],
            [
                0,
                141,
                "    let tabOpenPromise = new Promise(resolve => {"
            ],
            [
                0,
                142,
                "      gBrowser.tabContainer.addEventListener(\"TabOpen\", event => {"
            ],
            [
                0,
                143,
                "        let tab = event.target;"
            ],
            [
                0,
                144,
                "        let newTabBrowser = tab.linkedBrowser;"
            ],
            [
                0,
                145,
                "        stateChangePromise = waitForInsecureLoginFormsStateChange(newTabBrowser, 2);"
            ],
            [
                0,
                146,
                "        resolve(tab);"
            ],
            [
                0,
                147,
                "      }, { once: true });"
            ],
            [
                0,
                148,
                "    });"
            ],
            [
                0,
                149,
                ""
            ],
            [
                142,
                150,
                "    await ContentTask.spawn(browser, {}, function() {"
            ],
            [
                143,
                151,
                "      content.document.getElementById(\"link\").click();"
            ],
            [
                144,
                152,
                "    });"
            ],
            [
                145,
                0,
                "    let tab = await loaded;"
            ],
            [
                146,
                0,
                "    browser = tab.linkedBrowser;"
            ],
            [
                147,
                0,
                "    await waitForInsecureLoginFormsStateChange(browser, 2);"
            ],
            [
                0,
                153,
                "    let tab = await tabOpenPromise;"
            ],
            [
                0,
                154,
                "    await stateChangePromise;"
            ],
            [
                148,
                155,
                ""
            ],
            [
                149,
                156,
                "    // Open the identity popup."
            ],
            [
                150,
                157,
                "    let { gIdentityHandler } = gBrowser.ownerGlobal;"
            ],
            [
                151,
                158,
                "    let promisePanelOpen = BrowserTestUtils.waitForEvent(gIdentityHandler._identityPopup, \"popupshown\");"
            ],
            [
                152,
                159,
                "    gIdentityHandler._identityBox.click();"
            ],
            [
                153,
                160,
                "    await promisePanelOpen;"
            ],
            [
                154,
                161,
                ""
            ],
            [
                155,
                162,
                "    ok(Array.every(document.getElementById(\"identity-popup-mainView\")"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/base/content/test/tabs/browser_opened_file_tab_navigated_to_web.js",
        "binary": false,
        "count_add": 1,
        "count_del": 2,
        "lines": [
            [
                17,
                17,
                ""
            ],
            [
                18,
                18,
                "  // Open first file:// page."
            ],
            [
                19,
                19,
                "  let tab = await BrowserTestUtils.openNewForegroundTab(gBrowser, uriString);"
            ],
            [
                20,
                20,
                "  registerCleanupFunction(async function() {"
            ],
            [
                21,
                21,
                "    await BrowserTestUtils.removeTab(tab);"
            ],
            [
                22,
                22,
                "  });"
            ],
            [
                23,
                23,
                ""
            ],
            [
                24,
                24,
                "  // Open new file:// tab from JavaScript in first file:// page."
            ],
            [
                25,
                0,
                "  let promiseTabOpened = BrowserTestUtils.waitForNewTab(gBrowser, openedUriString);"
            ],
            [
                0,
                25,
                "  let promiseTabOpened = BrowserTestUtils.waitForNewTab(gBrowser, openedUriString, true);"
            ],
            [
                26,
                26,
                "  await ContentTask.spawn(tab.linkedBrowser, openedUriString, uri => {"
            ],
            [
                27,
                27,
                "    content.open(uri, \"_blank\");"
            ],
            [
                28,
                28,
                "  });"
            ],
            [
                29,
                29,
                ""
            ],
            [
                30,
                30,
                "  let openedTab = await promiseTabOpened;"
            ],
            [
                31,
                31,
                "  registerCleanupFunction(async function() {"
            ],
            [
                32,
                32,
                "    await BrowserTestUtils.removeTab(openedTab);"
            ],
            [
                33,
                33,
                "  });"
            ],
            [
                34,
                34,
                ""
            ],
            [
                35,
                35,
                "  let openedBrowser = openedTab.linkedBrowser;"
            ],
            [
                36,
                0,
                "  await BrowserTestUtils.browserLoaded(openedBrowser);"
            ],
            [
                37,
                36,
                ""
            ],
            [
                38,
                37,
                "  // Ensure that new file:// tab can be navigated to web content."
            ],
            [
                39,
                38,
                "  openedBrowser.loadURI(\"http://example.org/\");"
            ],
            [
                40,
                39,
                "  let href = await BrowserTestUtils.browserLoaded(openedBrowser);"
            ],
            [
                41,
                40,
                "  is(href, \"http://example.org/\","
            ],
            [
                42,
                41,
                "     \"Check that new file:// page has navigated successfully to web content\");"
            ],
            [
                43,
                42,
                "});"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/extensions/shield-recipe-client/test/browser/browser_Heartbeat.js",
        "binary": false,
        "count_add": 20,
        "count_del": 6,
        "lines": [
            [
                97,
                97,
                "  Assert.equal(notificationBox.childElementCount, preCount + 1, \"Correct number of notifications open\");"
            ],
            [
                98,
                98,
                "  Assert.equal(hb.notice.querySelectorAll(\".star-x\").length, 5, \"Correct number of stars\");"
            ],
            [
                99,
                99,
                "  Assert.equal(hb.notice.querySelectorAll(\".notification-button\").length, 0, \"Engagement button not shown\");"
            ],
            [
                100,
                100,
                "  Assert.equal(learnMoreEl.href, \"https://example.org/learnmore\", \"Learn more url correct\");"
            ],
            [
                101,
                101,
                "  Assert.equal(learnMoreEl.value, \"Learn More\", \"Learn more label correct\");"
            ],
            [
                102,
                102,
                "  Assert.equal(messageEl.textContent, \"test\", \"Message is correct\");"
            ],
            [
                103,
                103,
                ""
            ],
            [
                104,
                104,
                "  // Check that when clicking the learn more link, a tab opens with the right URL"
            ],
            [
                105,
                0,
                "  const tabOpenPromise = BrowserTestUtils.waitForNewTab(targetWindow.gBrowser);"
            ],
            [
                0,
                105,
                "  let loadedPromise;"
            ],
            [
                0,
                106,
                "  const tabOpenPromise = new Promise(resolve => {"
            ],
            [
                0,
                107,
                "    gBrowser.tabContainer.addEventListener(\"TabOpen\", event => {"
            ],
            [
                0,
                108,
                "      let tab = event.target;"
            ],
            [
                0,
                109,
                "      loadedPromise = BrowserTestUtils.browserLoaded("
            ],
            [
                0,
                110,
                "        tab.linkedBrowser, true, url => url && url !== \"about:blank\");"
            ],
            [
                0,
                111,
                "      resolve(tab);"
            ],
            [
                0,
                112,
                "    }, { once: true });"
            ],
            [
                0,
                113,
                "  });"
            ],
            [
                106,
                114,
                "  learnMoreEl.click();"
            ],
            [
                107,
                115,
                "  const tab = await tabOpenPromise;"
            ],
            [
                108,
                0,
                "  const tabUrl = await BrowserTestUtils.browserLoaded("
            ],
            [
                109,
                0,
                "    tab.linkedBrowser, true, url => url && url !== \"about:blank\");"
            ],
            [
                0,
                116,
                "  const tabUrl = await loadedPromise;"
            ],
            [
                110,
                117,
                ""
            ],
            [
                111,
                118,
                "  Assert.equal(tabUrl, \"https://example.org/learnmore\", \"Learn more link opened the right url\");"
            ],
            [
                112,
                119,
                ""
            ],
            [
                113,
                120,
                "  const telemetrySentPromise = assertTelemetrySent(hb, [\"offeredTS\", \"learnMoreTS\", \"closedTS\"]);"
            ],
            [
                114,
                121,
                "  // Close notification to trigger telemetry to be sent"
            ],
            [
                115,
                122,
                "  await closeAllNotifications(targetWindow, notificationBox);"
            ],
            [
                116,
                123,
                "  await telemetrySentPromise;"
            ],
            [
                117,
                124,
                "  await BrowserTestUtils.removeTab(tab);"
            ],
            [
                133,
                140,
                "  });"
            ],
            [
                134,
                141,
                "  const engagementButton = hb.notice.querySelector(\".notification-button\");"
            ],
            [
                135,
                142,
                ""
            ],
            [
                136,
                143,
                "  Assert.equal(hb.notice.querySelectorAll(\".star-x\").length, 0, \"Stars not shown\");"
            ],
            [
                137,
                144,
                "  Assert.ok(engagementButton, \"Engagement button added\");"
            ],
            [
                138,
                145,
                "  Assert.equal(engagementButton.label, \"Click me!\", \"Engagement button has correct label\");"
            ],
            [
                139,
                146,
                ""
            ],
            [
                140,
                147,
                "  const engagementEl = hb.notice.querySelector(\".notification-button\");"
            ],
            [
                141,
                0,
                "  const tabOpenPromise = BrowserTestUtils.waitForNewTab(targetWindow.gBrowser);"
            ],
            [
                0,
                148,
                "  let loadedPromise;"
            ],
            [
                0,
                149,
                "  const tabOpenPromise = new Promise(resolve => {"
            ],
            [
                0,
                150,
                "    gBrowser.tabContainer.addEventListener(\"TabOpen\", event => {"
            ],
            [
                0,
                151,
                "      let tab = event.target;"
            ],
            [
                0,
                152,
                "      loadedPromise = BrowserTestUtils.browserLoaded("
            ],
            [
                0,
                153,
                "        tab.linkedBrowser, true, url => url && url !== \"about:blank\");"
            ],
            [
                0,
                154,
                "      resolve(tab);"
            ],
            [
                0,
                155,
                "    }, { once: true });"
            ],
            [
                0,
                156,
                "  });"
            ],
            [
                142,
                157,
                "  engagementEl.click();"
            ],
            [
                143,
                158,
                "  const tab = await tabOpenPromise;"
            ],
            [
                144,
                0,
                "  const tabUrl = await BrowserTestUtils.browserLoaded("
            ],
            [
                145,
                0,
                "        tab.linkedBrowser, true, url => url && url !== \"about:blank\");"
            ],
            [
                0,
                159,
                "  const tabUrl = await loadedPromise;"
            ],
            [
                146,
                160,
                "  // the postAnswer url gets query parameters appended onto the end, so use Assert.startsWith instead of Assert.equal"
            ],
            [
                147,
                161,
                "  Assert.ok(tabUrl.startsWith(\"https://example.org/postAnswer\"), \"Engagement button opened the right url\");"
            ],
            [
                148,
                162,
                ""
            ],
            [
                149,
                163,
                "  const telemetrySentPromise = assertTelemetrySent(hb, [\"offeredTS\", \"engagedTS\", \"closedTS\"]);"
            ],
            [
                150,
                164,
                "  // Close notification to trigger telemetry to be sent"
            ],
            [
                151,
                165,
                "  await closeAllNotifications(targetWindow, notificationBox);"
            ],
            [
                152,
                166,
                "  await telemetrySentPromise;"
            ],
            [
                153,
                167,
                "  await BrowserTestUtils.removeTab(tab);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "browser/extensions/webcompat-reporter/test/browser/browser_report_site_issue.js",
        "binary": false,
        "count_add": 10,
        "count_del": 3,
        "lines": [
            [
                6,
                6,
                "  // ./head.js sets the value for PREF_WC_REPORTER_ENDPOINT"
            ],
            [
                7,
                7,
                "  await SpecialPowers.pushPrefEnv({set: [[PREF_WC_REPORTER_ENDPOINT, NEW_ISSUE_PAGE]]});"
            ],
            [
                8,
                8,
                ""
            ],
            [
                9,
                9,
                "  let tab1 = await BrowserTestUtils.openNewForegroundTab(gBrowser, TEST_PAGE);"
            ],
            [
                10,
                10,
                ""
            ],
            [
                11,
                11,
                "  let webcompatButton = document.getElementById(WC_PAGE_ACTION_ID);"
            ],
            [
                12,
                12,
                "  ok(webcompatButton, \"Report Site Issue button exists.\");"
            ],
            [
                13,
                13,
                ""
            ],
            [
                14,
                0,
                "  let newTabPromise = BrowserTestUtils.waitForNewTab(gBrowser);"
            ],
            [
                0,
                14,
                "  let screenshotPromise;"
            ],
            [
                0,
                15,
                "  let newTabPromise = new Promise(resolve => {"
            ],
            [
                0,
                16,
                "    gBrowser.tabContainer.addEventListener(\"TabOpen\", event => {"
            ],
            [
                0,
                17,
                "      let tab = event.target;"
            ],
            [
                0,
                18,
                "      screenshotPromise = BrowserTestUtils.waitForContentEvent("
            ],
            [
                0,
                19,
                "        tab.linkedBrowser, \"ScreenshotReceived\", false, null, true);"
            ],
            [
                0,
                20,
                "      resolve(tab);"
            ],
            [
                0,
                21,
                "    }, { once: true });"
            ],
            [
                0,
                22,
                "  });"
            ],
            [
                15,
                23,
                "  openPageActions();"
            ],
            [
                16,
                24,
                "  webcompatButton.click();"
            ],
            [
                17,
                25,
                "  let tab2 = await newTabPromise;"
            ],
            [
                18,
                0,
                ""
            ],
            [
                19,
                0,
                "  await BrowserTestUtils.waitForContentEvent(tab2.linkedBrowser, \"ScreenshotReceived\", false, null, true);"
            ],
            [
                0,
                26,
                "  await screenshotPromise;"
            ],
            [
                20,
                27,
                ""
            ],
            [
                21,
                28,
                "  await ContentTask.spawn(tab2.linkedBrowser, {TEST_PAGE}, function(args) {"
            ],
            [
                22,
                29,
                "    let doc = content.document;"
            ],
            [
                23,
                30,
                "    let urlParam = doc.getElementById(\"url\").innerText;"
            ],
            [
                24,
                31,
                "    let preview = doc.getElementById(\"screenshot-preview\");"
            ],
            [
                25,
                32,
                "    is(urlParam, args.TEST_PAGE, \"Reported page is correctly added to the url param\");"
            ],
            [
                26,
                33,
                ""
            ],
            [
                27,
                34,
                "    is(preview.innerText, \"Pass\", \"A Blob object was successfully transferred to the test page.\");"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/Object.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/Object.h",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/Object.js",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/Reflect.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/SelfHostingDefines.h",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/Sorting.js",
        "binary": false,
        "count_add": 15,
        "count_del": 3,
        "lines": [
            [
                3,
                3,
                " * file, You can obtain one at http://mozilla.org/MPL/2.0/. */"
            ],
            [
                4,
                4,
                ""
            ],
            [
                5,
                5,
                "// We use varying sorts across the self-hosted codebase. All sorts are"
            ],
            [
                6,
                6,
                "// consolidated here to avoid confusion and re-implementation of existing"
            ],
            [
                7,
                7,
                "// algorithms."
            ],
            [
                8,
                8,
                ""
            ],
            [
                9,
                9,
                "// For sorting values with limited range; uint8 and int8."
            ],
            [
                10,
                10,
                "function CountingSort(array, len, signed, comparefn) {"
            ],
            [
                0,
                11,
                "    assert(IsPossiblyWrappedTypedArray(array), \"CountingSort works only with typed arrays.\");"
            ],
            [
                0,
                12,
                ""
            ],
            [
                11,
                13,
                "    // Determined by performance testing."
            ],
            [
                12,
                14,
                "    if (len < 128) {"
            ],
            [
                13,
                15,
                "        QuickSort(array, len, comparefn);"
            ],
            [
                14,
                16,
                "        return array;"
            ],
            [
                15,
                17,
                "    }"
            ],
            [
                16,
                18,
                ""
            ],
            [
                17,
                19,
                "    // Map int8 values onto the uint8 range when storing in buffer."
            ],
            [
                18,
                20,
                "    var min = 0;"
            ],
            [
                104,
                106,
                "    for (let i = 0; i < len; i++) {"
            ],
            [
                105,
                107,
                "        array[i] = aux[i];"
            ],
            [
                106,
                108,
                "    }"
            ],
            [
                107,
                109,
                "}"
            ],
            [
                108,
                110,
                ""
            ],
            [
                109,
                111,
                "// Sorts integers and float32. |signed| is true for int16 and int32, |floating|"
            ],
            [
                110,
                112,
                "// is true for float32."
            ],
            [
                111,
                113,
                "function RadixSort(array, len, buffer, nbytes, signed, floating, comparefn) {"
            ],
            [
                0,
                114,
                "    assert(IsPossiblyWrappedTypedArray(array), \"RadixSort works only with typed arrays.\");"
            ],
            [
                0,
                115,
                ""
            ],
            [
                112,
                116,
                "    // Determined by performance testing."
            ],
            [
                113,
                117,
                "    if (len < 512) {"
            ],
            [
                114,
                118,
                "        QuickSort(array, len, comparefn);"
            ],
            [
                115,
                119,
                "        return array;"
            ],
            [
                116,
                120,
                "    }"
            ],
            [
                117,
                121,
                ""
            ],
            [
                118,
                122,
                "    let aux = [];"
            ],
            [
                119,
                123,
                "    for (let i = 0; i < len; i++)"
            ],
            [
                126,
                130,
                "    if (floating) {"
            ],
            [
                127,
                131,
                "        // Acquire a buffer if the array was previously using inline storage."
            ],
            [
                128,
                132,
                "        if (buffer === null) {"
            ],
            [
                129,
                133,
                "            buffer = callFunction(std_TypedArray_buffer, array);"
            ],
            [
                130,
                134,
                ""
            ],
            [
                131,
                135,
                "            assert(buffer !== null, \"Attached data buffer should be reified\");"
            ],
            [
                132,
                136,
                "        }"
            ],
            [
                133,
                137,
                ""
            ],
            [
                134,
                0,
                "        view = new Int32Array(buffer);"
            ],
            [
                0,
                138,
                "        // |array| is a possibly cross-compartment wrapped typed array."
            ],
            [
                0,
                139,
                "        let offset = IsTypedArray(array)"
            ],
            [
                0,
                140,
                "                     ? TypedArrayByteOffset(array)"
            ],
            [
                0,
                141,
                "                     : callFunction(CallTypedArrayMethodIfWrapped, array, array,"
            ],
            [
                0,
                142,
                "                                    \"TypedArrayByteOffset\");"
            ],
            [
                0,
                143,
                ""
            ],
            [
                0,
                144,
                "        view = new Int32Array(buffer, offset, len);"
            ],
            [
                135,
                145,
                ""
            ],
            [
                136,
                146,
                "        // Flip sign bit for positive numbers; flip all bits for negative"
            ],
            [
                137,
                0,
                "        // numbers"
            ],
            [
                0,
                147,
                "        // numbers, except negative NaNs."
            ],
            [
                138,
                148,
                "        for (let i = 0; i < len; i++) {"
            ],
            [
                139,
                149,
                "            if (view[i] & signMask) {"
            ],
            [
                140,
                0,
                "                view[i] ^= 0xFFFFFFFF;"
            ],
            [
                0,
                150,
                "                if ((view[i] & 0x7F800000) !== 0x7F800000 || (view[i] & 0x007FFFFF) === 0) {"
            ],
            [
                0,
                151,
                "                    view[i] ^= 0xFFFFFFFF;"
            ],
            [
                0,
                152,
                "                }"
            ],
            [
                141,
                153,
                "            } else {"
            ],
            [
                142,
                154,
                "                view[i] ^= signMask;"
            ],
            [
                143,
                155,
                "            }"
            ],
            [
                144,
                156,
                "        }"
            ],
            [
                145,
                157,
                "    } else if (signed) {"
            ],
            [
                146,
                158,
                "        // Flip sign bit"
            ],
            [
                147,
                159,
                "        for (let i = 0; i < len; i++) {"
            ],
            [
                148,
                160,
                "            view[i] ^= signMask;"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/builtin/Utilities.js",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/jsapi-tests/testGCHooks.cpp",
        "binary": false,
        "count_add": 4,
        "count_del": 0,
        "lines": [
            [
                63,
                63,
                "    MOZ_RELEASE_ASSERT(desc.isZone_ == false);"
            ],
            [
                64,
                64,
                "    MOZ_RELEASE_ASSERT(desc.invocationKind_ == GC_SHRINK);"
            ],
            [
                65,
                65,
                "    MOZ_RELEASE_ASSERT(desc.reason_ == expectReasons[gSliceCallbackCount]);"
            ],
            [
                66,
                66,
                "    gSliceCallbackCount++;"
            ],
            [
                67,
                67,
                "}"
            ],
            [
                68,
                68,
                ""
            ],
            [
                69,
                69,
                "BEGIN_TEST(testGCRootsRemoved)"
            ],
            [
                70,
                70,
                "{"
            ],
            [
                0,
                71,
                "#ifdef JS_GC_ZEAL"
            ],
            [
                0,
                72,
                "    AutoLeaveZeal nozeal(cx);"
            ],
            [
                0,
                73,
                "#endif /* JS_GC_ZEAL */"
            ],
            [
                0,
                74,
                ""
            ],
            [
                71,
                75,
                "    JS_SetGCParameter(cx, JSGC_MODE, JSGC_MODE_INCREMENTAL);"
            ],
            [
                72,
                76,
                ""
            ],
            [
                73,
                77,
                "    gSliceCallbackCount = 0;"
            ],
            [
                74,
                78,
                "    JS::SetGCSliceCallback(cx, RootsRemovedGCSliceCallback);"
            ],
            [
                75,
                79,
                ""
            ],
            [
                76,
                80,
                "    JS::RootedObject obj(cx, JS_NewPlainObject(cx));"
            ],
            [
                77,
                81,
                "    CHECK(obj);"
            ],
            [
                78,
                82,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/jsarray.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/jsarray.h",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": true,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/tests/ecma_6/TypedArray/sort-negative-nan.js",
        "binary": false,
        "count_add": 106,
        "count_del": 0,
        "lines": [
            [
                0,
                1,
                "// Test with all floating point typed arrays."
            ],
            [
                0,
                2,
                "const floatConstructors = anyTypedArrayConstructors.filter(isFloatConstructor);"
            ],
            [
                0,
                3,
                ""
            ],
            [
                0,
                4,
                "// Also test with cross-compartment wrapped typed arrays."
            ],
            [
                0,
                5,
                "if (typeof newGlobal === \"function\") {"
            ],
            [
                0,
                6,
                "    const otherGlobal = newGlobal();"
            ],
            [
                0,
                7,
                "    floatConstructors.push(otherGlobal.Float32Array);"
            ],
            [
                0,
                8,
                "    floatConstructors.push(otherGlobal.Float64Array);"
            ],
            [
                0,
                9,
                "}"
            ],
            [
                0,
                10,
                ""
            ],
            [
                0,
                11,
                "function* prod(xs, ys) {"
            ],
            [
                0,
                12,
                "    for (let x of xs) {"
            ],
            [
                0,
                13,
                "        for (let y of ys) {"
            ],
            [
                0,
                14,
                "            yield [x, y];"
            ],
            [
                0,
                15,
                "        }"
            ],
            [
                0,
                16,
                "    }"
            ],
            [
                0,
                17,
                "}"
            ],
            [
                0,
                18,
                ""
            ],
            [
                0,
                19,
                "const isLittleEndian = new Uint8Array(new Uint16Array([1]).buffer)[0] !== 0;"
            ],
            [
                0,
                20,
                ""
            ],
            [
                0,
                21,
                "function seti32(i32, i, v) {"
            ],
            [
                0,
                22,
                "    i32[i] = v;"
            ],
            [
                0,
                23,
                "}"
            ],
            [
                0,
                24,
                ""
            ],
            [
                0,
                25,
                "function seti64(i32, i, [hi, lo]) {"
            ],
            [
                0,
                26,
                "    i32[i * 2 + isLittleEndian] = hi;"
            ],
            [
                0,
                27,
                "    i32[i * 2 + !isLittleEndian] = lo;"
            ],
            [
                0,
                28,
                "}"
            ],
            [
                0,
                29,
                ""
            ],
            [
                0,
                30,
                "const setInt = {"
            ],
            [
                0,
                31,
                "    Float32: seti32,"
            ],
            [
                0,
                32,
                "    Float64: seti64,"
            ],
            [
                0,
                33,
                "};"
            ],
            [
                0,
                34,
                ""
            ],
            [
                0,
                35,
                "const NaNs = {"
            ],
            [
                0,
                36,
                "    Float32: ["
            ],
            [
                0,
                37,
                "        0x7F800001|0, // smallest SNaN"
            ],
            [
                0,
                38,
                "        0x7FBFFFFF|0, // largest SNaN"
            ],
            [
                0,
                39,
                "        0x7FC00000|0, // smallest QNaN"
            ],
            [
                0,
                40,
                "        0x7FFFFFFF|0, // largest QNaN"
            ],
            [
                0,
                41,
                "        0xFF800001|0, // smallest SNaN, sign-bit set"
            ],
            [
                0,
                42,
                "        0xFFBFFFFF|0, // largest SNaN, sign-bit set"
            ],
            [
                0,
                43,
                "        0xFFC00000|0, // smallest QNaN, sign-bit set"
            ],
            [
                0,
                44,
                "        0xFFFFFFFF|0, // largest QNaN, sign-bit set"
            ],
            [
                0,
                45,
                "    ],"
            ],
            [
                0,
                46,
                "    Float64: ["
            ],
            [
                0,
                47,
                "        [0x7FF00000|0, 0x00000001|0], // smallest SNaN"
            ],
            [
                0,
                48,
                "        [0x7FF7FFFF|0, 0xFFFFFFFF|0], // largest SNaN"
            ],
            [
                0,
                49,
                "        [0x7FF80000|0, 0x00000000|0], // smallest QNaN"
            ],
            [
                0,
                50,
                "        [0x7FFFFFFF|0, 0xFFFFFFFF|0], // largest QNaN"
            ],
            [
                0,
                51,
                "        [0xFFF00000|0, 0x00000001|0], // smallest SNaN, sign-bit set"
            ],
            [
                0,
                52,
                "        [0xFFF7FFFF|0, 0xFFFFFFFF|0], // largest SNaN, sign-bit set"
            ],
            [
                0,
                53,
                "        [0xFFF80000|0, 0x00000000|0], // smallest QNaN, sign-bit set"
            ],
            [
                0,
                54,
                "        [0xFFFFFFFF|0, 0xFFFFFFFF|0], // largest QNaN, sign-bit set"
            ],
            [
                0,
                55,
                "    ],"
            ],
            [
                0,
                56,
                "};"
            ],
            [
                0,
                57,
                ""
            ],
            [
                0,
                58,
                "// %TypedArray%.prototype.sort"
            ],
            [
                0,
                59,
                "const TypedArraySort = Int32Array.prototype.sort;"
            ],
            [
                0,
                60,
                ""
            ],
            [
                0,
                61,
                "// Test with small and large typed arrays."
            ],
            [
                0,
                62,
                "const typedArrayLengths = [16, 4096];"
            ],
            [
                0,
                63,
                ""
            ],
            [
                0,
                64,
                "for (const [TA, taLength] of prod(floatConstructors, typedArrayLengths)) {"
            ],
            [
                0,
                65,
                "    let type = TA.name.slice(0, -\"Array\".length);"
            ],
            [
                0,
                66,
                "    let nansLength = NaNs[type].length;"
            ],
            [
                0,
                67,
                "    let fta = new TA(taLength);"
            ],
            [
                0,
                68,
                "    let i32 = new Int32Array(fta.buffer);"
            ],
            [
                0,
                69,
                ""
            ],
            [
                0,
                70,
                "    // Add NaNs in various representations at the start of the typed array."
            ],
            [
                0,
                71,
                "    for (let i = 0; i < nansLength; ++i) {"
            ],
            [
                0,
                72,
                "        setInt[type](i32, i, NaNs[type][i]);"
            ],
            [
                0,
                73,
                "    }"
            ],
            [
                0,
                74,
                ""
            ],
            [
                0,
                75,
                "    // Also add two non-NaN values for testing."
            ],
            [
                0,
                76,
                "    fta[nansLength] = 123;"
            ],
            [
                0,
                77,
                "    fta[nansLength + 1] = -456;"
            ],
            [
                0,
                78,
                ""
            ],
            [
                0,
                79,
                "    // Sort the array and validate sort() sorted all elements correctly."
            ],
            [
                0,
                80,
                "    TypedArraySort.call(fta);"
            ],
            [
                0,
                81,
                ""
            ],
            [
                0,
                82,
                "    // |-456| should be sorted to the start."
            ],
            [
                0,
                83,
                "    assertEq(fta[0], -456);"
            ],
            [
                0,
                84,
                ""
            ],
            [
                0,
                85,
                "    // Followed by a bunch of zeros,"
            ],
            [
                0,
                86,
                "    const zeroOffset = 1;"
            ],
            [
                0,
                87,
                "    const zeroCount = taLength - nansLength - 2;"
            ],
            [
                0,
                88,
                "    for (let i = 0; i < zeroCount; ++i) {"
            ],
            [
                0,
                89,
                "        assertEq(fta[zeroOffset + i], 0, `At offset: ${zeroOffset + i}`);"
            ],
            [
                0,
                90,
                "    }"
            ],
            [
                0,
                91,
                ""
            ],
            [
                0,
                92,
                "    // and then |123|."
            ],
            [
                0,
                93,
                "    assertEq(fta[zeroOffset + zeroCount], 123);"
            ],
            [
                0,
                94,
                ""
            ],
            [
                0,
                95,
                "    // And finally the NaNs."
            ],
            [
                0,
                96,
                "    const nanOffset = zeroCount + 2;"
            ],
            [
                0,
                97,
                "    for (let i = 0; i < nansLength; ++i) {"
            ],
            [
                0,
                98,
                "        // We don't assert a specific NaN value is present, because this is"
            ],
            [
                0,
                99,
                "        // not required by the spec and we don't provide any guarantees NaN"
            ],
            [
                0,
                100,
                "        // values are either unchanged or canonicalized in sort()."
            ],
            [
                0,
                101,
                "        assertEq(fta[nanOffset + i], NaN, `At offset: ${nanOffset + i}`);"
            ],
            [
                0,
                102,
                "    }"
            ],
            [
                0,
                103,
                "}"
            ],
            [
                0,
                104,
                ""
            ],
            [
                0,
                105,
                "if (typeof reportCompare === \"function\")"
            ],
            [
                0,
                106,
                "    reportCompare(true, true);"
            ]
        ]
    },
    {
        "new": true,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/tests/ecma_6/TypedArray/sort_byteoffset.js",
        "binary": false,
        "count_add": 30,
        "count_del": 0,
        "lines": [
            [
                0,
                1,
                "// Ensure that when sorting TypedArrays we don't"
            ],
            [
                0,
                2,
                "// ignore byte offsets (bug 1290579)."
            ],
            [
                0,
                3,
                ""
            ],
            [
                0,
                4,
                "var sortFunctions = [Int32Array.prototype.sort];"
            ],
            [
                0,
                5,
                ""
            ],
            [
                0,
                6,
                "// Also test with cross-compartment wrapped typed arrays."
            ],
            [
                0,
                7,
                "if (typeof newGlobal === \"function\") {"
            ],
            [
                0,
                8,
                "    var otherGlobal = newGlobal();"
            ],
            [
                0,
                9,
                "    sortFunctions.push(newGlobal().Int32Array.prototype.sort);"
            ],
            [
                0,
                10,
                "}"
            ],
            [
                0,
                11,
                ""
            ],
            [
                0,
                12,
                "// The bug manifests itself only with Float arrays,"
            ],
            [
                0,
                13,
                "// but checking everything here just for sanity."
            ],
            [
                0,
                14,
                ""
            ],
            [
                0,
                15,
                "for (var ctor of anyTypedArrayConstructors) {"
            ],
            [
                0,
                16,
                "    var ab = new ArrayBuffer(1025 * ctor.BYTES_PER_ELEMENT);"
            ],
            [
                0,
                17,
                "    var ta = new ctor(ab, ctor.BYTES_PER_ELEMENT, 1024);"
            ],
            [
                0,
                18,
                ""
            ],
            [
                0,
                19,
                "    // |testArray[0]| shouldn't be modified when sort() is called below."
            ],
            [
                0,
                20,
                "    var testArray = new ctor(ab, 0, 1);"
            ],
            [
                0,
                21,
                "    testArray[0] = 1;"
            ],
            [
                0,
                22,
                ""
            ],
            [
                0,
                23,
                "    for (var sortFn of sortFunctions) {"
            ],
            [
                0,
                24,
                "        sortFn.call(ta);"
            ],
            [
                0,
                25,
                "        assertEq(testArray[0], 1);"
            ],
            [
                0,
                26,
                "    }"
            ],
            [
                0,
                27,
                "}"
            ],
            [
                0,
                28,
                ""
            ],
            [
                0,
                29,
                "if (typeof reportCompare === \"function\")"
            ],
            [
                0,
                30,
                "    reportCompare(true, true);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "js/src/vm/SelfHosting.cpp",
        "binary": false,
        "count_add": 0,
        "count_del": 0,
        "lines": []
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/IntentHelper.java",
        "binary": false,
        "count_add": 3,
        "count_del": 3,
        "lines": [
            [
                55,
                55,
                "    };"
            ],
            [
                56,
                56,
                "    private static final String[] UI_EVENTS = {"
            ],
            [
                57,
                57,
                "        \"Intent:Open\","
            ],
            [
                58,
                58,
                "        \"Intent:OpenForResult\","
            ],
            [
                59,
                59,
                "        \"Intent:OpenNoHandler\","
            ],
            [
                60,
                60,
                "    };"
            ],
            [
                61,
                61,
                ""
            ],
            [
                62,
                62,
                "    // via http://developer.android.com/distribute/tools/promote/linking.html"
            ],
            [
                63,
                0,
                "    private static String MARKET_INTENT_URI_PACKAGE_PREFIX = \"market://details?id=\";"
            ],
            [
                64,
                0,
                "    private static String EXTRA_BROWSER_FALLBACK_URL = \"browser_fallback_url\";"
            ],
            [
                0,
                63,
                "    private static final String MARKET_INTENT_URI_PACKAGE_PREFIX = \"market://details?id=\";"
            ],
            [
                0,
                64,
                "    private static final String EXTRA_BROWSER_FALLBACK_URL = \"browser_fallback_url\";"
            ],
            [
                65,
                65,
                ""
            ],
            [
                66,
                66,
                "    /** A partial URI to an error page - the encoded error URI should be appended before loading. */"
            ],
            [
                67,
                0,
                "    private static String UNKNOWN_PROTOCOL_URI_PREFIX = \"about:neterror?e=unknownProtocolFound&u=\";"
            ],
            [
                0,
                67,
                "    private static final String UNKNOWN_PROTOCOL_URI_PREFIX = \"about:neterror?e=unknownProtocolFound&u=\";"
            ],
            [
                68,
                68,
                ""
            ],
            [
                69,
                69,
                "    private static IntentHelper instance;"
            ],
            [
                70,
                70,
                ""
            ],
            [
                71,
                71,
                "    private IntentHelper() {"
            ],
            [
                72,
                72,
                "        EventDispatcher.getInstance().registerGeckoThreadListener(this, GECKO_EVENTS);"
            ],
            [
                73,
                73,
                "        EventDispatcher.getInstance().registerUiThreadListener(this, UI_EVENTS);"
            ],
            [
                74,
                74,
                "    }"
            ],
            [
                75,
                75,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/activitystream/homepanel/topstories/PocketStoriesLoader.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                46,
                46,
                " *"
            ],
            [
                47,
                47,
                " *   export MOZ_ANDROID_POCKET=1"
            ],
            [
                48,
                48,
                " *   ac_add_options --with-pocket-api-keyfile=$topsrcdir/mobile/android/base/pocket-api-sandbox.token"
            ],
            [
                49,
                49,
                " *"
            ],
            [
                50,
                50,
                " * and include the Pocket API token in the token file."
            ],
            [
                51,
                51,
                " */"
            ],
            [
                52,
                52,
                ""
            ],
            [
                53,
                53,
                "public class PocketStoriesLoader extends AsyncTaskLoader<List<TopStory>> {"
            ],
            [
                54,
                0,
                "    public static String LOGTAG = \"PocketStoriesLoader\";"
            ],
            [
                0,
                54,
                "    public static final String LOGTAG = \"PocketStoriesLoader\";"
            ],
            [
                55,
                55,
                ""
            ],
            [
                56,
                56,
                "    public static final String POCKET_REFERRER_URI = \"https://getpocket.com/recommendations\";"
            ],
            [
                57,
                57,
                ""
            ],
            [
                58,
                58,
                "    @RobocopTarget"
            ],
            [
                59,
                59,
                "    @VisibleForTesting public static final String PLACEHOLDER_TITLE = \"Placeholder \";"
            ],
            [
                60,
                60,
                "    private static final String DEFAULT_PLACEHOLDER_URL = \"https://www.mozilla.org/#\";"
            ],
            [
                61,
                61,
                "    static {"
            ],
            [
                62,
                62,
                "        setPlaceholderUrl(DEFAULT_PLACEHOLDER_URL);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/db/DBUtils.java",
        "binary": false,
        "count_add": 2,
        "count_del": 2,
        "lines": [
            [
                101,
                101,
                "            aValues.remove(aOriginalKey);"
            ],
            [
                102,
                102,
                "        }"
            ],
            [
                103,
                103,
                ""
            ],
            [
                104,
                104,
                "        if (!aValues.containsKey(aNewKey)) {"
            ],
            [
                105,
                105,
                "            aValues.put(aNewKey, value);"
            ],
            [
                106,
                106,
                "        }"
            ],
            [
                107,
                107,
                "    }"
            ],
            [
                108,
                108,
                ""
            ],
            [
                109,
                0,
                "    private static String HISTOGRAM_DATABASE_LOCKED = \"DATABASE_LOCKED_EXCEPTION\";"
            ],
            [
                110,
                0,
                "    private static String HISTOGRAM_DATABASE_UNLOCKED = \"DATABASE_SUCCESSFUL_UNLOCK\";"
            ],
            [
                0,
                109,
                "    private static final String HISTOGRAM_DATABASE_LOCKED = \"DATABASE_LOCKED_EXCEPTION\";"
            ],
            [
                0,
                110,
                "    private static final String HISTOGRAM_DATABASE_UNLOCKED = \"DATABASE_SUCCESSFUL_UNLOCK\";"
            ],
            [
                111,
                111,
                "    public static void ensureDatabaseIsNotLocked(SQLiteOpenHelper dbHelper, String databasePath) {"
            ],
            [
                112,
                112,
                "        final int maxAttempts = 5;"
            ],
            [
                113,
                113,
                "        int attempt = 0;"
            ],
            [
                114,
                114,
                "        SQLiteDatabase db = null;"
            ],
            [
                115,
                115,
                "        for (; attempt < maxAttempts; attempt++) {"
            ],
            [
                116,
                116,
                "            try {"
            ],
            [
                117,
                117,
                "                // Try a simple test and exit the loop."
            ],
            [
                118,
                118,
                "                db = dbHelper.getWritableDatabase();"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/home/CombinedHistoryRecyclerView.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                20,
                20,
                "import java.util.EnumSet;"
            ],
            [
                21,
                21,
                ""
            ],
            [
                22,
                22,
                "import static org.mozilla.gecko.home.CombinedHistoryPanel.OnPanelLevelChangeListener.PanelLevel.CHILD_RECENT_TABS;"
            ],
            [
                23,
                23,
                "import static org.mozilla.gecko.home.CombinedHistoryPanel.OnPanelLevelChangeListener.PanelLevel.CHILD_SYNC;"
            ],
            [
                24,
                24,
                "import static org.mozilla.gecko.home.CombinedHistoryPanel.OnPanelLevelChangeListener.PanelLevel.PARENT;"
            ],
            [
                25,
                25,
                ""
            ],
            [
                26,
                26,
                "public class CombinedHistoryRecyclerView extends RecyclerView"
            ],
            [
                27,
                27,
                "        implements RecyclerViewClickSupport.OnItemClickListener, RecyclerViewClickSupport.OnItemLongClickListener {"
            ],
            [
                28,
                0,
                "    public static String LOGTAG = \"CombinedHistoryRecycView\";"
            ],
            [
                0,
                28,
                "    public static final String LOGTAG = \"CombinedHistoryRecycView\";"
            ],
            [
                29,
                29,
                ""
            ],
            [
                30,
                30,
                "    protected interface AdapterContextMenuBuilder {"
            ],
            [
                31,
                31,
                "        HomeContextMenuInfo makeContextMenuInfoFromPosition(View view, int position);"
            ],
            [
                32,
                32,
                "    }"
            ],
            [
                33,
                33,
                ""
            ],
            [
                34,
                34,
                "    protected HomePager.OnUrlOpenListener mOnUrlOpenListener;"
            ],
            [
                35,
                35,
                "    protected OnPanelLevelChangeListener mOnPanelLevelChangeListener;"
            ],
            [
                36,
                36,
                "    protected CombinedHistoryPanel.DialogBuilder<RemoteClient> mDialogBuilder;"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/mma/MmaDelegate.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                60,
                60,
                "    public static final String PACKAGE_NAME_FOCUS = \"org.mozilla.focus\";"
            ],
            [
                61,
                61,
                "    public static final String PACKAGE_NAME_POCKET = \"com.ideashower.readitlater.pro\";"
            ],
            [
                62,
                62,
                ""
            ],
            [
                63,
                63,
                "    private static final String TAG = \"MmaDelegate\";"
            ],
            [
                64,
                64,
                ""
            ],
            [
                65,
                65,
                "    public static final String KEY_ANDROID_PREF_STRING_LEANPLUM_DEVICE_ID = \"android.not_a_preference.leanplum.device_id\";"
            ],
            [
                66,
                66,
                "    private static final String DEBUG_LEANPLUM_DEVICE_ID = \"8effda84-99df-11e7-abc4-cec278b6b50a\";"
            ],
            [
                67,
                67,
                ""
            ],
            [
                68,
                0,
                "    private static MmaInterface mmaHelper = MmaConstants.getMma();"
            ],
            [
                0,
                68,
                "    private static final MmaInterface mmaHelper = MmaConstants.getMma();"
            ],
            [
                69,
                69,
                "    private static WeakReference<Context> applicationContext;"
            ],
            [
                70,
                70,
                ""
            ],
            [
                71,
                71,
                "    public static void init(Activity activity) {"
            ],
            [
                72,
                72,
                "        applicationContext = new WeakReference<>(activity.getApplicationContext());"
            ],
            [
                73,
                73,
                "        // Since user attributes are gathered in Fennec, not in MMA implementation,"
            ],
            [
                74,
                74,
                "        // we gather the information here then pass to mmaHelper.init()"
            ],
            [
                75,
                75,
                "        // Note that generateUserAttribute always return a non null HashMap."
            ],
            [
                76,
                76,
                "        final Map<String, Object> attributes = gatherUserAttributes(activity);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/restrictions/GuestProfileConfiguration.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                9,
                9,
                ""
            ],
            [
                10,
                10,
                "import java.util.Arrays;"
            ],
            [
                11,
                11,
                "import java.util.List;"
            ],
            [
                12,
                12,
                ""
            ],
            [
                13,
                13,
                "/**"
            ],
            [
                14,
                14,
                " * RestrictionConfiguration implementation for guest profiles."
            ],
            [
                15,
                15,
                " */"
            ],
            [
                16,
                16,
                "public class GuestProfileConfiguration implements RestrictionConfiguration {"
            ],
            [
                17,
                0,
                "    static List<Restrictable> DISABLED_FEATURES = Arrays.asList("
            ],
            [
                0,
                17,
                "    static final List<Restrictable> DISABLED_FEATURES = Arrays.asList("
            ],
            [
                18,
                18,
                "            Restrictable.DOWNLOAD,"
            ],
            [
                19,
                19,
                "            Restrictable.INSTALL_EXTENSION,"
            ],
            [
                20,
                20,
                "            Restrictable.INSTALL_APPS,"
            ],
            [
                21,
                21,
                "            Restrictable.BROWSE,"
            ],
            [
                22,
                22,
                "            Restrictable.SHARE,"
            ],
            [
                23,
                23,
                "            Restrictable.BOOKMARK,"
            ],
            [
                24,
                24,
                "            Restrictable.ADD_CONTACT,"
            ],
            [
                25,
                25,
                "            Restrictable.SET_IMAGE,"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/restrictions/RestrictedProfileConfiguration.java",
        "binary": false,
        "count_add": 2,
        "count_del": 2,
        "lines": [
            [
                20,
                20,
                "import java.util.Arrays;"
            ],
            [
                21,
                21,
                "import java.util.LinkedHashMap;"
            ],
            [
                22,
                22,
                "import java.util.List;"
            ],
            [
                23,
                23,
                "import java.util.Map;"
            ],
            [
                24,
                24,
                ""
            ],
            [
                25,
                25,
                "@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)"
            ],
            [
                26,
                26,
                "public class RestrictedProfileConfiguration implements RestrictionConfiguration {"
            ],
            [
                27,
                27,
                "    // Mapping from restrictable feature to default state (on/off)"
            ],
            [
                28,
                0,
                "    private static Map<Restrictable, Boolean> configuration = new LinkedHashMap<>();"
            ],
            [
                0,
                28,
                "    private static final Map<Restrictable, Boolean> configuration = new LinkedHashMap<>();"
            ],
            [
                29,
                29,
                "    static {"
            ],
            [
                30,
                30,
                "        configuration.put(Restrictable.INSTALL_EXTENSION, false);"
            ],
            [
                31,
                31,
                "        configuration.put(Restrictable.PRIVATE_BROWSING, false);"
            ],
            [
                32,
                32,
                "        configuration.put(Restrictable.CLEAR_HISTORY, false);"
            ],
            [
                33,
                33,
                "        configuration.put(Restrictable.MASTER_PASSWORD, false);"
            ],
            [
                34,
                34,
                "        configuration.put(Restrictable.GUEST_BROWSING, false);"
            ],
            [
                35,
                35,
                "        configuration.put(Restrictable.ADVANCED_SETTINGS, false);"
            ],
            [
                36,
                36,
                "        configuration.put(Restrictable.CAMERA_MICROPHONE, false);"
            ],
            [
                39,
                39,
                "        configuration.put(Restrictable.TELEMETRY, false);"
            ],
            [
                40,
                40,
                "        configuration.put(Restrictable.HEALTH_REPORT, true);"
            ],
            [
                41,
                41,
                "        configuration.put(Restrictable.DEFAULT_THEME, true);"
            ],
            [
                42,
                42,
                "    }"
            ],
            [
                43,
                43,
                ""
            ],
            [
                44,
                44,
                "    /**"
            ],
            [
                45,
                45,
                "     * These restrictions are hidden from the admin configuration UI."
            ],
            [
                46,
                46,
                "     */"
            ],
            [
                47,
                0,
                "    private static List<Restrictable> hiddenRestrictions = new ArrayList<>();"
            ],
            [
                0,
                47,
                "    private static final List<Restrictable> hiddenRestrictions = new ArrayList<>();"
            ],
            [
                48,
                48,
                "    static {"
            ],
            [
                49,
                49,
                "        hiddenRestrictions.add(Restrictable.MASTER_PASSWORD);"
            ],
            [
                50,
                50,
                "        hiddenRestrictions.add(Restrictable.GUEST_BROWSING);"
            ],
            [
                51,
                51,
                "        hiddenRestrictions.add(Restrictable.DATA_CHOICES);"
            ],
            [
                52,
                52,
                "        hiddenRestrictions.add(Restrictable.DEFAULT_THEME);"
            ],
            [
                53,
                53,
                ""
            ],
            [
                54,
                54,
                "        // Hold behind Nightly flag until we have an actual block list deployed."
            ],
            [
                55,
                55,
                "        if (!AppConstants.NIGHTLY_BUILD) {"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/base/java/org/mozilla/gecko/widget/SplashScreen.java",
        "binary": false,
        "count_add": 2,
        "count_del": 2,
        "lines": [
            [
                3,
                3,
                "import android.animation.Animator;"
            ],
            [
                4,
                4,
                "import android.animation.AnimatorListenerAdapter;"
            ],
            [
                5,
                5,
                "import android.content.Context;"
            ],
            [
                6,
                6,
                "import android.util.AttributeSet;"
            ],
            [
                7,
                7,
                "import android.widget.RelativeLayout;"
            ],
            [
                8,
                8,
                ""
            ],
            [
                9,
                9,
                "public class SplashScreen extends RelativeLayout {"
            ],
            [
                10,
                10,
                ""
            ],
            [
                11,
                0,
                "    private static long MIN_DISPLAY_TIME = 0;"
            ],
            [
                12,
                0,
                "    private static long MAX_DISPLAY_TIME = 2000;"
            ],
            [
                0,
                11,
                "    private static final long MIN_DISPLAY_TIME = 0;"
            ],
            [
                0,
                12,
                "    private static final long MAX_DISPLAY_TIME = 2000;"
            ],
            [
                13,
                13,
                ""
            ],
            [
                14,
                14,
                "    private boolean hasReachedThreshold = false;"
            ],
            [
                15,
                15,
                "    private boolean shouldHideAsap = false;"
            ],
            [
                16,
                16,
                ""
            ],
            [
                17,
                17,
                "    public SplashScreen(Context context) {"
            ],
            [
                18,
                18,
                "        super(context);"
            ],
            [
                19,
                19,
                "    }"
            ],
            [
                20,
                20,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/gfx/GeckoSurface.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                14,
                14,
                ""
            ],
            [
                15,
                15,
                "import java.util.HashMap;"
            ],
            [
                16,
                16,
                ""
            ],
            [
                17,
                17,
                "import org.mozilla.gecko.annotation.WrapForJNI;"
            ],
            [
                18,
                18,
                ""
            ],
            [
                19,
                19,
                "public final class GeckoSurface extends Surface {"
            ],
            [
                20,
                20,
                "    private static final String LOGTAG = \"GeckoSurface\";"
            ],
            [
                21,
                21,
                ""
            ],
            [
                22,
                0,
                "    private static HashMap<Integer, GeckoSurfaceTexture> sSurfaceTextures = new HashMap<Integer, GeckoSurfaceTexture>();"
            ],
            [
                0,
                22,
                "    private static final HashMap<Integer, GeckoSurfaceTexture> sSurfaceTextures = new HashMap<Integer, GeckoSurfaceTexture>();"
            ],
            [
                23,
                23,
                ""
            ],
            [
                24,
                24,
                "    private int mHandle;"
            ],
            [
                25,
                25,
                "    private boolean mIsSingleBuffer;"
            ],
            [
                26,
                26,
                "    private volatile boolean mIsAvailable;"
            ],
            [
                27,
                27,
                "    private boolean mOwned = true;"
            ],
            [
                28,
                28,
                ""
            ],
            [
                29,
                29,
                "    @WrapForJNI(exceptionMode = \"nsresult\")"
            ],
            [
                30,
                30,
                "    public GeckoSurface(GeckoSurfaceTexture gst) {"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/gfx/GeckoSurfaceTexture.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                13,
                13,
                "import java.util.HashMap;"
            ],
            [
                14,
                14,
                "import java.util.LinkedList;"
            ],
            [
                15,
                15,
                ""
            ],
            [
                16,
                16,
                "import org.mozilla.gecko.annotation.WrapForJNI;"
            ],
            [
                17,
                17,
                ""
            ],
            [
                18,
                18,
                "public final class GeckoSurfaceTexture extends SurfaceTexture {"
            ],
            [
                19,
                19,
                "    private static final String LOGTAG = \"GeckoSurfaceTexture\";"
            ],
            [
                20,
                20,
                "    private static volatile int sNextHandle = 1;"
            ],
            [
                21,
                0,
                "    private static HashMap<Integer, GeckoSurfaceTexture> sSurfaceTextures = new HashMap<Integer, GeckoSurfaceTexture>();"
            ],
            [
                0,
                21,
                "    private static final HashMap<Integer, GeckoSurfaceTexture> sSurfaceTextures = new HashMap<Integer, GeckoSurfaceTexture>();"
            ],
            [
                22,
                22,
                ""
            ],
            [
                23,
                23,
                ""
            ],
            [
                24,
                24,
                "    private static HashMap<Long, LinkedList<GeckoSurfaceTexture>> sUnusedTextures ="
            ],
            [
                25,
                25,
                "        new HashMap<Long, LinkedList<GeckoSurfaceTexture>>();"
            ],
            [
                26,
                26,
                ""
            ],
            [
                27,
                27,
                "    private int mHandle;"
            ],
            [
                28,
                28,
                "    private boolean mIsSingleBuffer;"
            ],
            [
                29,
                29,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/gfx/SurfaceAllocatorService.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                9,
                9,
                "import android.content.Intent;"
            ],
            [
                10,
                10,
                "import android.os.Binder;"
            ],
            [
                11,
                11,
                "import android.os.IBinder;"
            ],
            [
                12,
                12,
                "import android.os.RemoteException;"
            ],
            [
                13,
                13,
                "import android.util.Log;"
            ],
            [
                14,
                14,
                ""
            ],
            [
                15,
                15,
                "public class SurfaceAllocatorService extends Service {"
            ],
            [
                16,
                16,
                ""
            ],
            [
                17,
                0,
                "    static private String LOGTAG = \"SurfaceAllocatorService\";"
            ],
            [
                0,
                17,
                "    private static final String LOGTAG = \"SurfaceAllocatorService\";"
            ],
            [
                18,
                18,
                ""
            ],
            [
                19,
                19,
                "    public int onStartCommand(final Intent intent, final int flags, final int startId) {"
            ],
            [
                20,
                20,
                "        return Service.START_STICKY;"
            ],
            [
                21,
                21,
                "    }"
            ],
            [
                22,
                22,
                ""
            ],
            [
                23,
                23,
                "    private Binder mBinder = new ISurfaceAllocator.Stub() {"
            ],
            [
                24,
                24,
                "        public GeckoSurface acquireSurface(int width, int height, boolean singleBufferMode) {"
            ],
            [
                25,
                25,
                "            GeckoSurfaceTexture gst = GeckoSurfaceTexture.acquire(singleBufferMode);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/media/GeckoHlsPlayer.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                45,
                45,
                ""
            ],
            [
                46,
                46,
                "@ReflectionTarget"
            ],
            [
                47,
                47,
                "public class GeckoHlsPlayer implements BaseHlsPlayer, ExoPlayer.EventListener {"
            ],
            [
                48,
                48,
                "    private static final String LOGTAG = \"GeckoHlsPlayer\";"
            ],
            [
                49,
                49,
                "    private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();"
            ],
            [
                50,
                50,
                "    private static final int MAX_TIMELINE_ITEM_LINES = 3;"
            ],
            [
                51,
                51,
                "    private static final boolean DEBUG = BuildConfig.NIGHTLY_BUILD || BuildConfig.DEBUG_BUILD;"
            ],
            [
                52,
                52,
                ""
            ],
            [
                53,
                0,
                "    private static AtomicInteger sPlayerId = new AtomicInteger(0);"
            ],
            [
                0,
                53,
                "    private static final AtomicInteger sPlayerId = new AtomicInteger(0);"
            ],
            [
                54,
                54,
                "    /*"
            ],
            [
                55,
                55,
                "     *  Because we treat GeckoHlsPlayer as a source data provider."
            ],
            [
                56,
                56,
                "     *  It will be created and initialized with a URL by HLSResource in"
            ],
            [
                57,
                57,
                "     *  Gecko media pipleine (in cpp). Once HLSDemuxer is created later, we"
            ],
            [
                58,
                58,
                "     *  need to bridge this HLSResource to the created demuxer. And they share"
            ],
            [
                59,
                59,
                "     *  the same GeckoHlsPlayer."
            ],
            [
                60,
                60,
                "     *  mPlayerId is a token used for Gecko media pipeline to obtain corresponding player."
            ],
            [
                61,
                61,
                "     */"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/media/RemoteMediaDrmBridgeStub.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                23,
                23,
                "    // mStubId is initialized during stub construction. It should be a unique"
            ],
            [
                24,
                24,
                "    // string which is generated in MediaDrmProxy in Fennec App process and is"
            ],
            [
                25,
                25,
                "    // used for Codec to obtain corresponding MediaCrypto as input to achieve"
            ],
            [
                26,
                26,
                "    // decryption."
            ],
            [
                27,
                27,
                "    // The generated stubId will be delivered to Codec via a code path starting"
            ],
            [
                28,
                28,
                "    // from MediaDrmProxy -> MediaDrmCDMProxy -> RemoteDataDecoder => IPC => Codec."
            ],
            [
                29,
                29,
                "    private String mStubId = \"\";"
            ],
            [
                30,
                30,
                ""
            ],
            [
                31,
                0,
                "    public static ArrayList<RemoteMediaDrmBridgeStub> mBridgeStubs ="
            ],
            [
                0,
                31,
                "    public static final ArrayList<RemoteMediaDrmBridgeStub> mBridgeStubs ="
            ],
            [
                32,
                32,
                "        new ArrayList<RemoteMediaDrmBridgeStub>();"
            ],
            [
                33,
                33,
                ""
            ],
            [
                34,
                34,
                "    private String getId() {"
            ],
            [
                35,
                35,
                "        return mStubId;"
            ],
            [
                36,
                36,
                "    }"
            ],
            [
                37,
                37,
                ""
            ],
            [
                38,
                38,
                "    private MediaCrypto getMediaCryptoFromBridge() {"
            ],
            [
                39,
                39,
                "        return mBridge != null ? mBridge.getMediaCrypto() : null;"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/mozglue/SharedMemory.java",
        "binary": false,
        "count_add": 5,
        "count_del": 2,
        "lines": [
            [
                11,
                11,
                "import android.util.Log;"
            ],
            [
                12,
                12,
                ""
            ],
            [
                13,
                13,
                "import java.io.FileDescriptor;"
            ],
            [
                14,
                14,
                "import java.io.IOException;"
            ],
            [
                15,
                15,
                "import java.lang.reflect.Method;"
            ],
            [
                16,
                16,
                ""
            ],
            [
                17,
                17,
                "public class SharedMemory implements Parcelable {"
            ],
            [
                18,
                18,
                "    private static final String LOGTAG = \"GeckoShmem\";"
            ],
            [
                19,
                0,
                "    private static Method sGetFDMethod = null; // MemoryFile.getFileDescriptor() is hidden. :("
            ],
            [
                0,
                19,
                "    private static final Method sGetFDMethod;"
            ],
            [
                20,
                20,
                "    private ParcelFileDescriptor mDescriptor;"
            ],
            [
                21,
                21,
                "    private int mSize;"
            ],
            [
                22,
                22,
                "    private int mId;"
            ],
            [
                23,
                23,
                "    private long mHandle; // The native pointer."
            ],
            [
                24,
                24,
                "    private boolean mIsMapped;"
            ],
            [
                25,
                25,
                "    private MemoryFile mBackedFile;"
            ],
            [
                26,
                26,
                ""
            ],
            [
                0,
                27,
                "    // MemoryFile.getFileDescriptor() is hidden. :("
            ],
            [
                27,
                28,
                "    static {"
            ],
            [
                0,
                29,
                "        Method method = null;"
            ],
            [
                28,
                30,
                "        try {"
            ],
            [
                29,
                0,
                "            sGetFDMethod = MemoryFile.class.getDeclaredMethod(\"getFileDescriptor\");"
            ],
            [
                0,
                31,
                "            method = MemoryFile.class.getDeclaredMethod(\"getFileDescriptor\");"
            ],
            [
                30,
                32,
                "        } catch (NoSuchMethodException e) {"
            ],
            [
                31,
                33,
                "            e.printStackTrace();"
            ],
            [
                32,
                34,
                "        }"
            ],
            [
                0,
                35,
                "        sGetFDMethod = method;"
            ],
            [
                33,
                36,
                "    }"
            ],
            [
                34,
                37,
                ""
            ],
            [
                35,
                38,
                "    private SharedMemory(Parcel in) {"
            ],
            [
                36,
                39,
                "        mDescriptor = in.readFileDescriptor();"
            ],
            [
                37,
                40,
                "        mSize = in.readInt();"
            ],
            [
                38,
                41,
                "        mId = in.readInt();"
            ],
            [
                39,
                42,
                "    }"
            ],
            [
                40,
                43,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "mobile/android/geckoview/src/main/java/org/mozilla/gecko/process/GeckoServiceChildProcess.java",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                19,
                19,
                "import android.os.IBinder;"
            ],
            [
                20,
                20,
                "import android.os.ParcelFileDescriptor;"
            ],
            [
                21,
                21,
                "import android.os.Process;"
            ],
            [
                22,
                22,
                "import android.os.RemoteException;"
            ],
            [
                23,
                23,
                "import android.util.Log;"
            ],
            [
                24,
                24,
                ""
            ],
            [
                25,
                25,
                "public class GeckoServiceChildProcess extends Service {"
            ],
            [
                26,
                26,
                ""
            ],
            [
                27,
                0,
                "    static private String LOGTAG = \"GeckoServiceChildProcess\";"
            ],
            [
                0,
                27,
                "    private static final String LOGTAG = \"GeckoServiceChildProcess\";"
            ],
            [
                28,
                28,
                ""
            ],
            [
                29,
                29,
                "    private static IProcessManager sProcessManager;"
            ],
            [
                30,
                30,
                ""
            ],
            [
                31,
                31,
                "    @WrapForJNI(calledFrom = \"gecko\")"
            ],
            [
                32,
                32,
                "    private static IGeckoEditableParent getEditableParent(final long contentId,"
            ],
            [
                33,
                33,
                "                                                          final long tabId) {"
            ],
            [
                34,
                34,
                "        try {"
            ],
            [
                35,
                35,
                "            return sProcessManager.getEditableParent(contentId, tabId);"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "testing/mochitest/BrowserTestUtils/BrowserTestUtils.jsm",
        "binary": false,
        "count_add": 1,
        "count_del": 1,
        "lines": [
            [
                422,
                422,
                "            // Check that new location is the URL we want."
            ],
            [
                423,
                423,
                "            if (!urlMatches(aBrowser.currentURI.spec)) {"
            ],
            [
                424,
                424,
                "              return;"
            ],
            [
                425,
                425,
                "            }"
            ],
            [
                426,
                426,
                "            if (waitForAnyTab) {"
            ],
            [
                427,
                427,
                "              tabbrowser.tabContainer.removeEventListener(\"TabOpen\", tabOpenListener);"
            ],
            [
                428,
                428,
                "            }"
            ],
            [
                429,
                429,
                "            tabbrowser.removeTabsProgressListener(progressListener);"
            ],
            [
                430,
                0,
                "            resolve(result);"
            ],
            [
                0,
                430,
                "            TestUtils.executeSoon(() => resolve(result));"
            ],
            [
                431,
                431,
                "          },"
            ],
            [
                432,
                432,
                "        };"
            ],
            [
                433,
                433,
                "        tabbrowser.addTabsProgressListener(progressListener);"
            ],
            [
                434,
                434,
                "      });"
            ],
            [
                435,
                435,
                "    });"
            ],
            [
                436,
                436,
                "  },"
            ],
            [
                437,
                437,
                ""
            ],
            [
                438,
                438,
                "  /**"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "toolkit/components/viewsource/test/browser/browser_open_docgroup.js",
        "binary": false,
        "count_add": 0,
        "count_del": 2,
        "lines": [
            [
                25,
                25,
                "  });"
            ],
            [
                26,
                26,
                ""
            ],
            [
                27,
                27,
                "  await BrowserTestUtils.withNewTab({"
            ],
            [
                28,
                28,
                "    gBrowser,"
            ],
            [
                29,
                29,
                "    url: \"http://example.com\","
            ],
            [
                30,
                30,
                "  }, async function(browser) {"
            ],
            [
                31,
                31,
                "    let sourceTab = await openViewSource(browser);"
            ],
            [
                32,
                32,
                "    let sourceBrowser = sourceTab.linkedBrowser;"
            ],
            [
                33,
                0,
                "    await waitForSourceLoaded(sourceBrowser);"
            ],
            [
                34,
                33,
                ""
            ],
            [
                35,
                34,
                "    await ContentTask.spawn(sourceBrowser, null, async function() {"
            ],
            [
                36,
                35,
                "      Assert.equal(content.document.body.id, \"viewsource\","
            ],
            [
                37,
                36,
                "                   \"View source mode enabled\");"
            ],
            [
                38,
                37,
                "    });"
            ],
            [
                39,
                38,
                ""
            ],
            [
                40,
                39,
                "    await BrowserTestUtils.removeTab(sourceTab);"
            ],
            [
                41,
                40,
                "  });"
            ],
            [
                53,
                52,
                "    ],"
            ],
            [
                54,
                53,
                "  });"
            ],
            [
                55,
                54,
                ""
            ],
            [
                56,
                55,
                "  await BrowserTestUtils.withNewTab({"
            ],
            [
                57,
                56,
                "    gBrowser,"
            ],
            [
                58,
                57,
                "    url: \"http://example.com\","
            ],
            [
                59,
                58,
                "  }, async function(browser) {"
            ],
            [
                60,
                59,
                "    let sourceWin = await openViewSource(browser);"
            ],
            [
                61,
                0,
                "    await waitForSourceLoaded(sourceWin);"
            ],
            [
                62,
                60,
                "    await ContentTask.spawn(sourceWin.gBrowser, null, async function() {"
            ],
            [
                63,
                61,
                "      Assert.equal(content.document.body.id, \"viewsource\","
            ],
            [
                64,
                62,
                "                   \"View source mode enabled\");"
            ],
            [
                65,
                63,
                "    });"
            ],
            [
                66,
                64,
                ""
            ],
            [
                67,
                65,
                "    await closeViewSourceWindow(sourceWin);"
            ],
            [
                68,
                66,
                "  });"
            ],
            [
                69,
                67,
                ""
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "toolkit/components/viewsource/test/browser/browser_srcdoc.js",
        "binary": false,
        "count_add": 0,
        "count_del": 2,
        "lines": [
            [
                11,
                11,
                "});"
            ],
            [
                12,
                12,
                ""
            ],
            [
                13,
                13,
                "async function checkFrameSource() {"
            ],
            [
                14,
                14,
                "  let sourceTab = await openViewFrameSourceTab(\"#f\");"
            ],
            [
                15,
                15,
                "  registerCleanupFunction(function() {"
            ],
            [
                16,
                16,
                "    gBrowser.removeTab(sourceTab);"
            ],
            [
                17,
                17,
                "  });"
            ],
            [
                18,
                18,
                ""
            ],
            [
                19,
                0,
                "  await waitForSourceLoaded(sourceTab);"
            ],
            [
                20,
                0,
                ""
            ],
            [
                21,
                19,
                "  let browser = gBrowser.selectedBrowser;"
            ],
            [
                22,
                20,
                "  let textContent = await ContentTask.spawn(browser, {}, async function() {"
            ],
            [
                23,
                21,
                "    return content.document.body.textContent;"
            ],
            [
                24,
                22,
                "  });"
            ],
            [
                25,
                23,
                "  is(textContent, frameSource, \"Correct content loaded\");"
            ],
            [
                26,
                24,
                "  let id = await ContentTask.spawn(browser, {}, async function() {"
            ],
            [
                27,
                25,
                "    return content.document.body.id;"
            ],
            [
                28,
                26,
                "  });"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "toolkit/components/viewsource/test/browser/head.js",
        "binary": false,
        "count_add": 65,
        "count_del": 60,
        "lines": [
            [
                42,
                42,
                ""
            ],
            [
                43,
                43,
                "function testViewSourceWindow(aURI, aTestCallback, aCloseCallback) {"
            ],
            [
                44,
                44,
                "  openViewSourceWindow(aURI, function(aWindow) {"
            ],
            [
                45,
                45,
                "    aTestCallback(aWindow);"
            ],
            [
                46,
                46,
                "    closeViewSourceWindow(aWindow, aCloseCallback);"
            ],
            [
                47,
                47,
                "  });"
            ],
            [
                48,
                48,
                "}"
            ],
            [
                49,
                49,
                ""
            ],
            [
                50,
                0,
                "function waitForViewSourceWindow() {"
            ],
            [
                51,
                0,
                "  return new Promise(resolve => {"
            ],
            [
                52,
                0,
                "    let windowListener = {"
            ],
            [
                53,
                0,
                "      onOpenWindow(xulWindow) {"
            ],
            [
                54,
                0,
                "        let win = xulWindow.QueryInterface(Ci.nsIInterfaceRequestor)"
            ],
            [
                55,
                0,
                "                           .getInterface(Ci.nsIDOMWindow);"
            ],
            [
                56,
                0,
                "        win.addEventListener(\"load\", function() {"
            ],
            [
                57,
                0,
                "          if (win.document.documentElement.getAttribute(\"windowtype\") !="
            ],
            [
                58,
                0,
                "              WINDOW_TYPE) {"
            ],
            [
                59,
                0,
                "            return;"
            ],
            [
                60,
                0,
                "          }"
            ],
            [
                61,
                0,
                "          // Found the window"
            ],
            [
                62,
                0,
                "          resolve(win);"
            ],
            [
                63,
                0,
                "          Services.wm.removeListener(windowListener);"
            ],
            [
                64,
                0,
                "        }, {once: true});"
            ],
            [
                65,
                0,
                "      },"
            ],
            [
                66,
                0,
                "      onCloseWindow() {},"
            ],
            [
                67,
                0,
                "      onWindowTitleChange() {}"
            ],
            [
                68,
                0,
                "    };"
            ],
            [
                69,
                0,
                "    Services.wm.addListener(windowListener);"
            ],
            [
                70,
                0,
                "  });"
            ],
            [
                0,
                50,
                "/**"
            ],
            [
                0,
                51,
                " * Wait for view source tab or window after calling given function to open it."
            ],
            [
                0,
                52,
                " *"
            ],
            [
                0,
                53,
                " * @param open - a function to open view source."
            ],
            [
                0,
                54,
                " * @returns the new tab or window which shows the source."
            ],
            [
                0,
                55,
                " */"
            ],
            [
                0,
                56,
                "async function waitForViewSourceTabOrWindow(open) {"
            ],
            [
                0,
                57,
                "  let sourceLoadedPromise;"
            ],
            [
                0,
                58,
                "  let tabOrWindowPromise;"
            ],
            [
                0,
                59,
                "  if (Services.prefs.getBoolPref(\"view_source.tab\")) {"
            ],
            [
                0,
                60,
                "    tabOrWindowPromise = new Promise(resolve => {"
            ],
            [
                0,
                61,
                "      gBrowser.tabContainer.addEventListener(\"TabOpen\", event => {"
            ],
            [
                0,
                62,
                "        let tab = event.target;"
            ],
            [
                0,
                63,
                "        sourceLoadedPromise = waitForSourceLoaded(tab);"
            ],
            [
                0,
                64,
                "        resolve(tab);"
            ],
            [
                0,
                65,
                "      }, { once: true });"
            ],
            [
                0,
                66,
                "    });"
            ],
            [
                0,
                67,
                "  } else {"
            ],
            [
                0,
                68,
                "    tabOrWindowPromise = new Promise(resolve => {"
            ],
            [
                0,
                69,
                "      let windowListener = {"
            ],
            [
                0,
                70,
                "        onOpenWindow(xulWindow) {"
            ],
            [
                0,
                71,
                "          let win = xulWindow.QueryInterface(Ci.nsIInterfaceRequestor)"
            ],
            [
                0,
                72,
                "              .getInterface(Ci.nsIDOMWindow);"
            ],
            [
                0,
                73,
                "          win.addEventListener(\"load\", function() {"
            ],
            [
                0,
                74,
                "            if (win.document.documentElement.getAttribute(\"windowtype\") !="
            ],
            [
                0,
                75,
                "                WINDOW_TYPE) {"
            ],
            [
                0,
                76,
                "              return;"
            ],
            [
                0,
                77,
                "            }"
            ],
            [
                0,
                78,
                "            // Found the window"
            ],
            [
                0,
                79,
                "            sourceLoadedPromise = waitForSourceLoaded(win);"
            ],
            [
                0,
                80,
                "            resolve(win);"
            ],
            [
                0,
                81,
                "            Services.wm.removeListener(windowListener);"
            ],
            [
                0,
                82,
                "          }, {once: true});"
            ],
            [
                0,
                83,
                "        },"
            ],
            [
                0,
                84,
                "        onCloseWindow() {},"
            ],
            [
                0,
                85,
                "        onWindowTitleChange() {}"
            ],
            [
                0,
                86,
                "      };"
            ],
            [
                0,
                87,
                "      Services.wm.addListener(windowListener);"
            ],
            [
                0,
                88,
                "    });"
            ],
            [
                0,
                89,
                "  }"
            ],
            [
                0,
                90,
                ""
            ],
            [
                0,
                91,
                "  await open();"
            ],
            [
                0,
                92,
                ""
            ],
            [
                0,
                93,
                "  let tabOrWindow = await tabOrWindowPromise;"
            ],
            [
                0,
                94,
                "  await sourceLoadedPromise;"
            ],
            [
                0,
                95,
                ""
            ],
            [
                0,
                96,
                "  return tabOrWindow;"
            ],
            [
                71,
                97,
                "}"
            ],
            [
                72,
                98,
                ""
            ],
            [
                73,
                99,
                "/**"
            ],
            [
                74,
                100,
                " * Opens view source for a browser."
            ],
            [
                75,
                101,
                " *"
            ],
            [
                76,
                102,
                " * @param browser - the <xul:browser> to open view source for."
            ],
            [
                77,
                103,
                " * @returns the new tab or window which shows the source."
            ],
            [
                78,
                104,
                " */"
            ],
            [
                79,
                105,
                "function openViewSource(browser) {"
            ],
            [
                80,
                0,
                "  let openPromise;"
            ],
            [
                81,
                0,
                "  if (Services.prefs.getBoolPref(\"view_source.tab\")) {"
            ],
            [
                82,
                0,
                "    openPromise = BrowserTestUtils.waitForNewTab(gBrowser, null);"
            ],
            [
                83,
                0,
                "  } else {"
            ],
            [
                84,
                0,
                "    openPromise = waitForViewSourceWindow();"
            ],
            [
                85,
                0,
                "  }"
            ],
            [
                86,
                0,
                ""
            ],
            [
                87,
                0,
                "  window.BrowserViewSource(browser);"
            ],
            [
                88,
                0,
                ""
            ],
            [
                89,
                0,
                "  return openPromise;"
            ],
            [
                0,
                106,
                "  return waitForViewSourceTabOrWindow(() => {"
            ],
            [
                0,
                107,
                "    window.BrowserViewSource(browser);"
            ],
            [
                0,
                108,
                "  });"
            ],
            [
                90,
                109,
                "}"
            ],
            [
                91,
                110,
                ""
            ],
            [
                92,
                111,
                "/**"
            ],
            [
                93,
                112,
                " * Opens a view source tab / window for a selection (View Selection Source)"
            ],
            [
                94,
                113,
                " * within the currently selected browser in gBrowser."
            ],
            [
                95,
                114,
                " *"
            ],
            [
                96,
                115,
                " * @param aCSSSelector - used to specify a node within the selection to"
            ],
            [
                97,
                116,
                " *                       view the source of. It is expected that this node is"
            ],
            [
                102,
                121,
                "  let contentAreaContextMenuPopup ="
            ],
            [
                103,
                122,
                "    document.getElementById(\"contentAreaContextMenu\");"
            ],
            [
                104,
                123,
                "  let popupShownPromise ="
            ],
            [
                105,
                124,
                "    BrowserTestUtils.waitForEvent(contentAreaContextMenuPopup, \"popupshown\");"
            ],
            [
                106,
                125,
                "  await BrowserTestUtils.synthesizeMouseAtCenter(aCSSSelector,"
            ],
            [
                107,
                126,
                "          { type: \"contextmenu\", button: 2 }, gBrowser.selectedBrowser);"
            ],
            [
                108,
                127,
                "  await popupShownPromise;"
            ],
            [
                109,
                128,
                ""
            ],
            [
                110,
                0,
                "  let openPromise;"
            ],
            [
                111,
                0,
                "  if (Services.prefs.getBoolPref(\"view_source.tab\")) {"
            ],
            [
                112,
                0,
                "    openPromise = BrowserTestUtils.waitForNewTab(gBrowser, null);"
            ],
            [
                113,
                0,
                "  } else {"
            ],
            [
                114,
                0,
                "    openPromise = waitForViewSourceWindow();"
            ],
            [
                115,
                0,
                "  }"
            ],
            [
                116,
                0,
                ""
            ],
            [
                117,
                0,
                "  let popupHiddenPromise ="
            ],
            [
                118,
                0,
                "    BrowserTestUtils.waitForEvent(contentAreaContextMenuPopup, \"popuphidden\");"
            ],
            [
                119,
                0,
                "  let item = document.getElementById(\"context-viewpartialsource-selection\");"
            ],
            [
                120,
                0,
                "  EventUtils.synthesizeMouseAtCenter(item, {});"
            ],
            [
                121,
                0,
                "  await popupHiddenPromise;"
            ],
            [
                122,
                0,
                ""
            ],
            [
                123,
                0,
                "  return openPromise;"
            ],
            [
                0,
                129,
                "  return waitForViewSourceTabOrWindow(async () => {"
            ],
            [
                0,
                130,
                "    let popupHiddenPromise ="
            ],
            [
                0,
                131,
                "        BrowserTestUtils.waitForEvent(contentAreaContextMenuPopup, \"popuphidden\");"
            ],
            [
                0,
                132,
                "    let item = document.getElementById(\"context-viewpartialsource-selection\");"
            ],
            [
                0,
                133,
                "    EventUtils.synthesizeMouseAtCenter(item, {});"
            ],
            [
                0,
                134,
                "    await popupHiddenPromise;"
            ],
            [
                0,
                135,
                "  });"
            ],
            [
                124,
                136,
                "}"
            ],
            [
                125,
                137,
                ""
            ],
            [
                126,
                138,
                "/**"
            ],
            [
                127,
                139,
                " * Opens a view source tab for a frame (View Frame Source) within the"
            ],
            [
                128,
                140,
                " * currently selected browser in gBrowser."
            ],
            [
                129,
                141,
                " *"
            ],
            [
                130,
                142,
                " * @param aCSSSelector - used to specify the frame to view the source of."
            ],
            [
                131,
                143,
                " * @returns the new tab which shows the source."
            ],
            [
                140,
                152,
                "  await popupShownPromise;"
            ],
            [
                141,
                153,
                ""
            ],
            [
                142,
                154,
                "  let frameContextMenu = document.getElementById(\"frame\");"
            ],
            [
                143,
                155,
                "  popupShownPromise ="
            ],
            [
                144,
                156,
                "    BrowserTestUtils.waitForEvent(frameContextMenu, \"popupshown\");"
            ],
            [
                145,
                157,
                "  EventUtils.synthesizeMouseAtCenter(frameContextMenu, {});"
            ],
            [
                146,
                158,
                "  await popupShownPromise;"
            ],
            [
                147,
                159,
                ""
            ],
            [
                148,
                0,
                "  let newTabPromise = BrowserTestUtils.waitForNewTab(gBrowser, null);"
            ],
            [
                149,
                0,
                ""
            ],
            [
                150,
                0,
                "  let popupHiddenPromise ="
            ],
            [
                151,
                0,
                "    BrowserTestUtils.waitForEvent(frameContextMenu, \"popuphidden\");"
            ],
            [
                152,
                0,
                "  let item = document.getElementById(\"context-viewframesource\");"
            ],
            [
                153,
                0,
                "  EventUtils.synthesizeMouseAtCenter(item, {});"
            ],
            [
                154,
                0,
                "  await popupHiddenPromise;"
            ],
            [
                155,
                0,
                ""
            ],
            [
                156,
                0,
                "  return newTabPromise;"
            ],
            [
                0,
                160,
                "  return waitForViewSourceTabOrWindow(async () => {"
            ],
            [
                0,
                161,
                "    let popupHiddenPromise ="
            ],
            [
                0,
                162,
                "        BrowserTestUtils.waitForEvent(frameContextMenu, \"popuphidden\");"
            ],
            [
                0,
                163,
                "    let item = document.getElementById(\"context-viewframesource\");"
            ],
            [
                0,
                164,
                "    EventUtils.synthesizeMouseAtCenter(item, {});"
            ],
            [
                0,
                165,
                "    await popupHiddenPromise;"
            ],
            [
                0,
                166,
                "  });"
            ],
            [
                157,
                167,
                "}"
            ],
            [
                158,
                168,
                ""
            ],
            [
                159,
                169,
                "registerCleanupFunction(function() {"
            ],
            [
                160,
                170,
                "  var windows = Services.wm.getEnumerator(WINDOW_TYPE);"
            ],
            [
                161,
                171,
                "  ok(!windows.hasMoreElements(), \"No remaining view source windows still open\");"
            ],
            [
                162,
                172,
                "  while (windows.hasMoreElements())"
            ],
            [
                163,
                173,
                "    windows.getNext().close();"
            ],
            [
                164,
                174,
                "});"
            ],
            [
                193,
                203,
                "    gBrowser.removeTab(tab);"
            ],
            [
                194,
                204,
                "  });"
            ],
            [
                195,
                205,
                ""
            ],
            [
                196,
                206,
                "  await ContentTask.spawn(gBrowser.selectedBrowser, { selector: aCSSSelector }, async function(arg) {"
            ],
            [
                197,
                207,
                "    let element = content.document.querySelector(arg.selector);"
            ],
            [
                198,
                208,
                "    content.getSelection().selectAllChildren(element);"
            ],
            [
                199,
                209,
                "  });"
            ],
            [
                200,
                210,
                ""
            ],
            [
                201,
                0,
                "  let tabOrWindow = await openViewPartialSource(aCSSSelector);"
            ],
            [
                202,
                0,
                ""
            ],
            [
                203,
                0,
                "  // Wait until the source has been loaded."
            ],
            [
                204,
                0,
                "  await waitForSourceLoaded(tabOrWindow);"
            ],
            [
                205,
                0,
                ""
            ],
            [
                206,
                0,
                "  return tabOrWindow;"
            ],
            [
                0,
                211,
                "  return openViewPartialSource(aCSSSelector);"
            ],
            [
                207,
                212,
                "}"
            ],
            [
                208,
                213,
                ""
            ],
            [
                209,
                214,
                "function pushPrefs(...aPrefs) {"
            ],
            [
                210,
                215,
                "  return SpecialPowers.pushPrefEnv({\"set\": aPrefs});"
            ],
            [
                211,
                216,
                "}"
            ],
            [
                212,
                217,
                ""
            ],
            [
                213,
                218,
                "function waitForPrefChange(pref) {"
            ],
            [
                214,
                219,
                "  let deferred = PromiseUtils.defer();"
            ]
        ]
    },
    {
        "new": false,
        "deleted": false,
        "renamed_from": null,
        "filename": "toolkit/mozapps/extensions/test/xpinstall/browser_bug638292.js",
        "binary": false,
        "count_add": 2,
        "count_del": 4,
        "lines": [
            [
                1,
                1,
                "// ----------------------------------------------------------------------------"
            ],
            [
                2,
                2,
                "// Test whether an InstallTrigger.enabled is working"
            ],
            [
                3,
                3,
                "add_task(async function() {"
            ],
            [
                4,
                4,
                "  let testtab = await BrowserTestUtils.openNewForegroundTab(gBrowser, TESTROOT + \"bug638292.html\");"
            ],
            [
                5,
                5,
                ""
            ],
            [
                6,
                6,
                "  async function verify(link, button) {"
            ],
            [
                7,
                7,
                "    info(\"Clicking \" + link);"
            ],
            [
                8,
                8,
                ""
            ],
            [
                9,
                0,
                "    let waitForNewTabPromise = BrowserTestUtils.waitForNewTab(gBrowser);"
            ],
            [
                0,
                9,
                "    let loadedPromise = BrowserTestUtils.waitForNewTab(gBrowser, null, true);"
            ],
            [
                10,
                10,
                ""
            ],
            [
                11,
                11,
                "    await BrowserTestUtils.synthesizeMouseAtCenter(\"#\" + link, { button },"
            ],
            [
                12,
                12,
                "                                                   gBrowser.selectedBrowser);"
            ],
            [
                13,
                13,
                ""
            ],
            [
                14,
                0,
                "    let newtab = await waitForNewTabPromise;"
            ],
            [
                15,
                0,
                ""
            ],
            [
                16,
                0,
                "    await BrowserTestUtils.browserLoaded(newtab.linkedBrowser);"
            ],
            [
                0,
                14,
                "    let newtab = await loadedPromise;"
            ],
            [
                17,
                15,
                ""
            ],
            [
                18,
                16,
                "    let result = await ContentTask.spawn(newtab.linkedBrowser, { }, async function() {"
            ],
            [
                19,
                17,
                "      return (content.document.getElementById(\"enabled\").textContent == \"true\");"
            ],
            [
                20,
                18,
                "    });"
            ],
            [
                21,
                19,
                ""
            ],
            [
                22,
                20,
                "    ok(result, \"installTrigger for \" + link + \" should have been enabled\");"
            ],
            [
                23,
                21,
                ""
            ],
            [
                24,
                22,
                "    // Focus the old tab (link3 is opened in the background)"
            ]
        ]
    }
]